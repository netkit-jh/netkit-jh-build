#!/usr/bin/env bash

#     Copyright 2020-2021 Adam Bromiley, Joshua Hawking - Warwick Manufacturing
#     Group, University of Warwick.
#     Copyright 2002-2007 Maurizio Patrignani, Stefano Pettini, Maurizio
#     Pizzonia, Fabio Ricci, Massimo Rimondini - Computer Networks Research
#     Group, Roma Tre University.
#
#     This file is part of Netkit.
#
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.


### BEGIN INIT INFO
# Provides:          netkit-phase1
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Netkit phase 1
# Description:       This is a Netkit initialization script. It is intended for
#                    usage inside virtual machines.
### END INIT INFO


###############################################################################
# Write netkit-phase1's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME {start|stop}"
}


###############################################################################
# Mount a directory on the host filesystem to a directory on the guest.
# Usage:
#   mount_host_dir SOURCE DIRECTORY [MESSAGE]
# Globals:
#   None
# Arguments:
#   $1 - directory on host filesystem to mount
#   $2 - mount point on guest
#   $3 - optional message to output
# Returns:
#   None
# Example:
#   None
###############################################################################
mount_host_dir() {
   local host_dir=$1
   local guest_dir=$2
   local message=$3

   [ -n "$message" ] && printf "%s\n" "$message"
   mkdir --parents -- "$guest_dir"
   mount --types hostfs --options "rw,$host_dir" --source none --target "$guest_dir"
}


###############################################################################
# Unmount a host directory that has been mounted into the guest
# Usage:
#   umount_host_dir DIRECTORY [MESSAGE]
# Globals:
#   None
# Arguments:
#   $1 - mount point on guest
#   $2 - optional message to output
# Returns:
#   None
# Example:
#   None
###############################################################################
umount_host_dir() {
   local guest_dir=$1
   local message=$2

   [ -n "$message" ] && printf "%s\n" "$message"
   umount -- "$guest_dir"
   rmdir -- "$guest_dir"
}


SCRIPTNAME=$(basename -- "$0")


# ANSI color escape sequences
color_normal=$'\033[0m'
color_bold_blue=$'\033[34;1m'
color_cyan=$'\033[36m'


case $1 in
   start) 
      echo
      # The information block between the two line delimeters is coloured cyan
      echo "$color_bold_blue--- Starting Netkit phase 1 init script ---$color_normal$color_cyan"


      # This short GNU AWK script processes /proc/cmdline (the command line
      # used to invoke the kernel). The script transforms it into a null-
      # delimited list of parameters by replacing all unquoted spaces with
      # a null byte, making the output similar to /proc/$pid/cmdline. The
      # full_command variable is a Bash array where each element is a
      # parameter=value specification.
      mapfile -d "" -t full_command < <(gawk '
         BEGIN {
            FPAT = "([^ ]+)|(\"[^\"]+\")"
            OFS = "\0"
         }
         {
            $1=$1
            gsub("\"", "")
            printf $0
         }' < /proc/cmdline)

      for argument in "${full_command[@]}"; do
         option=${argument%%=*}
         value=${argument#*=}

         case $option in
            hostname)      hostname=$value;;
            hosthome)      hosthome=$value;;
            mount)         mount_specifications+=( "$value" );;
            hostlab)       hostlab=$value;;
            def_route)     default_route=$value;;
            ubd0)          filesystem=${value#*,};;
            autoconf_*)
               # Get interface name
               device=${option#autoconf_}
               # Array of alternating interface names and IP addresses
               autoconf_interfaces+=( "$device" "$value" )
            ;;
         esac
      done


      # Set title for the terminal window with special xterm escape sequence
      [ -n "$hostname" ] && printf "%b%s%b" "\033]2;" "$hostname" "\a"

      # Mount host directories inside the guest
      if [ "${#mount_specifications[@]}" -gt 0 ]; then
         for mount_specification in "${mount_specifications[@]}"; do
            source_mount=${mount_specification%%,*}
            destination_mount=${mount_specification#*,}

            mount_host_dir "$source_mount" "$destination_mount" "Mounting '$source_mount' on '$destination_mount'"
         done
      fi

      [ -n "$hosthome" ] &&
         mount_host_dir "$hosthome" /hosthome "Mounting '$hosthome' on '/hosthome/'"
      [ -n "$hostlab" ] &&
         mount_host_dir "$hostlab"  /hostlab  "Mounting '$hostlab' on '/hostlab/'"


      # Configure virtual host on the first boot
      if [ ! -e /etc/netkit/.vhostconfigured ]; then
         if [ -n "$hostname" ]; then
            echo "Configuring host name"
            printf "%s\n" "$hostname" > /etc/hostname
            hostname --file /etc/hostname

            # Prepend IPv4 localhost entry to hosts file
            sed --in-place "1s;^;127.0.0.1 $hostname\n;" /etc/hosts
         fi

         echo "Running 'resolvconf -u' to generate '/etc/resolv.conf'"
         resolvconf -u

         # File check avoids need to set the nullglob shell option
         shared_files=( "/hostlab/shared/"* )
         if [ -e "${shared_files[0]}" ]; then
            echo "Copying shared files from '/hostlab/shared/'"
            # Copy shared files without following symbolic links. Ignore file
            # ownership.
			   cp \
               --recursive \
               --no-preserve ownership \
               --no-dereference \
               --preserve=links \
               --target-directory / \
               -- "${shared_files[@]}"
         fi

         # File check avoids need to set the nullglob shell option
         host_files=( "/hostlab/$hostname/"* )
         if [ -e "${host_files[0]}" ]; then
            echo "Copying $hostname-specific files from '/hostlab/$hostname/'"
            # Copy host-specific files without following symbolic links. Ignore
            # file ownership.
            cp \
               --recursive \
               --no-preserve ownership \
               --no-dereference \
               --preserve=links \
               --target-directory / \
               -- "${host_files[@]}"
         fi

         # Only perform these actions on the machine's first boot (if a shared
         # filesystem is not being used).
         if [ -n "$filesystem" ]; then
            cat << EOF > /etc/netkit/.vhostconfigured
# This file is created on the first boot to tell Netkit on successive reboots
# not to regenerate the hosts file or resolv.conf, or to recopy hostlab files
# into the filesystem. This is only used when a shared filesystem is not in use
# by machines.
EOF
         fi
      fi

      # Autoconfigure interfaces
      for (( i = 0; i < ${#autoconf_interfaces[@]}; i += 2 )); do
         device=${autoconf_interfaces[$i]}
         addr=${autoconf_interfaces[$(( i + 1 ))]}

         echo "Bringing up interface $device ($addr)"
         ifconfig "$device" "$addr" up
      done

      # Insert a default entry in the routing table, if asked to
      if [ -n "$default_route" ]; then
         echo "Configuring default gateway as $default_route"
         route add default gateway "$default_route"
      fi


      echo "$color_bold_blue--- Netkit phase 1 initialization terminated ---$color_normal"
      echo
      ;;
   stop)
      echo
      echo "$color_bold_blue--- Starting Netkit phase 1 shutdown script ---$color_normal$color_cyan"

      mapfile -d "" -t full_command < <(gawk '
         BEGIN {
            FPAT = "([^ ]+)|(\"[^\"]+\")"
            OFS = "\0"
         }
         {
            $1=$1
            gsub("\"", "")
            printf $0
         }' < /proc/cmdline)

      for argument in "${full_command[@]}"; do
         option=${argument%%=*}
         value=${argument#*=}

         case $option in
            hosthome)      hosthome=$value;;
            mount)         mount_specifications+=( "$value" );;
            hostlab)       hostlab=$value;;
         esac
      done


      # Unmount host directories inside the guest
      [ -n "$hostlab" ] &&
         umount_host_dir "/hostlab"  "Unmounting and removing '/hostlab'"
      [ -n "$hosthome" ] &&
         umount_host_dir "/hosthome" "Unmounting and removing '/hosthome'"

      if [ "${#mount_specifications[@]}" -gt 0 ]; then
         for mount_specification in "${mount_specifications[@]}"; do
            destination_mount=${mount_specification#*,}
            umount_host_dir "$destination_mount" "Unmounting and removing '$destination_mount'"
         done
      fi

      echo "$color_bold_blue--- Netkit phase 1 shutdown terminated ---$color_normal"
      echo
      ;;
   *)
      usage_line
      exit 1
      ;;
esac
