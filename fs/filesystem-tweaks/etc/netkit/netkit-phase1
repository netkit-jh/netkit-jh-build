#!/bin/bash

#     Copyright 2002-2007 Maurizio Patrignani, Stefano Pettini, Maurizio Pizzonia,
#     Fabio Ricci, Massimo Rimondini - Computer Networks Research Group, Roma Tre
#     University.
#
#     This file is part of Netkit.
#
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.


### BEGIN INIT INFO
# Provides:          netkit-phase1
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Netkit phase 1
# Description:       This is a Netkit initialization script. It is intended for
#                    usage inside virtual machines.
### END INIT INFO

# Function that mounts a certain directory on the host
mountdir() {
   local host_dir="$1"
   local guest_dir="$2"
   local message="$3"

   echo "$message"
   mkdir -p "$guest_dir"
   mount none "$guest_dir" --types hostfs --options "rw,$host_dir"
}


# ANSI style escape sequences
color_normal='\033[0m'
color_bold_blue='\033[34;1m'
color_cyan='\033[36m'


case $1 in
   start) 
      echo
      # The information block between the two line delimeters is coloured cyan
      echo -e "$color_bold_blue--- Starting Netkit phase 1 init script ---$color_normal$color_cyan"


      # Full command used to invoke the process
      mapfile -d "" -t full_command < "/proc/cmdline"

      first_iteration=true
      for argument in "${full_command[@]}"; do
         # Skip program name
         if $first_iteration; then
            first_iteration=false
            continue
         fi

         option=${argument%%=*}
         value=${argument#*=}

         case $option in
            name)          hostname=$value;;
            hosthome)      hosthome=$value;;
            hostlab)       hostlab=$value;;
            title)         title=$value;;
            def_route)     default_route=$value;;
            ubd0)          filesystem=${value#*,};;
            autoconf_eth*)
               # Get interface name (ethX)
               device=${option#autoconf_}
               # Array of alternating interface names and IP addresses
               autoconf_interfaces+=( "$device" "$value" )
            ;;
         esac
      done


      HOSTNAME=$hostname
      export HOSTNAME


      # Set title for the terminal window with special xterm escape sequence
      [ -n "$title" ] && echo -ne "\033]2;$title\a"

      # Mount host directories inside the guest
      [ -n "$hosthome" ] && mountdir "$hosthome" /hosthome "Mounting $hosthome on '/hosthome/'"
      [ -n "$hostlab" ] &&  mountdir "$hostlab"  /hostlab  "Mounting $hostlab on '/hostlab/'"


      # Configure virtual host for the first boot
      if [ ! -e /etc/vhostconfigured ]; then
         if [ -n "$hostname" ]; then
            echo "Configuring host name"
            echo "$hostname" > /etc/hostname
            hostname --file /etc/hostname

            # Prepend IPv4 localhost entry to hosts file
            sed --in-place "1s;^;127.0.0.1 $hostname\n;" /etc/hosts
         fi

         echo "Running 'resolvconf -u' to generate '/etc/resolv.conf'"
         resolvconf -u

         shared_files=( "/hostlab/shared/"* )

         # File check avoids need to set the nullglob shell option
         if [ -e "${shared_files[0]}" ]; then
            echo "Copying shared files from '/hostlab/shared/'"
            # Copy shared files, ignoring the ownership but keeping the permissions on the files
			   cp -r --no-preserve=ownership -d /hostlab/shared/* /
         fi

         if [ "$(echo /hostlab/$hostname/*)" != "/hostlab/$hostname/*" ]; then
            echo "Copying $hostname specific files from /hostlab/$hostname/..."
            # Copy hostname specific files, ignoring the ownership but keeping the permissions on the files
            cp -r --no-preserve=ownership -d /hostlab/$hostname/* /
         fi
         
         [ -n "$filesystem" ] && touch /etc/vhostconfigured
      fi


      # Autoconfigure interfaces
      for (( i = 0; i < ${#autoconf_interfaces[@]}; i += 2 )); do
         device=${autoconf_interfaces[$i]}
         addr=${autoconf_interfaces[$(( i + 1 ))]}

         echo "Bringing up interface $device ($addr)"
         ifconfig "$device" "$addr" up
      done


      # Insert a default entry in the routing table, if asked to
      # (this must be done after autoconfiguring interfaces)
      if [ -n "$default_route" ]; then
         echo "Configuring default gateway: $default_route..."
         route add default gateway "$default_route"
      fi

      echo "$color_bold_blue--- Netkit phase 1 initialization terminated ---$color_normal"
      echo
      ;;
   stop)
      echo
      echo "$color_bold_blue--- Starting Netkit phase 1 shutdown script ---$color_normal$color_cyan"

      if [ -d /hostlab ]; then
         echo  "Unmounting and removing '/hostlab'"
         umount /hostlab
         rmdir /hostlab
      fi

      # TODO: make mounting /hosthome optional
      echo  "Unmounting and removing '/hosthome'"
      umount /hosthome
      rmdir /hosthome

      echo "$color_bold_blue--- Netkit phase 1 shutdown terminated ---$color_normal"
      echo
      ;;
   *)
      echo "Usage: $0 {start|stop}"
      exit 1
      ;;
esac

