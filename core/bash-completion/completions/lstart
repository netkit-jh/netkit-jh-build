#!/usr/bin/env bash

#     Copyright 2021 Adam Bromiley - Warwick Manufacturing Group, University of
#     Warwick.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# Bash completion function for lstart


###############################################################################
# Bash completion function for lstart to fill the COMPREPLY array
# Usage:
#   _lstart
# Globals:
#   r- COMP_CWORD
#   -w COMPREPLY
#   r- COMP_WORDS
#   r- PWD
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
_lstart() {
   local options

   local lab_directory lab_vhosts

   local current_word=${COMP_WORDS[COMP_CWORD]}
   local previous_word=${COMP_WORDS[COMP_CWORD - 1]}

   mapfile -t options < <(_get_command_options lstart)

   # If the current word is the first argument, it cannot be an option
   # parameter.
   if [ "$COMP_CWORD" -eq 1 ]; then
      case $current_word in
         -*)
            # Current word is an option
            mapfile -t COMPREPLY < <(compgen -W "${options[*]}" -- "$current_word")
            ;;
         *)
            # Current word could be an option or machine name (non-option
            # argument), so we complete as a machine name.
            _get_lab_vhosts "lab_vhosts" "$PWD"
            mapfile -t COMPREPLY < <(compgen -W "${lab_vhosts[*]}" -- "$current_word")
            ;;
      esac
      return
   fi

   # If the previous word is an option, the current word will be an option
   # parameter or next option (in the case of --version, etc.).
   # If it was a non-option argument (such as a machine name), the current word
   # will be an option or another non-option argument.
   case $previous_word in
      -d)
         mapfile -t COMPREPLY < <(compgen -A directory -- "$current_word")
         ;;
      -o|--pass)
         # NOTE: _vstart will set COMPREPLY
         _vstart "1"
         ;;
      -w|--wait)
         # These options take parameters that are not autocompletable
         COMPREPLY=( )
         ;;
      *)
         # The previous word is either a non-option or one that does not take a
         # parameter. The current word is therefore a new option or non-option
         # argument.
         #
         # Covered options:
         # -F, -f, --fast, --force-lab, --help, -l, --list, -p, -s,
         # --sequential, --tmux-attached, --tmux-detached, -v, --verbose,
         # --version
         case $current_word in
            -*)
               # Current word is a new option
               mapfile -t COMPREPLY < <(compgen -W "${options[*]}" -- "$current_word")
               ;;
            *)
               # Current word could be an option or machine name (non-option
               # argument), so we complete as a machine name.
               lab_directory=$(_get_lab_directory "${COMP_WORDS[@]}")
               _get_lab_vhosts "lab_vhosts" "$lab_directory"
               mapfile -t COMPREPLY < <(compgen -W "${lab_vhosts[*]}" -- "$current_word")
               ;;
         esac
         ;;
   esac
}


# shellcheck source=../helpers
. -- "$NETKIT_HOME/bash-completion/helpers"
# shellcheck source=./vstart
. -- "$NETKIT_HOME/bash-completion/completions/vstart"

complete -F _lstart lstart
