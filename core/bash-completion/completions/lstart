#!/usr/bin/env bash

#     Copyright 2021-2022 Adam Bromiley - Warwick Manufacturing Group,
#     University of Warwick.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# Bash completion function for lstart.


###############################################################################
# Bash completion function for lstart to fill the COMPREPLY array.
# Usage:
#   _lstart
# Globals:
#   COMPREPLY
###############################################################################
_lstart() {
   local lab_vhosts

   local previous_word=${COMP_WORDS[COMP_CWORD - 1]}
   local current_word=${COMP_WORDS[COMP_CWORD]}

   # If the current word is the first argument, it cannot be an option
   # parameter.
   if [ "$COMP_CWORD" -eq 1 ]; then
      case $current_word in
         -*)
            # Current word is an option
            _opts_compgen "lstart" "" "$current_word"
            ;;
         *)
            # Current word could be an option or machine name (non-option
            # argument), so we complete as a machine name.
            _get_lab_vhosts lab_vhosts "$PWD"
            mapfile -t COMPREPLY < <(compgen -W "${lab_vhosts[*]}" -- "$current_word")
            ;;
      esac
      return
   fi

   # The following section of code parses the -o|--pass command-line option,
   # which is used to pass arguments through to vstart. There are six possible
   # structures of the COMP_WORDS array when the option is used correctly,
   # where the option and parameter structure could be up to five words long
   # ('=' is usually in the COMP_WORDBREAKS variable, so counts as a word); any
   # word could be getting completed.
   #
   #    Relative COMP_WORDS index                 Command
   #      1     2     3     4     5
   #    pas     =   arg     = param  ==> ./program --pass=arg=param
   #    pas     =   arg              ==> ./program --pass=arg
   #    pas   arg     = param        ==> ./program --pass arg=param
   #    pas   arg                    ==> ./program --pass arg
   #      o   arg     = param        ==> ./program -o arg=param
   #      o   arg                    ==> ./program -o arg
   #
   if [ "$COMP_CWORD" -gt 4 ] &&
   [ "${COMP_WORDS[COMP_CWORD - 4]}" = "--pass" ] &&
   [ "${COMP_WORDS[COMP_CWORD - 3]}" = "=" ] &&
   [ "$previous_word" = "=" ]; then
      # '--pass=arg=param'
      _vstart "" "" "" "${COMP_WORDS[COMP_CWORD - 2]}" "$current_word"
      return
   fi

   if [ "$COMP_CWORD" -gt 3 ]; then
      if [ "${COMP_WORDS[COMP_CWORD - 3]}" = "--pass" ]; then
         if [ "$previous_word" = "=" ]; then
            # '--pass arg=param'
            _vstart "" "" "" "${COMP_WORDS[COMP_CWORD - 2]}" "$current_word"
            return
         elif [ "${COMP_WORDS[COMP_CWORD - 2]}" = "=" ] && [ "$current_word" = "=" ]; then
            # '--pass=arg='
            _vstart "" "" "" "$previous_word" ""
            return
         fi
      elif [ "${COMP_WORDS[COMP_CWORD - 3]}" = "-o" ] && [ "$previous_word" = "=" ]; then
         # '-o arg=param'
         _vstart "" "" "" "${COMP_WORDS[COMP_CWORD - 2]}" "$current_word"
         return
      fi
   fi

   if [ "$COMP_CWORD" -gt 2 ]; then
      if [ "${COMP_WORDS[COMP_CWORD - 2]}" = "--pass" ]; then
         if [ "$previous_word" = "=" ]; then
            # '--pass=arg'
            _vstart "" "" "" "" "$current_word"
            return
         elif [ "$current_word" = "=" ]; then
            # '--pass arg=param'
            _vstart "" "" "" "$previous_word" ""
            return
         fi
      elif [ "${COMP_WORDS[COMP_CWORD - 2]}" = "-o" ] && [ "$current_word" = "=" ]; then
         # '-o opt='
         _vstart "" "" "" "$previous_word" ""
         return
      fi
   fi

   if [ "$current_word" = "=" ] && [[ "$previous_word" == --* ]]; then
      # '--opt=' results in current_word="=", previous_word="--opt". We can
      # model this as '--opt ' by just setting current_word to an empty string.
      current_word=""
   elif [ "$previous_word" = "=" ] && [ -n "$current_word" ]; then
      # '--opt=param' results in current_word="param", previous_word="=". We
      # therefore must get the option before the equals sign by tracking back
      # another index of COMP_WORDS.
      previous_word=${COMP_WORDS[COMP_CWORD - 2]}
   fi

   # If the previous word is an option, the current word will be an option
   # parameter or next option (in the case of --version, etc.).
   # If it was a non-option argument (such as a machine name), the current word
   # will be an option or another non-option argument.
   case $previous_word in
      -d)
         mapfile -t COMPREPLY < <(compgen -A directory -- "$current_word")
         ;;
      -o|--pass)
         _vstart "" "" "" "" "$current_word"
         ;;
      -w|--wait)
         # These options take parameters that are not autocompletable
         COMPREPLY=( )
         ;;
      *)
         # The previous word is either a non-option or one that does not take a
         # parameter. The current word is therefore a new option or non-option
         # argument.
         #
         # Covered options:
         # -F, -f, --fast, --force-lab, --help, -l, --list, -p, -s,
         # --sequential, --tmux-attached, --tmux-detached, -v, --verbose,
         # --version
         case $current_word in
            -*)
               # Current word is a new option
               _opts_compgen "lstart" "" "$current_word"
               ;;
            *)
               # Current word could be an option or machine name (non-option
               # argument), so we complete as a machine name.
               _get_lab_vhosts lab_vhosts "$(_get_lab_dir "${COMP_WORDS[@]}")"
               mapfile -t COMPREPLY < <(compgen -W "${lab_vhosts[*]}" -- "$current_word")
               ;;
         esac
         ;;
   esac
}


# shellcheck source=../helpers
. -- "$NETKIT_HOME/bash-completion/helpers"
# shellcheck source=./vstart
. -- "$NETKIT_HOME/bash-completion/completions/vstart"

complete -F _lstart lstart
