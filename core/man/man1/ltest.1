.TH LTEST 1 "July 2010" "" Netkit
.SH NAME
ltest \- test a netkit lab
.SH SYNOPSIS
\fBltest\fR [options] [\fIMACHINE-NAME\fR...]


\" ########################################

.SH DESCRIPTION

\fIltest\fR is a tool for retrieving and saving information about the state of
running virtual machines inside a Netkit lab. These information can then be
distributed with the lab itself, so that users can easily test whether the lab
still behaves in the expected way when it is being launched on a different
machine or Netkit distribution.

Basically, \fIltest\fR takes care of launching the lab in a 'test mode',
running an ad\-hoc set of scripts on virtual machines, and storing their output
on the host filesystem. If the test is being run for the first time, \fIltest\fR
creates a "signature" of the test results that is used as a fingerprint of a
correctly behaving lab. The next times that the test is run, test results are
compared with the signature to check that the lab still behaves as expected.
After running the test, the lab is then automatically stopped, any temporary
files are deleted and the outcome of the test is printed as output.

In the following, it is assumed that \fIlab\-path\fR is the directory in which
the lab is located.

Whenever a test is run, a subdirectory '_test' is created inside \fIlab\-path\fR
(if it does not already exist) and the results of the test are stored inside it.
Any existing results of previous tests are overwritten. Subdirectory
'_test/signature' and '_test/results' will contain the signature of the lab test
and the outcome of the last executed test, respectively.

Providing a list of \fIMACHINE\-NAME\fRs on the command line has the effect of
limiting the scope of the test to these virtual machines (comparing two
tests performed on different sets of virtual machines obviously leads to a
negative outcome).

\fIltest\fR supports the same options as \fIlstart\fR(1), except \fB\-f\fR, and
some additional options described below.

\fBNOTE\fR: Unless differently specified (e.g., by using the \fB\-\-pass\fR
option or environment variables), \fIltest\fR runs virtual machines without an
attached terminal. Therefore, no window will pop up and no output will be shown
by virtual machines during a test. This has been chosen in order to ease the
automation of regression tests.

\" ########################################

.SH OPTIONS

Besides the options supported by \fBlstart\fR, \fBltest\fR also support the
following options:

.TP
.B
\-R
.PD 0
.TP
.B
\-\-rebuild\-signature
Force generating a new signature for the lab, even if one already exists.
Overwrites any existing signature.

.TP
.B
\-S
.PD 0
.TP
.B
\-\-script\-mode
Use a more concise output with pretty printing of the test outcome, which is
more suitable for testing a large number of labs from a script.

.TP
.B
\-\-verify=\fITESTTYPE\fR
After a signature has been generated, the outcome of any following tests is
compared with information in the signature. By default, for each virtual machine
\fIltest\fR verifies the outcome of the user-defined test if one is available
in the signature, or of the built-in test otherwise. Option \fB\-\-verify\fR
allows to force \fIltest\fR to always verify only a certain kind of test.
Possible values for \fITESTTYPE\fR are as follows:

.RS
.PP
.TP 10
.B
user
Consider only user\-defined test scripts.
.TP
.B
builtin
Consider only predefined built\-in tests.
.TP
.B
both
Consider both kinds of test scripts (i.e., takes into account the built\-in test
even when a user\-defined test exists for a certain virtual machine).

.PP
Verifications are always performed only for those tests that exist in the
signature, regardless of whether or not option \fB\-\-verify\fR is being used.
.RE

\" ########################################

.SH "HOW TO PERFORM A TEST"

A Netkit test consists of two kinds of scripts: \fBdefault\fR (built\-in) and
\fBuser\fR.

.IP \(en 2
The \fBdefault\fR script is built\-in into the \fIltest\fR support scripts and
cannot be changed by the user. It runs some commands inside the virtual machine in
order to store the state of its network interfaces, routing table, listening TCP
and UDP ports, and running processes.

The output of the \fBdefault\fR script is saved into
.nh
'\fIlab\-path\fR/_test/results/\fImachine\fR.default\fR',
.hy
where \fImachine\fR is
the name of the virtual machine the test has been performed on.
The file format for the output of the default test is quite simple. There are
several sections which are started by a textual description between square
brackets. The contents of each section are the output of a specific command.
The following list describes both the sections and the corresponding commands:

.RS
.TP
.B
[NETWORK INTERFACES]
(essentially) the output of 'ip addr show'.

.TP
.B
[ROUTING TABLE]
(essentially) the output of 'route -n'.

.TP
.B
[LISTENING PORTS]
(essentially) the output of 'netstat -tuwln'.

.TP
.B
[PROCESSES]
(essentially) the output of 'ps -e -o uid,command'.
.RE


.IP \(en 2
The \fBuser\fR script may be used to customize the test procedure. In particular,
it can be used to dump information that are defined by a user through a personal
script.

\fIltest\fR reads the user test script for machine \fImachine\fR from
.nh
'\fIlab\-path\fR/_test/\fImachine\fR.test\fR'
.hy
and writes the output to
.nh
'\fIlab\-path\fR/_test/results/\fImachine\fR.user'.
.hy
Remember that the user test script must be marked as executable. You can achieve
this by using the follwing command:

.RS 2
chmod +x \fIlab\-path\fR/_test/\fImachine\fR.test
.RE

\fBNotice\fR: every time you launch \fIltest\fR any existing output of previous
tests is overwritten. Hence, remember to move output files elsewhere before
performing other instances of the test.

\" ########################################

.SH RETURN VALUE

\fIltest\fR has a zero return value if and only if the test completed
successfully or a new signature has been generated. This allows, for example,
to automate lab tests by using a command like the following:

.RS 2
.nf
if ! ltest -d my_lab --script-mode; then
   echo "Lab test failed!" > lab.log
fi
.fi
.RE

\" ########################################

.SH FILES

.SS Test scripts

.TP
.I
\fIlab\-path\fR/_test/\fImachine\fR.test
This is an executable script created by the user. Actually, it can be any
kind of executable file (i.e., binary files are allowed as well) and, in case
it is a script, it can be written in any scripting language whose interpreter
is installed inside virtual machines.

The only requirement is that it must be an executable file. To achieve this,
you can use the following command:

.nf
chmod +x \fIlab\-path\fR/_test/\fImachine\fR.test
.fi

.SS Test output files

The output of the test scripts is stored inside the following files:

.TP
.I
\fIlab\-path\fR/_test/results/\fImachine\fR.default
This file contains the output of the execution of the default test operations.

.TP
.I
\fIlab\-path\fR/_test/results/\fImachine\fR.user
This file contains the output of the execution of
\fIlab\-path\fR/_test/\fImachine\fR.test\fR.

.SS Test signature files

The first time a test is being run on a lab, \fIltest\fR creates a "signature"
instead of the test results. The signature is used by subsequent tests as a
fingerprint of a correctly running lab. Signature files are exactly the same as
result files, and are placed at the following locations:

.TP
.I
\fIlab\-path\fR/_test/signature/\fImachine\fR.user
.PP
\fIlab\-path\fR/_test/results/\fImachine\fR.default

.SS Other files

.TP
.I
/etc/netkit/netkit-test-phase \fR(inside virtual machines)
This file is the container for the default test script. It resides in the
virtual machines filesystem. In case you want to alter the default test
operations, this is the file you must work on.

\fBNotice\fR: remember to launch a virtual machine by using the \fB\-W\fR option
of \fBvstart\fR (see \fBvstart\fR(1)) in order to make the changes to
\fInetkit\-test\-phase\fR permanent. Please read carefully the man page of
\fBvstart\fR(1) and the README in the Netkit filesystem package before changing
the Netkit filesystem.


\" ########################################

.SH EXAMPLES

The following one is an example of a test file 'pc1.default' that has been
generated by the default testing script:

.RS 3
.nf
[INTERFACES]

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1


[ROUTE]

Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface

[LISTENING PORTS]

Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State

[PROCESSES]

  UID COMMAND
    0 init [2]
    0 [ksoftirqd/0]
    0 [events/0]
    0 [khelper]
    0 [kthread]
    0 [kblockd/0]
    0 [pdflush]
    0 [pdflush]
    0 [aio/0]
    0 [kswapd0]
    0 /bin/sh /etc/init.d/rc 2
    0 /sbin/klogd
    0 /sbin/syslogd
    0 /bin/bash /etc/rc2.d/S99netkit-phase2 start
    0 /bin/bash /etc/netkit/netkit-test-phase
    0 /bin/ps -e -o uid,command
.fi
.RE

In order to write a customized test script you can proceed as
follows. Assume your lab is located inside directory
.nh
'/home/foo/lab',
.hy
and that
it consists of machines \fBpc1\fR and \fBpc2\fR. The first step to customize the
test is to create a subdirectory
.nh
'/home/foo/lab/_test'.
.hy
Once done, you can
create your own test script
.nh
'/home/foo/lab/_test/pc1.test'
.hy
for machine \fBpc1\fR.
For example, the following script can be used to dump the current system time
of the virtual machine by using python:

.RS 2
.nf
#!/usr/bin/python
import time
print time.asctime(time.localtime(time.time()));
.fi
.RE

It is now possible to launch the lab in test mode by using 'ltest /home/foo/lab'.
This will execute the default test operations (i.e., dump of network interfaces,
routing table, etc.) on both \fBpc1\fR and \fBpc2\fR and the customized
script on \fBpc1\fR only. The results of the tests will be saved into
.nh
'/home/foo/lab/_test/results',
.hy
and will consist of files 'pc1.default',
'pc1.user', and 'pc2.default'. In particular, 'pc1.user' should look as
follows:

.RS 2
.nf
Thu Jul 21 18:31:25 2005
.fi
.RE


\" ########################################

.SH NOTES

The typical usage of this script is for regression tests of Netkit labs over
different version of Netkit and for testing that Netkit labs work properly on
different host configurations.


\" ########################################

.SH "SEE ALSO"

\fIlstart\fR(1),
\fIlclean\fR(1),
\fIlcrash\fR(1),
\fIlrestart\fR(1),
\fIlinfo\fR(1),
\fIlhalt\fR(1).
    

\" ########################################

.SH AUTHOR

ltest script: Fabio Ricci, Stefano Pettini, Massimo Rimondini
.br
This man page: Fabio Ricci, Massimo Rimondini


\" ########################################

.so include/bugreport.man
