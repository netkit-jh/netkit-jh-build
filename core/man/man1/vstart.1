.TH VSTART 1 "July 2010" "" Netkit
.SH NAME
vstart \- start a new netkit virtual machine
.SH SYNOPSIS
\fBvstart\fR [options] \fIMACHINE\-NAME\fR


\" ########################################

.SH DESCRIPTION
The \fIvstart\fR command can be used to start a new virtual machine named
\fIMACHINE\-NAME\fR. Names of virtual machines must be unique for each user.
Yet, different users can run machines having the same name.
.PP
Without providing options, \fIvstart\fR starts a virtual machine whose configuration
reflects the defaults stored inside the \fInetkit.conf\fR file
(see \fBnetkit.conf\fR(5)). The options described below can be used to adjust the
features of a virtual machine upon starting it.
.PP
Notice: unless differently stated, command line arguments (\fIMACHINE\-NAME\fR),
option arguments (e.g., names of collision domains), and any path name (including
the path to the current directory at the time of invoking \fIvstart\fR) should
not contain space characters. Not complying to this causes \fIvstart\fR to raise an error.


.SS Hardware/Kernel settings
.TP
.B
-k \fIFILENAME\fR
.PD 0
.TP
.B
--kernel=\fIFILENAME\fR
Each virtual machine can have its own kernel. By using this option, it is possible
to explicitly choose which kernel should be used for the machine being started.
\fIFILENAME\fR must be a UML kernel. The default kernel is configured inside the
\fInetkit.conf\fR file (see \fBnetkit.conf\fR(5)).

.TP
.B
-M \fIMEMORY\fR
.PD 0
.TP
.B
--mem=\fIMEMORY\fR
Set the amount of available RAM inside the virtual machine to \fIMEMORY\fR MB. The
range of valid amounts and the default amount of memory are both defined inside
the \fInetkit.conf\fR file (see \fBnetkit.conf\fR(5)). Notice that the memory
consumed by the virtual machine processes on the host machine can be slightly
larger than this value.


.SS Networking settings
.TP
.B
--eth\fIN\fR=\fIDOMAIN\fR
Equip virtual machine with a network interface \fBeth\fIN\fR. \fIN\fR is an integer
ranging from 0 to a maximum value stored inside the \fInetkit.conf\fR file
(see \fBnetkit.conf\fR(5)).

Interface \fBeth\fIN\fR will be attached to a (virtual) collision domain whose name
is \fIDOMAIN\fR. A collision domain can be seen as a sort of virtual hub. Thus,
attaching interfaces of different virtual machines to the same
collision domain allows them to exchange network traffic.

Including a comma in \fIDOMAIN\fR defines a 'tap' interface. This is a special socket
that allows an external to be reached in the virtual machine. A 'tap' interface
must be declared with the following syntax:

.nf
--eth\fIN\fR=\fIDOMAIN\fR,\fITAP\-ADDRESS\fR,\fIGUEST\-ADDRESS\fR
.fi
                        
where \fIDOMAIN\fR is a valid collision domain name, \fITAP_ADDRESS\fR is the IP address of
the 'host side' of the interface and \fIGUEST_ADDRESS\fR is the IP address of the
interface inside the virtual machine. \fITAP_ADDRESS\fR and \fIGUEST_ADDRESS\fR must be on
the same /8 network. Machines can share a 'tap' interface if one uses the same
\fIDOMAIN\fR and \fITAP_ADDRESS\fR for them. If an interface on the same \fIDOMAIN\fR with a
different \fITAP_ADDRESS\fR already exists, an error will be thrown. Another
interface with a \fITAP_ADDRESS\fR within the /8 subnet of another cannot be created;
likewise, like a regular collision domain, two machines using the same 'tap'
interface cannot share an IP address (there will be no explicit error for
either of these scenarios.)

.B
*** IMPORTANT NOTES ABOUT USING "tap" INTERFACES ***
.RS
.IP \(en 2
Configuring "\fBtap\fR" interfaces for the first time requires administrative
(root) privileges. The \fIvstart\fR script will take care of asking you for the
root password if needed. For more information about how Netkit gains root
privileges, see \fBSETTING UP NETKIT FOR USE WITH SUDO\fR in the man page of
\fBnetkit.conf\fR(5). The following operations are performed when working as
root:

1) The '/dev/net/tun' device is created (if it does not exist).
.br
2) Permissions for the '/dev/net/tun' device are set to 666 (read/write for all users).
.br
3) Any existing network device named 'nk_\fIINTERFACE_SHA256\fR' is brought down and
removed (\fIINTERFACE_SHA256\fR is the SHA-256 digest of the concatenated SHA-256
digests of the current username and collision domain name, truncated to 12
characters long).
.br
4) A tap network device named 'nk_\fIINTERFACE_SHA256\fR' is created and configured to
have IP address \fITAP\-ADDRESS\fR.
.br
5) Kernel based IP forwarding is enabled via the '/proc/sys/net/ipv4/ip_forward'
special file.
.br
6) If the iptables firewall is found, packet forwarding for data coming from the
tap interface is enabled. Also, masquerading is enabled. More precisely, the following
rules are added to the current iptables configuration:

*nat
.br
--append POSTROUTING ! --out-interface lo --match comment --comment Netkit-JH --jump MASQUERADE
.br
*filter
.br
--append FORWARD --in-interface nk_+ --match comment --comment Netkit-JH --jump ACCEPT

All these configuration settings can be easily removed by using the \fBvclean\fR
command (see \fBvclean\fR(1)).

.IP \(en 2
Using "\fBtap\fR" interfaces requires some host-side configurations. These
configurations are not automatically removed after halting virtual machines.
The \fBvclean\fR command must be used for this purpose (see \fBvclean\fR(1)).
.RE


.SS Filesystem settings
.TP
.B
-H
.PD 0
.TP
.B
--no-hosthome
By default, the home directory of the current user is made available for
reading/writing inside the virtual machine under the special directory
'/hosthome'. This option disables this behaviour, thus not making the host
filesystem accessible from inside the virtual machine.

.TP
.B
--mount=\fISRC,DEST\fR
Mount \fISRC\fR directory from the host to \fIDEST\fR directory in the virtual machine.

.TP
.B
-m \fIMODEL\-FILESYSTEM\fR
.PD 0
.TP
.B
--model-fs=\fIMODEL\-FILESYSTEM\fR
.PD 0
.TP
.B
-f \fIFILESYSTEM\fR
.PD 0
.TP
.B
--filesystem=\fIFILESYSTEM\fR
Virtual machines need two special files which contain their filesystem.

.RS
.IP \(en 2
The whole filesystem of the virtual machine is stored inside a \fImodel file\fR
(also called \fIbacking file\fR). Upon first startup, every virtual machine has
the same filesystem, which is the one stored in the \fImodel file\fR.
.br
The default name of this file is stored inside the file \fInetkit.conf\fR
(see \fBnetkit.conf\fR(5)). By explicitly specifying a \fIMODEL\-FILESYSTEM\fR,
a different model file can be used. \fIMODEL\-FILESYSTEM\fR is the name of a file
that stores an entire model filesystem for the virtual machines.

.IP \(en 2
Changes being made to the model filesystem are stored in a different file, based
on a \fICOW\fR (\fICopy on Write\fR) strategy: whatever is written to the filesystem
is stored in an external file instead of overwriting the model filesystem.
.br
By default, every virtual machine has its own \fICOW file\fR. Such file is
created in the current directory as soon as the virtual machine is first started. Its
name is the same as the name of the virtual machine plus the suffix ".disk".
For example, assuming the current directory is '/home/foo/', starting a new
virtual machine named "pc1" automatically creates the file '/home/foo/pc1.disk'.
.br
By passing a \fIFILESYSTEM\fR name it is possible to use a different COW file.
If \fIFILESYSTEM\fR is not found, a new file with this name is created. Otherwise,
\fIFILESYSTEM\fR must be the name of a COW file that has been previously created
by a virtual machine.
.br
Consider that COW files are never automatically removed after a machine has been
halted or crashed (unless proper options of \fBvhalt\fR or \fBvcrash\fR are being
used). This allows to preserve filesystem contents across reboots of the virtual
machine.

.PP
Both \fIMODEL\-FILESYSTEM\fR and \fIFILESYSTEM\fR must not contain commas ('\fB,\fR')
in their names.

Options \fB\-f\fR and \fB\-\-filesystem\fR cannot be used in conjunction with
\fB\-W\fR or \fB\-\-no\-cow\fR.

\fBNotice\fR: it is not possible to combine a \fICOW file\fR with different
\fImodel file\fRs. Hence, virtual machines must always be started with the
combination of \fImodel\fR and \fICOW file\fR used upon their first startup.

.B
*** IMPORTANT NOTES ABOUT THE HOST MACHINE FILESYSTEM ***

In principle, there is no particular restriction on the choice of the filesystem
(of the host machine) on which \fIMODEL\-FILESYSTEM\fR and \fIFILESYSTEM\fR
are located. However, installing Netkit on a machine that uses a
non-standard Linux filesystem (e.g., FAT32) may introduce performance losses
and/or malfunctions. Please refer to the README file in the Netkit filesystem
package for more information about this.

.RE


.TP
.B
-W
.TP
.B
--no-cow
Instead of using two different files for storing filesystem data (as explained
above), write filesystem changes directly on the model filesystem.

\fINever start two virtual machines with the \fB\-W\fIq option\fR, or your
filesystem image may get corrupted!

This option cannot be used in conjunction with \fB\-f\fR, 
.nh
\fB\-\-filesystem\fR,
.hy
\fB\-D\fR, or
.nh
\fB\-\-hide\-disk\-file\fR.
.hy

\fBWarning\fR: by using this option, all the changes being made to the filesystem
of the virtual machine are made permanent. Do \fBnot\fR use this option unless
you know what you are doing!

.TP
.B
-D
.TP
.B
--hide-disk-file
By using this option, the ".disk" file of virtual machines is no longer created
(actually, it is deleted soon after it is created). This is useful if you do not
want to scatter temporary disk images around your filesystem. Using this option
does not compromise in any way the operation of virtual machines, except, of
course, that the contents of virtual machine filesystems are irremediably lost as
soon as the machines are stopped.

This option cannot be used in conjunction with \fB\-W\fR or
.nh
\fB\-\-no\-cow\fR.
.hy


.SS Console settings
.TP
.B
--con0=\fIMODE\fR
.TP
.B
--con1=\fIMODE\fR
Each virtual machine can have at most two console windows, which correspond to
the virtual terminals (ttys) of the real host. \fBcon0\fR is the primary console,
and \fBcon1\fR is an optional, secondary console. Depending on the value of
\fIMODE\fR, each console can be configured to be attached to different terminal
emulator programs or devices. \fIMODE\fR can be one of the following:

.RS
.PP
.TP
.B
xterm
Attach console to a terminal emulator application (the application must be
correctly installed).
.TP
.B
this
Attach console to stdin/stdout (i.e., use the current terminal); \fBthis\fR mode cannot
be used for both the primary and the secondary console at the same time.
.TP
.B
pty
Attach console to a pseudo-terminal. You can later reach it by connecting a
terminal emulator to the corresponding tty (for example, 'screen /dev/ttyp0').
.TP
.B
port:\fItcp\-port\fR
Attach console to TCP port \fItcp\-port\fR. This console can then be accessed
by telnetting to that port. The virtual machine will not be actually started
until the first connection is established. Notice that, if the connection is closed
while the virtual machine is still running, it won't be possible to access the console
by telnetting again to \fItcp\-port\fR. In such a case, the virtual machine
can still be halted by using one of the commands \fBvhalt\fR or \fBvcrash\fR.

.TP
.B
tmux
Start the VM within a tmux session (only valid for the primary console).

.TP
.B
none
Disable console (primary console cannot be disabled).

.LP
Default console settings (including the default terminal emulator application to
be used) are stored inside the \fInetkit.conf\fR configuration file (see
\fBnetkit.conf\fR(5)).

Using the \fB\-\-con0\fR=\fBthis\fR option also implies \fB\-\-foreground\fR.
.RE

.TP
.B
--xterm=\fITYPE\fR
Consoles enabled in \fBxterm\fR \fIMODE\fR can make use of different terminal
emulator applications. In particular, \fITYPE\fR can assume one of the following
values:

.RS
.PP
.TP
.B
gnome
use the Gnome Desktop gnome\-terminal.
.TP
.B
konsole
use the KDE Desktop Environment konsole.
.TP
.B
konsole-tab
same as \fBkonsole\fR, except different virtual machines are opened in different
tabs of the same konsole window.
.TP
.B
alacritty
use the lightweight Alacritty terminal.
.TP
.B
kitty
use the lightweight Kitty terminal.
.TP
.B
xterm
use the standard xterm.
.TP
.B
wsl
use Windows Conhost (only available on wsl hosts).
.TP
.B
wt
use Windows Terminal (only available on wsl hosts with Windows Terminal installed).

.LP
When attaching a console to a terminal emulator, make sure that the corresponding
application is properly installed.
.br
The default terminal emulator application to be used is configured inside the
\fInetkit.conf\fR file (see \fBnetkit.conf\fR(5)).

  
.SS Laboratory settings
The following options can be used when setting up virtual laboratories. In general,
it is unlikely that you need to directly use them. Instead, laboratories should
be set up by using the \fBlstart\fR command (see \fBlstart\fR(1)).

.TP
.B
-e \fICOMMAND\fR
.TP
.B
--exec=\fICOMMAND\fR
Run a specific command inside the virtual machine during the boot phase.
\fICOMMAND\fR should be the name of an executable command or script.

.TP
.B
-l \fIDIRECTORY\fR
.TP
.B
--hostlab=\fIDIRECTORY\fR
Tell the virtual machine that the base directory for the laboratory is \fIDIRECTORY\fR.
\fIDIRECTORY\fR is a directory on the host machine which contains information
about the configuration of the laboratory.


.PP
\fBNotice\fR: options \fB\-l\fR and
.nh
\fB\-\-hostlab\fR
.hy
make the host filesystem accessible inside the virtual machine even
if the option \fB\-H\fR or
.nh
\fB\-\-no\-hosthome\fR
.hy
is being used. In particular, \fIDIRECTORY\fR is made available for reading/writing
under the '/hostlab' directory in the virtual machine (depending on the option
being used).

.SS Other options
.TP
.B
--append=\fIPARAMETER\fR
Append additional kernel command line parameters when running the virtual machine
kernel. \fIPARAMETER\fR can be the name of a kernel option (e.g., "quiet") or
a pair \fIPARAMETER\fR=\fIVALUE\fR. Documentation about supported parameters can
be found inside the kernel source tree (which you can download at http://www.kernel.org).

This option can be used multiple times, so that several parameters can be appended.
Parameters will be passed to the kernel in the same order in which they are
provided.

.TP
.B
-F
.TP
.B
--foreground
By default, virtual machines are started in background. By using this option,
\fIvstart\fR waits for the virtual machine to halt (or crash) before giving
the command line prompt back. Virtual machines are also started in foreground
when using the \fB\-\-con0\fR=\fBthis\fR or \fB\-\-con1\fR=\fBthis\fR option.

Regardless of this option, virtual hubs are always started in background.

.TP
.PD 0
.TP
.B
\-\-tmux\-attached
Run each VM in a tmux session and start a terminal attached to this tmux session. This is the same as setting VM_CON0=tmux and TMUX_OPEN_TERMS=yes in netkit.conf

.TP
.PD 0
.TP
.B
\-\-tmux\-detached
Run each VM in a tmux session without opening any terminals. This is the same as setting VM_CON0=tmux and TMUX_OPEN_TERMS=no in netkit.conf

.TP
.B
-h
.TP
.B
--help
Show usage information. This option also prints out the default values for
several settings (i.e., those that have been configured inside \fInetkit.conf\fR
\(em see \fBnetkit.conf\fR(5)).

.TP
\fB\-n\fR, \fB\-\-dry\-run\fR, \fB\-\-just\-print\fR, \fB\-\-recon\fR
Instead of actually starting the virtual machine, just show which commands would
be executed, including those used to start virtual hubs.

.TP
.B
--show-boot-log
Do not hide the boot log with 'quiet' when the kernel is booting. This option
is useful for finding errors in the boot sequence without having to use
--debug.

.TP
.B
--debug
Run the virtual machine under a gdb instance to report more messages than with
--show-boot-log, and for further debugging. The process requires a SIGINT
delivery with kill -INT <pid> to start debugging (if the session booted
successfully).

.TP
.B
-v
.TP
.B
--verbose
Show machine details and commands ran.

.TP
.B
--version
Print information about the installed Netkit release and the host kernel version
and exit. If "\fI<unavailable>\fR" is printed instead of a version number,
then the corresponding information could not be retrieved (for example because
a non-standard Netkit kernel or filesystem is being used).


\" ########################################

.SH "ENVIRONMENT VARIABLES"
All Netkit commands require that the \fBNETKIT_HOME\fR variable contains
the name of the directory Netkit is installed in.

\" ########################################

.SH FILES
.TP
.I
MACHINE-NAME.disk
This is the default \fICOW\fR filesystem used by virtual machines. This file
is automatically created in the current directory as soon as virtual machine
\fIMACHINE\-NAME\fR is started, if it does not exist yet. It stores all the
differences between the model filesystem and the current filesystem contents.
.TP
.I
$NETKIT_HOME/netkit.conf
.TP
.I
/etc/netkit.conf
.TP
.I
~/.netkit/netkit.conf
These files store global defaults for newly started virtual machines. They are
considered in the order in which they are listed, so that users can override
system wide settings. For more information about the contents of this file, see
\fBnetkit.conf\fR(5).
.TP
.I
~/.netkit/hubs/
This directory stores temporary socket files that are needed for the virtual hubs
to work properly. These files are automatically removed when unused. A different
directory may also be configured inside the \fInetkit.conf\fR file (see
\fBnetkit.conf\fR(5)).
.TP
.I
~/.netkit/mconsole/
This directory stores temporary socket files that are used to send special
directives to the virtual machines (e.g., halting commands). These files are
automatically removed when the corresponding virtual machine is halted or
crashed. A different directory may also be configured inside the \fInetkit.conf\fR
file (see \fBnetkit.conf\fR(5)).


\" ########################################

.SH EXAMPLES
.TP
.B
.nf
vstart pc1
.fi
Start a new virtual machine named \fBpc1\fR. The 'pc1.disk' file is
also created in the current directory.

.TP
.B
.nf
vstart mypc1 -k /home/foo/kernel/uml\-kernel -M 128 -m /home/foo/filesystems/model\-fs
.fi
Start a new virtual machine named \fBmypc1\fR. The machine will run using kernel
.nh
'\fB/home/foo/kernel/uml\-kernel\fR',
.hy
will be equipped with \fB128\fR MB of RAM and its
filesystem contents upon first boot will be those of the model file
.nh
'\fB/home/foo/filesystems/model\-fs\fR'.
.hy

.TP
.B
.nf
vstart producer --eth0=A
.fi
.TP
.B
.nf
vstart consumer --eth0=A
.fi
Start two virtual machines named \fBproducer\fR and \fBconsumer\fR, which will
be able to exchange data with each other by using their network interfaces \fBeth0\fR.
Such interfaces will have to be configured with an IP address before the
communication can actually take place.

.TP
.B
.nf
vstart router --eth0=tap-domain,10.0.0.1,10.0.0.2 --eth1=A
.fi
Start a new virtual machine named \fBrouter\fR. The machine will have two network
interfaces. Interface \fBeth0\fR will be automatically configured to have IP address
\fB10.0.0.2\fR when the virtual machine is started. It will be connected to the real
network, and will have host side IP address \fB10.0.0.1\fR. Interface \fBeth1\fR will be
attached to the virtual collision domain (i.e., hub) named \fBA\fR and will have
to be configured by hand inside the virtual machine (for example, by using
\fBifconfig\fR).

.TP
.B
.nf
vstart test --eth0=A --eth1=B -f /home/foo/myFilesystem -p
.fi
Instead of actually starting a virtual machine, show which commands would be
executed for running one named \fBtest\fR, with two network interfaces attached
to collision domains \fBA\fR and \fBB\fR and using filesystem
.nh
'\fB/home/foo/myFilesystem\fR'.
.hy

.TP
.B
.nf
vstart conTest --con0=xterm --con1=xterm --xterm=konsole-tab
.fi
Start a virtual machine named \fBconTest\fR having two consoles. They will be
shown inside different tabs of the terminal emulator konsole.


\" ########################################

.SH "SEE ALSO"
\fIlstart\fR(1),
\fInetkit.conf\fR(5),
\fIvclean\fR(1),
\fIvconf\fR(1),
\fIvcrash\fR(1),
\fIvhalt\fR(1),
\fIvlist\fR(1),
Netkit filesystem README.


\" ########################################

.SH AUTHOR
\fIvstart\fR script: Massimo Rimondini
.br
This man page: Massimo Rimondini, Fabio Ricci


\" ########################################

.so include/bugreport.man
