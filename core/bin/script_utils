#!/bin/false
# shellcheck shell=bash

#     Copyright 2020-2022 Billy Bromell, Adam Bromiley, Joseph Bunce, Joshua
#     Hawking - Warwick Manufacturing Group, University of Warwick.
#     Copyright 2002-2009 Maurizio Patrignani, Maurizio Pizzonia, Fabio Ricci,
#     Massimo Rimondini - Computer Networks Research Group, Roma Tre
#     University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This script contains support definitions, functions and other shell stuff for
# use within the other Netkit scripts. It is not intended for standalone usage.
# NOTE: it is assumed that the NETKIT_HOME environment variable is set. This
# should be enforced by the calling script(s).


# Guard to prevent sourcing the script multiple times
[ -n "$SCRIPT_UTILS_SRC" ] && return
SCRIPT_UTILS_SRC=1


###############################################################################
# Output a centred string.
# Usage:
#   print_divider [MESSAGE [CHAR [WIDTH]]]
# Arguments:
#   $1 - message to centre. An empty string will output a line of just the
#        padding character.
#   $2 - character to use as the padding. By default, this is a '='
#   $3 - maximum width to pad out to - any message longer will be printed
#        without padding. By default, this is 79 columns.
###############################################################################
print_divider() {
   local msg=$1
   local pad_chr=${2:-"="}
   local max_cols=${3:-"79"}

   local cols
   local l_pad_len r_pad_len pad_str

   # Get terminal width, capping at max_cols
   cols=$(tput cols)
   [ "$cols" -gt "$max_cols" ] && cols=$max_cols

   # Output message if padding is not necessary
   if [ "${#msg}" -ge "$(( cols - 2 ))" ]; then
      echo "$msg"
      return
   fi

   # Pad with a space (empty strings are not padded, so a constant divider can
   # be made).
   [ -n "$msg" ] && msg=" $msg "

   # Get lengths of left and right padding, respectively
   l_pad_len=$(( (cols + 1 - ${#msg}) / 2 ))
   r_pad_len=$(( (cols - ${#msg}) / 2 ))

   # This will be trimmed by the L/R padding lengths
   pad_str=$(printf "%0.s$pad_chr" $(seq 1 "$l_pad_len"))

   printf "%0.*s%s%0.*s\n" "$l_pad_len" "$pad_str" "$msg" "$r_pad_len" "$pad_str"
}


###############################################################################
# Check if an array contains a string.
# Usage:
#   array_contains QUERY ARRAY
# Arguments:
#   $1 - string to search for
#   $2 - word-expanded array to search
# Returns:
#   0 if array contains query, non-zero if not
# Example:
#   array_contains "a" "${foobar[@]}" && echo "Found!"
###############################################################################
array_contains() {
   local query=$1
   local array=( "${@:2}" )

   local item

   for item in "${array[@]}"; do
      [ "$query" = "$item" ] && return 0
   done

   return 1
}


###############################################################################
# Write the "try --help" message to standard error.
# Usage:
#   try_help
###############################################################################
try_help() {
   echo 1>&2 "Try '$SCRIPTNAME --help' for more information."
}


###############################################################################
# Write the standard --help command-line option usage to standard output.
# Usage:
#   help_option
###############################################################################
help_option() {
   echo "      --help          display this help and exit"
}


###############################################################################
# Write the standard --version command-line option usage to standard output.
# Usage:
#   version_option
###############################################################################
version_option() {
   echo "      --version       output version information and exit"
}


###############################################################################
# Write the Netkit-JH core, filesystem, and kernel versions, and host kernel
# release version to standard output.
# Usage:
#   show_version
###############################################################################
show_version() {
   local nk_version
   local kernel kernel_version
   local fs_version_long fs_version

   # Netkit version information
   echo -n "Netkit version:            "

   nk_version=$(grep -- "Netkit version" "$NETKIT_HOME/netkit-version" 2> /dev/null)
   nk_version=${nk_version##"Netkit version "}
   printf "%s\n" "${nk_version:-"<unknown>"}"

   # Netkit kernel version information
   echo -n "Netkit kernel version:     "

   # By default, the compiled kernel is a symbolic link
   kernel=$(basename -- "$(readlink --canonicalize-missing -- "$VM_KERNEL")")
   kernel_version=${kernel##"netkit-kernel-"}

   if [ "$kernel_version" = "$kernel" ]; then
      echo "<unknown>"
   else
      printf "%s\n" "$kernel_version"
   fi

   # Netkit filesystem version information
   echo -n "Netkit filesystem version: "
   fs_version_long=$(cat -- "$NETKIT_HOME/fs/netkit-filesystem-version" 2> /dev/null)
   fs_version=${fs_version_long##"Netkit-JH filesystem version "}
   printf "%s\n" "${fs_version:-"<unknown>"}"

   # Host kernel version information
   echo -n "Host kernel version:       "
   uname --kernel-release
}


###############################################################################
# Write commands to the Netkit-JH log file.
# Usage:
#   log_write ...
# Arguments:
#  ... Log message
# Returns:
#   echo returns 0 on success, non-zero on failure (if file is not writable or
#   cannot be created).
###############################################################################
log_write() {
   [ -n "$LOGFILENAME" ] && echo "$(date --iso-8601=seconds) $USER_ID $*" >> "$LOGFILENAME"
}


###############################################################################
# Test if a file is being used by a process.
# Usage:
#   file_in_use FILE
# Arguments:
#   $1 - file to test
# Returns:
#   Returns 0 if the file is in use by a process, non-zero if not or on failure
#   (e.g., if file does not exist).
###############################################################################
file_in_use() {
   local file=$1
   lsof -f -- "$file" > /dev/null 2>&1
}


###############################################################################
# Validate a list of hostnames against the hostname_regex pattern.
# Usage:
#   validate_hostnames [HOSTNAME]...
# Arguments:
#  ... - list of hostnames to validate
# Returns:
#   None. Exits with a non-zero code on an invalid hostname.
###############################################################################
validate_hostnames() {
   local hostnames=( "$@" )

   local hostname

   for hostname in "${hostnames[@]}"; do
      if [[ ! "$hostname" =~ ^$hostname_regex$ ]] || array_contains "$hostname" "${invalid_hostnames[@]}"; then
         warn "$hostname: Invalid hostname"
         exit 1
      fi
   done
}


###############################################################################
# Echo a message to standard error in the format "$SCRIPTNAME: $MESSAGE".
# Usage:
#   warn MESSAGE
# Arguments:
#   $1 - message
###############################################################################
warn() {
   local message=$1
   echo 1>&2 "$SCRIPTNAME: $message"
}


###############################################################################
# Check for invalid substrings in netkit.conf variable values.
# Usage:
#   validate_netkit_conf_variables
# Returns:
#   None. Function exits with non-zero code on failure.
###############################################################################
validate_netkit_conf_variables() {
   validate_variable "$HUB_SOCKET_DIR"       "HUB_SOCKET_DIR"       " " ","
   validate_variable "$HUB_SOCKET_PREFIX"    "HUB_SOCKET_PREFIX"    " " "," "/"
   validate_variable "$HUB_SOCKET_EXTENSION" "HUB_SOCKET_EXTENSION" " " "," "/"
   validate_variable "$VM_MODEL_FS"          "VM_MODEL_FS"          " " "," ":"
}


###############################################################################
# Check for invalid substrings in a variable and exit with an error.
# Usage:
#   validate_variable VALUE VARIABLE [QUERY]...
# Arguments:
#   $1 - value of variable
#   $2 - name of variable
#  ... - list of invalid substrings to search for
# Returns:
#   None. Function exits with non-zero code on failure.
###############################################################################
validate_variable() {
   local value=$1
   local variable=$2
   local queries=( "${@:3}" )

   if str_contains "$value" "${queries[@]}"; then
      warn "$variable: Invalid character in configuration parameter"
      exit 1
   fi
}


###############################################################################
# Check if a string contains sub-strings.
# Usage:
#   str_contains STR [QUERY]...
# Arguments:
#   $1 - string to search
#  ... - string(s) to search for
# Returns:
#   0 if string contains at least one query, non-zero if not
###############################################################################
str_contains() {
   local str=$1
   local queries=( "${@:2}" )

   local query

   for query in "${queries[@]}"; do
      [[ "$str" == *"$query"* ]] && return 0
   done

   return 1
}


###############################################################################
# Create a directory with 777 permissions. If a file with the same path already
# exists, an error is thrown.
# Usage:
#   netkit_dir_check DIR
# Arguments:
#   $1 - directory filepath
# Returns:
#   None. Function exits with non-zero code on failure.
###############################################################################
netkit_dir_check() {
   local dir=$1
   mkdir --parents -- "$dir" || exit 1
   chmod -- 777 "$dir"
}


# Override all locale settings to avoid localisation errors
export LC_ALL=C


# Ensure NETKIT_HOME is set
if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "The NETKIT_HOME environment variable is not set"
   exit 1
fi


# Set the script's name
SCRIPTNAME=$(basename -- "$0")


# Read default Netkit configuration
if [ -f "$NETKIT_HOME/netkit.conf.default" ]; then
   # shellcheck source=../netkit.conf.default
   . -- "$NETKIT_HOME/netkit.conf.default"
else
   warn "netkit.conf.default: file not found"
   exit 1
fi


# Read user-defined Netkit configuration override in order of file localisation
# (per system, per install, per user).
# shellcheck disable=SC1091
[ -f /etc/netkit.conf ] && . "/etc/netkit.conf"
# shellcheck source=../netkit.conf
[ -f "$NETKIT_HOME/netkit.conf" ] && . -- "$NETKIT_HOME/netkit.conf"
# shellcheck disable=SC1091
[ -f "$HOME/.netkit/netkit.conf" ] && . -- "$HOME/.netkit/netkit.conf"


# Check for invalid values in netkit.conf variables
validate_netkit_conf_variables


# Regular expression for a Debian-approved (and RFC-compliant) hostname
# label. This expression can be substituted directly into most Linux utility
# commands, such as egrep (grep -E).
#
# Debian standard for hostname 'labels' (hostname(7) man page):
#   - May consist of A-Z, a-z, 0-9, and - (hyphen)
#   - Cannot start or end with a - (hyphen)
#   - Are case-insensitive
#   - Can be 1 to 63 characters long
# NOTE: must not allow the following characters:
#         []          - for lab.conf parsing
#         ,           - for LAB_MACHINES parsing
#         ,:[:blank:] - for the ubd argument (.disk file is named after host)
hostname_regex="([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,62}[a-zA-Z0-9])"

# Invalid hostnames (tested irrespective of hostname_regex)
invalid_hostnames=( "shared" "_test" )


# Set the global USER_ID variable
USER_ID=$(id --name --user)


# Ensure critical directories exist
netkit_dir_check "$HOME/.netkit"
netkit_dir_check "$HUB_SOCKET_DIR"
netkit_dir_check "$MCONSOLE_DIR"
