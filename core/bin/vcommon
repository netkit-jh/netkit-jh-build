#!/bin/false
# shellcheck shell=bash

#     Copyright 2022 Adam Bromiley - Warwick Manufacturing Group, University of
#     Warwick.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is a support script for the Netkit vcommands. It is not intended for
# standalone usage.


# Guard to prevent sourcing the script multiple times
[ -n "$VCOMMON_SRC" ] && return
VCOMMON_SRC=1


# shellcheck source=./script_utils
. -- "$NETKIT_HOME/bin/script_utils"


###############################################################################
# Validate a list of collision domain names against the
# collision_domain_name_regex pattern.
# Usage:
#   validate_collision_domain_names [DOMAIN]...
# Globals:
#   r- collision_domain_name_regex
# Arguments:
#  ... - list of collision domain names to validate
# Returns:
#   0 if all valid, non-zero on an invalid hostname
# Example:
#   None
###############################################################################
validate_collision_domain_names() {
   local collision_domain_names=( "$@" )

   local collision_domain_name

   for collision_domain_name in "${collision_domain_names[@]}"; do
      [[ ! "$collision_domain_name" =~ ^$collision_domain_name_regex$ ]] && return 1
   done

   return 0
}


###############################################################################
# Write the socket filepath assigned to a user and collision domain to standard
# output. The SHA-256 digest of the user's name is used to prevent issues with
# invalid characters in the username.
# Usage:
#   get_hub_socket TAP DOMAIN
# Globals:
#   r- HUB_SOCKET_DIR
#   r- HUB_SOCKET_EXTENSION
#   r- HUB_SOCKET_PREFIX
#   r- USER_ID
# Arguments:
#   $1 - set to 1 for a tap socket, otherwise pass an empty string
#   $2 - name of collision domain
# Returns:
#   None
# Example:
#   None
###############################################################################
get_hub_socket() {
   local tap=$1
   local domain=$2

   local user_sha256 domain_sha256 sock_path_components

   user_sha256=$(printf "%s" "$USER_ID" | sha256sum | awk '{ print $1 }')
   domain_sha256=$(printf "%s" "$domain" | sha256sum | awk '{ print $1 }')

   # We truncate the SHA-256 digests to avoid hitting the maximum filename
   # length.
   sock_path_components=(
      "$HUB_SOCKET_DIR/"
      "${HUB_SOCKET_PREFIX}_"
      "${user_sha256:0:8}_"
      "${tap:+"tap_"}"
      "${domain_sha256:0:8}_"
      "$domain"
      "$HUB_SOCKET_EXTENSION"
   )

   printf "%s" "${sock_path_components[@]}" $'\n'
}


###############################################################################
# Validate interface specifications and generate hub_list
# Usage:
#   create_hub_list [INTERFACE]...
# Globals:
#   -w hub_list
#   r- HUB_SOCKET_DIR
#   r- HUB_SOCKET_EXTENSION
#   r- HUB_SOCKET_PREFIX
#   r- SCRIPTNAME
#   r- USER_ID
# Arguments:
#  ... - array of interface specifications (ethN=DOMAIN)
# Returns:
#   None. Will exit with usage 1 on invalid specification.
# Example:
#   None
###############################################################################
create_hub_list() {
   local interface_specifications=( "$@" )

   local interface_specification
   local hub_specification hub_name tap_addr guest_addr
   local interface used_interfaces

   unset hub_list

   for interface_specification in "${interface_specifications[@]}"; do
      interface=${interface_specification%%=*}
      hub_specification=${interface_specification#*=}

      # Check if interface has already been configured
      if array_contains "$interface" "${used_interfaces[@]}"; then
         warn "$interface: Duplicate interface"
         usage 1
      fi

      # Remember that this network interface has been configured
      used_interfaces+=( "$interface" )

      # Check if tap interface (regular hubs cannot be named with commas)
      if [[ "$hub_specification" == *,* ]]; then
         # Format: hub_name,tap_addr,guest_addr
         IFS=, read -r hub_name tap_addr guest_addr <<< "$hub_specification"

         if ! is_inet_addr "$tap_addr"; then
            warn "$tap_addr: Invalid tap address"
            usage 1
         fi

         if ! is_inet_addr "$guest_addr"; then
            warn "$guest_addr: Invalid guest address"
            usage 1
         fi
      else
         # This is a normal interface
         unset tap_addr guest_addr
         hub_name=$hub_specification
      fi

      # Check for invalid characters in hub_name
      if ! validate_collision_domain_names "$hub_name"; then
         warn "$hub_name: Invalid collision domain name"
         usage 1
      fi

      if [ -n "$tap_addr" ]; then
         if [ -e "$(get_hub_socket "" "$hub_name")" ]; then
            warn "$hub_name: Regular (not tap) hub socket under the same collision domain already exists"
            usage 1
         fi

         hub_list+=( "$hub_name,$tap_addr" )
      else
         if [ -e "$(get_hub_socket "1" "$hub_name")" ]; then
            warn "$hub_name: Tap hub socket under the same collision domain already exists"
            usage 1
         fi

         hub_list+=( "$hub_name" )
      fi
   done
}


###############################################################################
# Get a rough list of all of the process IDs of a machine by its name and,
# optionally, owner. The list might have false-positives in the unlikely
# scenario that the umid has whitespace in.
# Usage:
#   pgrep_vhost USER MACHINE
# Globals:
#   None
# Arguments:
#   $1 - owner of the machine; pass an empty string for all users
#   $2 - machine name
# Returns:
#   Prints a newline separated list of PIDs related to MACHINE to stdout
# Example:
#   for pid in $(pgrep_vhost "" "foobar"); do echo $pid; done
###############################################################################
pgrep_vhost() {
   local target_user=$1
   local vhost=$2

   # Quick regex filter for pgrep. It is not 100% accurate, returning multiple
   # instances if there is a machine called "foo" and "foo bar". Further
   # processing is therefore required - this filter just removes processes
   # which definitely are not matches to save processing the cmdline of every
   # single UML instance.
   local kernel_cmd_regex="^${VM_KERNEL}[[:blank:]].*[[:blank:]]umid=$vhost(\$|[[:blank:]])"
   pgrep ${target_user:+"--euid=$target_user"} --full "$kernel_cmd_regex"
}


###############################################################################
# Get a list of all of the process IDs of a machine by its name and,
# optionally, owner.
# Usage:
#   get_vhost_all_pids_by_name USER MACHINE
# Globals:
#   r- NETKIT_HOME
# Arguments:
#   $1 - owner of the machine; pass an empty string for all users
#   $2 - machine name
# Returns:
#   Prints an IFS separated list of PIDs related to MACHINE to stdout. Returns
#   0 if the machine exists, non-zero otherwise.
# Example:
#   for pid in $(get_vhost_all_pids_by_name "" "foobar"); do echo $pid; done
###############################################################################
get_vhost_all_pids_by_name() {
   local target_user=$1
   local vhost=$2

   local pid kernel_cmd
   local arg umid pids

   # Iterate over the PIDs of running Netkit instances with name matches.
   for pid in $(pgrep_vhost "$target_user" "$vhost"); do
      # Full command used to invoke the process
      mapfile -d "" -t kernel_cmd < "/proc/$pid/cmdline"

      for arg in "${kernel_cmd[@]:1}"; do
         if [[ "$arg" =~ ^umid=.*$ ]]; then
            umid=${arg#*=}
            [ "$umid" = "$vhost" ] && pids+=( "$pid" )
            break
         fi
      done
   done

   echo "${pids[*]}"

   [ "${#pids[@]}" -gt 0 ] && return 0 || return 1
}


###############################################################################
# Get the process ID of a machine by its name and, optionally, owner.
# Usage:
#   get_vhost_pid_by_name USER MACHINE
# Globals:
#   r- NETKIT_HOME
# Arguments:
#   $1 - owner of the machine; pass an empty string for all users
#   $2 - machine name
# Returns:
#   Prints the PID to stdout. Returns 0 on success, non-zero on failure.
# Example:
#   None
###############################################################################
get_vhost_pid_by_name() {
   local target_user=$1
   local vhost=$2

   local pid pgid kernel_cmd
   local arg umid

   # The process hierarchy looks like this:
   #
   #    PID  PGID  Process
   #     ?    ?     vstart
   #                    \
   #     x    x           - netkit-kernel
   #                           |
   #     a    x                +--- netkit-kernel
   #     b    x                +--- netkit-kernel
   #     c    x                +--- netkit-kernel
   #     ...  ...              +--- ...
   #
   #    (PID = process ID, PGID = process group ID)
   #
   # The main (parent) netkit-kernel process is the group leader of the
   # netkit-kernel child processes, because its PID == PGID.
   # The children are all part of this group.
   #
   # We only care about the parent kernel process, so we skip over PIDs that
   # are not group leaders.

   # Iterate over the PIDs of running Netkit instances with name matches.
   for pid in $(pgrep_vhost "$target_user" "$vhost"); do
      # Get the process group ID (PGID)
      pgid=$(ps --no-headers --format pgid --pid "$pid")

      # Ignore if no return or not a process leader
      [ -z "$pgid" ] || [ "$pgid" -ne "$pid" ] && continue

      # Full command used to invoke the process
      mapfile -d "" -t kernel_cmd < "/proc/$pid/cmdline"

      for arg in "${kernel_cmd[@]:1}"; do
         if [[ "$arg" =~ ^umid=.*$ ]]; then
            umid=${arg#*=}

            if [ "$umid" = "$vhost" ]; then
               echo "$pid"
               return 0
            fi

            break
         fi
      done
   done

   return 1
}


###############################################################################
# Fill the vhost_info and vhost_sockets global arrays with information about a
# running virtual machine.
# Usage:
#   get_vhost_info_by_pid PID
# Globals:
#   r- MCONSOLE_DIR
#   rw vhost_info
#   rw vhost_sockets
# Arguments:
#   $1 - process ID of the machine
# Returns:
#   None
# Example:
#   None
###############################################################################
get_vhost_info_by_pid() {
   local pid=$1

   local kernel_cmd
   local arg opt value
   local interface_id
   local vhost_info_other

   # Unset the globals
   unset vhost_info
   unset vhost_sockets

   declare -A -g vhost_info

   vhost_info[pid]=$pid

   # Effective user ID of the process (full username if not too long)
   vhost_info[owner]=$(ps --no-headers --format euser --pid "$pid")

   # Total virtual memory usage of the process.
   # Logically this should be the sum of every process in the group (PGID),
   # however in practice just taking the value of the parent process is enough.
   # The value should equate to roughly the size of the machine's memory.
   vhost_info[memory_usage]=$(ps --no-headers --format vsize --pid "$pid")

   # Full command used to invoke the process.
   # Why not parse the output of ps? Whitespace in the program name or
   # arguments is impossible to deal with. /proc/$pid/cmdline stores argv with
   # null-byte field separators, which is the only character that cannot be
   # present in a Linux filepath.
   # vhost_info[kernel_cmd] will store a quoted and escaped command string
   # suitable for reuse as a shell command.
   mapfile -d "" -t kernel_cmd < "/proc/$pid/cmdline"
   vhost_info[kernel_cmd]=${kernel_cmd[*]@Q}

   vhost_info[kernel]=${kernel_cmd[0]}

   for arg in "${kernel_cmd[@]:1}"; do
      # UML options are key=value pairs. ${arg#*=} removes the key= prefix from
      # arg (the single # permits usage of further equals signs in the
      # argument).
      opt=${arg%%=*}
      value=${arg#*=}

      # Edge-cases that can only be matched with regular expressions (or with
      # extglob enabled, which cannot be done.)
      if [[ "$opt" =~ ^eth([0-9]|[1-9][0-9]+)$ ]]; then
         # Interface number
         interface_id=${opt#eth}

         # Array of UML socket filepaths indexed by the interface number.
         # NOTE: we assume transport mode is 'daemon'
         # shellcheck disable=SC2034
         vhost_sockets[$interface_id]=${value#daemon,,,}
         continue
      fi

      # Most of the command-line options can be matched with basic pattern
      # matching.
      # NOTE: some non-UML parameters will be enclosed in escaped double quotes
      # to allow for whitespace in them.
      case $opt in
         con0|con1)
            # NOTE: tmux sessions are identified later in the command line with
            # a dummy option.
            case $value in
               xterm)      vhost_info[$opt]=$value;;
               fd:0,fd:1)  vhost_info[$opt]="this";;
               pty)        vhost_info[$opt]=$value;;
               port:*)     vhost_info[$opt]=$value;;
               null)       vhost_info[$opt]="none";;
            esac
            ;;
         \"exec)       vhost_info[boot_cmd]=${value%\"};;
         \"hosthome)   vhost_info[hosthome]=${value%\"};;
         \"hostlab)    vhost_info[hostlab]=${value%\"};;
         # Memory is NOT adjusted by the skew here
         mem)        vhost_info[mem]=$value;;
         \"modules)    vhost_info[modules]=${value%\"};;
         tmux)       vhost_info[con0]="tmux";;
         \"ubd0)
            # The ubd0 value is disk,fs or fs
            vhost_info[disk]=${value%%,*}
            vhost_info[fs]=${value#*,}

            # The parameter expansions result in equal values if a single,
            # shared filesystem is used.
            [ "${vhost_info[disk]}" = "${vhost_info[fs]}" ] && unset "vhost_info[disk]"

            vhost_info[fs]=${vhost_info[fs]%\"}
            ;;
         umid)       vhost_info[umid]=$value;;
         *)          vhost_info_other+=( "$arg" )
      esac
   done

   vhost_info[other]=${vhost_info_other[*]}

   # The UML console socket filepath
   vhost_info[mconsole]="$MCONSOLE_DIR/${vhost_info[umid]}/mconsole"
}


###############################################################################
# Fill the vhost_info and vhost_sockets global arrays with information about a
# running virtual machine by machine name and, optionally, user.
# Usage:
#   get_vhost_info_by_name USER VM
# Globals:
#   rw vhost_info
#   rw vhost_sockets
# Arguments:
#   $1 - owner of the machine; pass an empty string for all users
#   $2 - machine name
# Returns:
#   0 on success, non-zero on failure
# Example:
#   None
###############################################################################
get_vhost_info_by_name() {
   local target_user=$1
   local vhost=$2

   local pid
   pid=$(get_vhost_pid_by_name "$target_user" "$vhost") || return 1
   get_vhost_info_by_pid "$pid"
   return 0
}


###############################################################################
# Check if machine, by name, is online.
# Usage:
#   get_machine_state USER MACHINE
# Globals:
#   r- NETKIT_HOME
# Arguments:
#   $1 - owner of the machine; pass an empty string for all users
#   $2 - machine name
# Returns:
#   Returns 0 if online, non-zero if not.
# Example:
#   None
###############################################################################
get_machine_state() {
   local target_user=$1
   local vhost=$2
   get_vhost_pid_by_name "$target_user" "$vhost" > /dev/null
}


###############################################################################
# Check if string is a valid IPv4 dotted-quad address.
# Usage:
#   is_inet_addr ADDR
# Globals:
#   r- inet_regex
# Arguments:
#   $1 - IPv4 address string
# Returns:
#   Returns 0 on success, non-zero if an invalid address.
# Example:
#   None
###############################################################################
is_inet_addr() {
   local addr=$1
   [[ "$addr" =~ ^$inet_regex$ ]] && return 0 || return 1
}


###############################################################################
# Write the tap interface name assigned to a user to standard output.
# Usage:
#   get_tap_interface USER DOMAIN
# Globals:
#   None
# Arguments:
#   $1 - owner of the network interface
#   $2 - collision domain name
# Returns:
#   None
# Example:
#   None
###############################################################################
get_tap_interface() {
   local target_user=$1
   local domain=$2

   local user_sha256 domain_sha256 interface_sha256

   # We name Netkit tap devices after the user who owns them. Linux network
   # interface names are case-sensitive and:
   #   - Must not be empty
   #   - Must be less than 16 characters
   #   - Must not contain '/' or whitespace
   # Usernames in Linux have different requirements. There's a possibility, for
   # example, where two usernames with a common prefix create Netkit tap
   # devices. If the prefix is longer than 12 characters, their tap devices will
   # have the same name and be indistuinguishable; for example, users
   # 'foobarbaz_steve' and 'foobarbaz_brian' both create the tap device named
   # 'nk_foobarbarbaz'. Using the SHA-256 digest of the target user and
   # truncating to 12 chracters will be sufficient for ensuring uniqueness on a
   # system with many users.
   # Appending the domain name's SHA-512 digest allows for a unique interface
   # per (user, domain) tuple.
   user_sha256=$(printf "%s" "$target_user" | sha256sum | awk '{ print $1 }')
   domain_sha256=$(printf "%s" "$domain" | sha256sum | awk '{ print $1 }')

   interface_sha256=$(
      printf "%s" "$user_sha256$domain_sha256" |
      sha256sum |
      awk '{ print $1 }'
   )

   echo "nk_${interface_sha256:0:12}"
}


###############################################################################
# Wait for uml_switch to start by polling the existence of its socket file
# Usage:
#   wait_for_socket SOCKET
# Globals:
#   None
# Arguments:
#   $1 - socket file
# Returns:
#   None
# Example:
#   None
###############################################################################
wait_for_socket() {
   local socket=$1
   while [ ! -S "$socket" ]; do
      sleep 0.1
   done
}


###############################################################################
# Start uml_switch to manage a collision domain socket
# Usage:
#   invoke_manage_tuntap VERBOSE JUST_PRINT DOMAIN ADDR
# Globals:
#   None
# Arguments:
#   $1 - set to 1 for verbose, otherwise pass an empty string
#   $2 - set to 1 if only doing a dry run, otherwise pass an empty string
#   $3 - collision domain name
#   $4 - address of the tap interface on the host
# Returns:
#   None
# Example:
#   None
###############################################################################
invoke_manage_tuntap() {
   local verbose=$1
   local just_print=$2
   local domain=$3
   local tap_addr=$4

   # Socket does not exist yet or it is going unused
   manage_tuntap_cmd=(
      "$NETKIT_HOME/bin/manage_tuntap"
      "start"
      "$USER_ID"
      "$domain"
      "$tap_addr"
   )

   echo "********     (root privileges are required)      ********"

   if [ -n "$just_print" ]; then
      echo "Not running ==> ${manage_tuntap_cmd[*]}"
   else
      [ -n "$verbose" ] && echo "Running ==> ${manage_tuntap_cmd[*]}"

      if ! "${manage_tuntap_cmd[@]}"; then
         echo 1>&2 "Error while configuring the tunnel."
         exit 1
      fi
   fi

   echo "************** Abandoning root privileges ***************"
}


###############################################################################
# Start uml_switch to manage a collision domain socket
# Usage:
#   invoke_uml_switch VERBOSE JUST_PRINT SOCKET [DOMAIN]
# Globals:
#   None
# Arguments:
#   $1 - set to 1 for verbose, otherwise pass an empty string
#   $2 - set to 1 if only doing a dry run, otherwise pass an empty string
#   $3 - hub socket filepath
#   $4 - set to the collision domain name if to be used as a 'tap' switch
# Returns:
#   None
# Example:
#   None
###############################################################################
invoke_uml_switch() {
   local verbose=$1
   local just_print=$2
   local socket=$3
   local domain=$4

   local interface

   local uml_switch_cmd printed_uml_switch_cmd line_buffered_uml_switch_cmd
   local hub_log_cmd

   uml_switch_cmd=( "$NETKIT_HOME/bin/uml_switch" "-hub" "-unix" "$socket" )

   if [ -n "$domain" ]; then
      interface=$(get_tap_interface "$USER_ID" "$domain")
      uml_switch_cmd+=( "-tap" "$interface" )
   fi
   
   printed_uml_switch_cmd="${uml_switch_cmd[*]} < /dev/null &"

   # We need to disable buffering on standard output, otherwise the hub log
   # may miss vital log messages when uml_switch is killed.
   line_buffered_uml_switch_cmd=(
      "stdbuf" "--output=0" "--"
      "${uml_switch_cmd[@]}"
   )

   # shellcheck disable=SC2016
   hub_log_cmd=(
      "stdbuf" "--output=0" "--"
      "awk"
         "--assign" "HUB=$socket"
         "--assign" "USER=$USER_ID"
         "--assign" "TIME=$(date --iso-8601=seconds)"
         '{printf "%s %15s %25s %s\n", TIME, USER, HUB, $0}'
   )

   if [ -n "$just_print" ]; then
      echo "Not running ==> $printed_uml_switch_cmd"
   else
      [ -n "$verbose" ] && echo "Running ==> $printed_uml_switch_cmd"

      "${line_buffered_uml_switch_cmd[@]}" < /dev/null 2>&1 |
         "${hub_log_cmd[@]}" >> "$HUB_LOG" &
   fi

   # Wait for uml_switch to start
   [ -z "$just_print" ] && wait_for_socket "$socket"
}


###############################################################################
# Create a special 'tap' hub that can connect a guest to an interface on the
# host. NAT rules are created to allow access to the Internet through the host
# interface.
# Usage:
#   start_inet_hub VERBOSE JUST_PRINT HUB DOMAIN ADDR
# Globals:
#   r- HUB_LOG
#   r- NETKIT_HOME
#   r- USER_ID
# Arguments:
#   $1 - set to 1 for verbose, otherwise pass an empty string
#   $2 - set to 1 if only doing a dry run, otherwise pass an empty string
#   $3 - hub socket filepath
#   $4 - collision domain name
#   $5 - address of the tap interface on the host
# Returns:
#   None. Exits with a non-zero code on a configuration error
# Example:
#   None
###############################################################################
start_inet_hub() {
   local verbose=$1
   local just_print=$2
   local socket=$3
   local domain=$4
   local tap_addr=$5

   local tap_name
   local manage_tuntap_cmd

   if [ -S "$socket" ] && file_in_use "$socket"; then
      # The socket already exists and is in use

      # Get name for the user's tap interface
      tap_name=$(get_tap_interface "$USER_ID" "$domain")

      # Check to see if interface already exists
      if ip addr show "$tap_name" > /dev/null 2>&1; then
         # If the interface already exists, it must have the same IP as
         # requested.
         if ! ip addr show "$tap_name" | grep --quiet "inet $tap_addr"; then
            warn "$tap_name: Interface already exists and is in usage with a different IP. Remove the interface or change the IP address"
            usage 1
         elif [ -z "$just_print" ]; then
            # Interface-address pair exists; wait for uml_switch to start
            wait_for_socket "$socket"
            return
         fi
      fi
   fi

   echo "******** Starting Internet connected virtual hub ********"
   echo "   (host) $tap_addr"
   
   # Create 'tap' interface on host and configure firewall
   invoke_manage_tuntap "$verbose" "$just_print" "$domain" "$tap_addr"

   # Start UML switch
   invoke_uml_switch "$verbose" "$just_print" "$socket" "$domain"
}


###############################################################################
# Start a virtual network hub.
# Usage:
#   start_hub VERBOSE JUST_PRINT HUB
# Globals:
#   r- HUB_LOG
#   r- NETKIT_HOME
#   r- USER_ID
# Arguments:
#   $1 - set to 1 for verbose, otherwise pass an empty string
#   $2 - set to 1 if only doing a dry run, otherwise pass an empty string
#   $3 - hub socket filepath
# Returns:
#   None. Exits with a non-zero code on a configuration error
# Example:
#   None
###############################################################################
start_hub() {
   local verbose=$1
   local just_print=$2
   local socket=$3

   # Socket already exists but is not used
   if [ ! -S "$socket" ] || ! file_in_use "$socket"; then
      # Start UML switch
      invoke_uml_switch "$verbose" "$just_print" "$socket" ""
   fi
}


###############################################################################
# Start all hubs specified in an array.
# Usage:
#   run_hubs VERBOSE JUST_PRINT [HUB[,ADDR]]...
# Globals:
#   r- HUB_LOG
#   r- HUB_SOCKET_DIR
#   r- HUB_SOCKET_EXTENSION
#   r- HUB_SOCKET_PREFIX
#   r- NETKIT_HOME
#   r- USER_ID
# Arguments:
#   $1 - set to 1 for verbose, otherwise pass an empty string
#   $2 - set to 1 if only doing a dry run, otherwise pass an empty string
#  ... - list of hub names optionally paired with an IP address (for a tap
#        interface).
# Returns:
#   None. Exits with a non-zero code on a configuration error
# Example:
#   run_hubs "" "" hub1 hub2 tap,10.0.0.1 hub3
###############################################################################
run_hubs() {
   local verbose=$1
   local just_print=$2
   local hub_specifications=( "${@:3}" )

   local hub_specification hub_name tap_addr socket

   for hub_specification in "${hub_specifications[@]}"; do
      IFS=, read -r hub_name tap_addr <<< "$hub_specification"

      socket=$(get_hub_socket "${tap_addr:+"1"}" "$hub_name")

      if [ -n "$tap_addr" ]; then
         start_inet_hub "$verbose" "$just_print" "$socket" "$hub_name" "$tap_addr"
      else
         start_hub "$verbose" "$just_print" "$socket"
      fi
   done
}


###############################################################################
# Stop and remove all unused virtual hubs.
# Usage:
#   clean_hubs [HUB[,ADDR]]...
# Globals:
#   r- HUB_LOG
#   r- HUB_SOCKET_DIR
#   r- HUB_SOCKET_EXTENSION
#   r- HUB_SOCKET_PREFIX
#   r- NETKIT_HOME
#   r- USER_ID
# Arguments:
#  ... - list of hub names optionally paired with an IP address (address goes
#        unused but exists as an option if reusing a list used as input to
#        run_hubs).
# Returns:
#   None
# Example:
#   None
###############################################################################
clean_hubs() {
   local hub_specifications=( "$@" )

   local hub_specification hub_name tap_addr socket
   local hub_pid

   for hub_specification in "${hub_specifications[@]}"; do
      IFS=, read -r hub_name tap_addr <<< "$hub_specification"

      socket=$(get_hub_socket "${tap_addr:+"1"}" "$hub_name")

      # Avoid attempting to kill hubs for which the socket file does not exist
      # any more. Such situation may occur if user accidentally deleted it
      # (in which case the hub can safely be killed by using vclean), or if
      # a virtual machine has two (or more) network interfaces attached to the
      # same hub (in which case the script attempts to kill it twice).
      [ ! -e "$socket" ] && continue

      if file_in_use "$socket"; then
         # We get the oldest process to limit output to a single PID
         hub_pid=$(pgrep --oldest --euid="$USER_ID" --full "^$NETKIT_HOME/bin/uml_switch[[:blank:]].*$socket")
         if [ "$(lsof -a -U -p "$hub_pid" -Fn | grep --count "^n$socket")" -le 1 ]; then
            # No more virtual machines are using the switch connected to this socket
            kill "$hub_pid" 2> /dev/null && rm --force -- "$socket"
         fi
      else
         # There are no switches connected to this socket - remove it
         rm "$socket"
      fi
   done
}


###############################################################################
# Calculate the maximum length of a collision domain name before it ends up
# generating a uml_switch socket filepath longer than UNIX_PATH_MAX.
# Usage:
#   get_max_collision_domain_name_len
# Globals:
#   r- HUB_SOCKET_DIR
#   r- HUB_SOCKET_PREFIX
#   r- HUB_SOCKET_EXTENSION
# Arguments:
#   None
# Returns:
#   None. Function exits with non-zero code if the length is below 1.
# Example:
#   None
###############################################################################
get_max_collision_domain_name_len() {
   # shellcheck disable=SC2155
   local min_socket_path=$(get_hub_socket "1" "")
   local max_collision_domain_name_len=$(( 107 - ${#min_socket_path} ))

   if [ "$max_collision_domain_name_len" -lt 1 ]; then
      warn "netkit.conf: uml_switch sockets must have a filepath shorter than 108 characters (UNIX_PATH_MAX)"
      exit 1
   fi

   echo "$max_collision_domain_name_len"
}


# Regular expression for matching an IPv4 address with range validation
inet_regex="((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])"

# Regular expression for matching a collision domain name. This choice is
# arbitrary (though some characters MUST be avoided), but should allow for all
# reasonable use-cases.
# NOTE: must not allow commas, forward slashes, or whitespace. It must be also
# be shorter than the length of UNIX_PATH_MAX when combined with the other hub
# socket filepath parts.
collision_domain_name_regex="([[:alnum:]_.-]{1,$(get_max_collision_domain_name_len)})"
