#!/usr/bin/env bash

#     Copyright 2002-2009 Maurizio Patrignani, Maurizio Pizzonia, Fabio Ricci,
#     Massimo Rimondini - Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is the Netkit vconfig script, which allows to attach virtual
# machine interfaces on the fly. Interface detaching is not supported,
# because the release function for uml-netdev0 is still under development.
# This script already supports interface removal, which can be achieved by
# using an empty collision domain name for an interface. Yet, this feature
# is currently hidden by a check on the presence of a valid collision domain name.

SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"

# Write to the vcommands log
log_write "$0 $*"


###############################################################################
# Write vconf's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... MACHINE"
}


###############################################################################
# Write vconf's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Attach network interfaces to running virtual machines.

      --ethN=DOMAIN   equip virtual machine with a network interface ethN,
                        where N is a number between 0 and $((MAX_INTERFACES - 1)). DOMAIN is the
                        name of the collision domain the interface should be
                        connected to. Using an empty DOMAIN name (e.g.,
                        'eth0=') results in detaching the interface from a
                        running virtual machine. The special name 'tap' is
                        reserved: when connecting an interface to the 'tap'
                        domain, an external network can be reached through this
                        interface. A 'tap' collision domain must be declared
                        with the following syntax:
                          --ethX=tap,TAP_ADDRESS,GUEST_ADDRESS
                        where TAP_ADDRESS is the IP address of the 'host side'
                        of the interface and GUEST_ADDRESS is the IP address of
                        the interface inside the virtual machine. TAP_ADDRESS
                        and GUEST_ADDRESS must be on the same network.
                        Notices:
                        - Using "tap" domains requires administrative
                          privileges. This script will take care of asking you
                          for the root password when needed.
                        - TAP_ADDRESS is mandatory, but is only taken into
                          account when a "tap" collision domain is first used.
                          The script only uses one "tap" collision domain for
                          each user on the host machine.
                        - Tunnel configurations are not automatically removed
                          when halting machines: you should use the vclean
                          script for this purpose.
  -u, --user=USERNAME  attach interfaces to a virtual machine owned by user
                        USERNAME. Using the special user name '-' results in
                        considering all users. If MACHINE is a virtual machine
                        name, and the option --user=- is being used, then
                        interfaces are attached to the virtual machine reported
                        by 'vlist --user=- MACHINE'. By default, interfaces are
                        attached to virtual machines owned by the current user

Miscellaneous:
$(help_option)
  -p, --print         do not actually start anything. Just show which commands
                        would be executed
  -q, --quiet         quiet mode (suppress any output except errors and
                        warnings)
$(version_option)

Notice: arguments containing spaces are not allowed. Interfaces attached by
using this tool will not be shown by vlist, and the corresponding virtual hubs
will not be automatically stopped. Also, when using 'tap' collision domains,
configuration inside virtual machines must be performed by hand.

END_OF_HELP

   exit "$status"
}


# Get command line options
LONG_OPTS="help,print,quiet,version,user:"
SHORT_OPTS="pqu:"

i=0
while [ "$i" -lt "$MAX_INTERFACES" ]; do
   LONG_OPTS="$LONG_OPTS,eth$i:"
   i=$((i + 1))
done

if ! GETOPT_OPTS=$(getopt --name "$SCRIPTNAME" --options "$SHORT_OPTS" --longoptions "$LONG_OPTS" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$GETOPT_OPTS"

while true; do
   case $1 in
      --eth*)
         interface=${1#--}
         DOMAIN=$2
         shift

         if containsRegexp DOMAIN "_"; then
            echo 1>&2 "$SCRIPTNAME: $DOMAIN: Invalid collision domain - underscores are not allowed"
            usage 1
         fi

         if containsRegexp DOMAIN "," || containsRegexp DOMAIN "\\."; then
            # If not a tap specification, but its name contains a comma
            if [ "${DOMAIN#tap,}" = "$DOMAIN" ]; then
               echo 1>&2 "$SCRIPTNAME: $DOMAIN: Invalid collision domain - commas and periods are only valid for tap interface specification"
               usage 1
            fi
         fi

         checkSpaces "$DOMAIN"

         # Construct array of ethN=DOMAIN
         network_interfaces+=( "$interface=$DOMAIN" )
         ;;
      --help)
         usage 0
         ;;
      -p|--print)
         JUST_PRINT=1
         ;;
      -q|--quiet)
         BE_QUIET=1
         ;;
      -u|--user)
         USER=$2
         [ "$USER" = "-" ] && unset USER
         shift
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done


if [ $# -eq 0 ]; then
   echo 1>&2 "$SCRIPTNAME: Missing machine name"
   usage 1
elif [ $# -gt 1 ]; then
   echo 1>&2 "$SCRIPTNAME: Can only specify one machine"
   usage 1
fi

# Parse virtual machine name
VM_ID=$1
checkSpaces "$VM_ID"
shift


###############################################################################
# Append network interface specifications to the kernel invocation command.
# Usage:
#   setup_interfaces [INTERFACE]...
# Globals:
#   r- BE_QUIET
#   -w HUBLIST
#   r- HUB_SOCKET_DIR
#   r- HUB_SOCKET_EXTENSION
#   r- HUB_SOCKET_PREFIX
#   r- MCONSOLE_CMD
#   r- SCRIPTNAME
#   r- USERID
# Arguments:
#  ... - array of interface specifications (ethN=DOMAIN)
# Returns:
#   None. Will exit with usage 1 on invalid specification.
# Example:
#   None
###############################################################################
setup_interfaces() {
   local interface_specification interface_specifications
   local device hub_name hub_socket tap_address
   local guest_address used_devices
   local first_iteration

   interface_specifications=( "$@" )

   first_iteration=true
   for interface_specification in "${interface_specifications[@]}"; do
      device=${interface_specification%%=*}

      # If hub_name is blank, the network interface will be removed.
      hub_name=${interface_specification#*=}

      # Check if interface has already been configured
      if [[ " $used_devices " == *" $device "* ]]; then
         echo 1>&2 "$SCRIPTNAME: $device: Duplicate interface"
         usage 1
      fi

      # Remember that this network interface has been configured
      used_devices="$used_devices $device"

      # Check if tap interface (regular hubs cannot be named with commas)
      if [[ "$hub_name" == tap,* ]]; then
         # Format: tap,tap_address,guest_address
         IFS=, read -r hub_name tap_address guest_address <<< "$hub_name"

         if ! is_inet_addr "$tap_address"; then
            echo 1>&2 "$SCRIPTNAME: $tap_address: Invalid tap address"
            usage 1
         fi

         if ! is_inet_addr "$guest_address"; then
            echo 1>&2 "$SCRIPTNAME: $guest_address: Invalid guest address"
            usage 1
         fi
      else
         # This is a normal (i.e., not 'tap') collision domain
         unset tap_address guest_address
      fi
      
      hub_socket="$HUB_SOCKET_DIR/${HUB_SOCKET_PREFIX}_${USERID}_$hub_name$HUB_SOCKET_EXTENSION"

      if [ -n "$tap_address" ]; then
         HUBLIST+=( "$hub_socket,$tap_address,$guest_address" )
      elif [ -n "$hub_name" ]; then
         HUBLIST+=( "$hub_socket" )
      fi

      if $first_iteration; then
         first_iteration=false
      elif [ -z "$BE_QUIET" ]; then
         echo -n "               "
      fi

      if [ -n "$hub_name" ]; then
         MCONSOLE_CMD+=( "$device=daemon,,,$hub_socket" )
         [ -z "$BE_QUIET" ] && echo "$device @ $hub_name ($hub_socket)"
      else
         MCONSOLE_CMD+=( "$device" )
         [ -z "$BE_QUIET" ] && echo "$device removed"
      fi
   done
}


###############################################################################
# Attach/remove network interfaces from running machines with mconsole.
# Usage:
#   invoke_mconsole MCONSOLE_CMD
# Globals:
#   r- NETKIT_HOME
#   r- VM_ID
# Arguments:
#   $1 - list of mconsole commands
# Returns:
#   None
# Example:
#   None
###############################################################################
invoke_mconsole() {
   local action action_desc arg device hub_specification mconsole_cmd

   mconsole_cmd=( "$@" )

   for arg in "${mconsole_cmd[@]}"; do
      # Format is either:
      #   To add an interface:
      #     ethN=daemon,,,path/to/socket
      #   To remove an interface:
      #     ethN
      device=${arg%%=*}
      hub_specification=${arg#*=}

      if [ -n "$hub_specification" ]; then
         action="config"
         action_desc="add"
      else
         action="remove"
         action_desc="remove"
      fi

      if ! run_command "$JUST_PRINT" "" "$NETKIT_HOME/bin/uml_mconsole" "$VM_ID" "$action" "$device" 2>&1; then
         echo 2>&1 "Failed to $action_desc interface '$device'"
      fi
   done
}


############################# Configure interfaces ############################
if ! get_machine_state "$USER" "$VM_ID"; then
   echo -n 1>&2 "$SCRIPTNAME: no virtual machine named '$VM_ID' exists"
   [ -n "$USER" ] && echo " for user $USER." || echo "."
   exit 1
fi


if [ -z "$BE_QUIET" ]; then
   echo "============= Configuring virtual machine '$VM_ID' (PID $(get_vm_pid_by_name "$user" "$vm")) ============="
   echo "   Virtual machine owner: $USER"
fi


##### Setup network interfaces
if [ ${#network_interfaces[@]} -gt 0 ]; then
   [ -z "$BE_QUIET" ] && echo -n "   Interfaces: "
   setup_interfaces "${network_interfaces[@]}"
fi

##### Start network hubs
runHubs "${HUBLIST[@]}"

##### Attach/remove network interfaces
invoke_mconsole "${MCONSOLE_CMD[@]}"
