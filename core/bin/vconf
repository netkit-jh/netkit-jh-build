#!/usr/bin/env bash

#     Copyright 2020-2022 Adam Bromiley, Joshua Hawking - Warwick Manufacturing
#     Group, University of Warwick.
#     Copyright 2002-2009 Maurizio Patrignani, Maurizio Pizzonia, Fabio Ricci,
#     Massimo Rimondini - Computer Networks Research Group, Roma Tre
#     University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is the Netkit vconf script, which allows to attach virtual machine
# interfaces on the fly. Interface detaching is not supported, because the
# release function for uml-netdev0 is still under development. This script
# already supports interface removal, which can be achieved by using an empty
# collision domain name for an interface. Yet, this feature is currently hidden
# by a check on the presence of a valid collision domain name.


###############################################################################
# Write vconf's usage line to standard output.
# Usage:
#   usage_line
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... MACHINE"
}


###############################################################################
# Write vconf's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Attach network interfaces to running virtual machines.

      --ethN=[DOMAIN]  equip virtual machine with a network interface ethN,
                        where N is a number between 0 and $((MAX_INTERFACES - 1)). DOMAIN is the
                        name of the collision domain the interface should be
                        connected to. Using an empty DOMAIN name (e.g.,
                        'eth0=') results in detaching the interface from a
                        running virtual machine.
                        Including a comma in DOMAIN defines a 'tap' interface.
                        This is a special socket that allows an external
                        to be reached in the virtual machine. A 'tap' interface
                        must be declared with the following syntax:
                          --ethX=DOMAIN,TAP_ADDR,GUEST_ADDR
                        where DOMAIN is a valid collision domain name,
                        TAP_ADDR is the IP address of the 'host side' of the
                        interface and GUEST_ADDR is the IP address of the
                        interface inside the virtual machine. TAP_ADDR and
                        GUEST_ADDR must be on the same /8 network. Machines can
                        share a 'tap' interface if one uses the same DOMAIN and
                        TAP_ADDR for them. If an interface on the same DOMAIN
                        with a different TAP_ADDR already exists, an error will
                        be thrown. Another interface with a TAP_ADDR within the
                        /8 subnet of another cannot be created; likewise, like
                        a regular collision domain, two machines using the same
                        'tap' interface cannot share an IP address (there will
                        be no explicit error for either of these scenarios.)
                        Notices:
                        - Using 'tap' interfaces requires administrative
                          privileges. This script will take care of asking you
                          for the root password when needed.
                        - TAP_ADDR is mandatory, but is only taken into account
                          when a 'tap' interface with such a collision domain
                          is first used.
                        - Tunnel configurations are not automatically removed
                          when halting machines: you should use the vclean
                          script for this purpose.
  -u, --user=USERNAME  attach interfaces to a virtual machine owned by user
                        USERNAME. Using the special user name '-' results in
                        considering all users. If MACHINE is a virtual machine
                        name, and the option --user=- is being used, then
                        interfaces are attached to the virtual machine reported
                        by 'vlist --user=- MACHINE'. By default, interfaces are
                        attached to virtual machines owned by the current user

Miscellaneous:
$(help_option)
  -n, --dry-run, --just-print, --recon  do not actually start anything. Just
                                         show which commands would be executed
  -v, --verbose       show commands being ran
$(version_option)

Notice: arguments containing spaces are not allowed. Interfaces attached by
using this tool will not be shown by vlist, and the corresponding virtual hubs
will not be automatically stopped. Also, when using 'tap' collision domains,
configuration inside virtual machines must be performed by hand.

END_OF_HELP

   exit "$status"
}


###############################################################################
# Attach/remove network interfaces from running machines with mconsole.
# Usage:
#   invoke_mconsole VERBOSE JUST_PRINT MCONSOLE [INTERFACE]...
# Arguments:
#   $1 - set to 1 for verbose, otherwise pass an empty string
#   $2 - set to 1 if only doing a dry run, otherwise pass an empty string
#   $3 - uml_mconsole socket file
#  ... - array of interface specifications (ethN=DOMAIN to add a device, and
#        just ethN to remove one)
###############################################################################
invoke_mconsole() {
   local verbose=$1
   local just_print=$2
   local mconsole=$3
   local interface_specifications=( "${@:4}" )

   local interface_specification interface
   local hub_specification hub_name
   local socket
   local action action_desc interface_config
   local uml_mconsole_cmd

   local indent=""

   [ "${#interface_specifications[@]}" -eq 0 ] && return
   echo -n "   Interfaces: "

   for interface_specification in "${interface_specifications[@]}"; do
      # Format is either:
      #   To add an interface:
      #     ethN=daemon,,,path/to/socket
      #   To remove an interface:
      #     ethN
      interface=${interface_specification%%=*}
      hub_specification=${interface_specification#*=}

      if [ -n "$hub_specification" ]; then
         hub_name=${hub_specification%%,*}

         # Check if tap interface (regular hubs cannot be named with commas)
         if [[ "$hub_specification" == *,* ]]; then
            socket=$(get_hub_socket "1" "$hub_name")
            success_msg="$indent$interface @ $hub_name (tap; $socket)"
         else
            # This is a normal interface
            socket=$(get_hub_socket "" "$hub_name")
            success_msg="$indent$interface @ $hub_name ($socket)"
         fi

         action="config"
         interface_config="$interface=daemon,,,$socket"
         
         action_desc="add"
      else
         action="remove"
         interface_config=$interface
         
         action_desc="remove"
         success_msg="$indent$interface removed"
      fi

      uml_mconsole_cmd=(
         "$NETKIT_HOME/bin/uml_mconsole"
         "$mconsole"
         "$action"
         "$interface_config"
      )

      if [ -n "$just_print" ]; then
         echo "Not running ==> ${uml_mconsole_cmd[*]}"
      else
         [ -n "$verbose" ] && echo "Running ==> ${uml_mconsole_cmd[*]}"

         if "${uml_mconsole_cmd[@]}" > /dev/null 2>&1; then
            echo "$success_msg"
            # Indent subsequent lines
            indent="               "
         else
            echo 2>&1 "Failed to $action_desc interface '$interface'"
         fi
      fi
   done
}


# Ensure NETKIT_HOME is set
if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. -- "$NETKIT_HOME/bin/script_utils"
# shellcheck source=./vcommon
. -- "$NETKIT_HOME/bin/vcommon"

# Write to the vcommands log
log_write "$0 $*"


target_user=$USER_ID


# Get command line options
long_opts="dry-run,help,just-print,recon,user:,verbose,version"
short_opts="nu:v"

# Append a new long option for each network interface that can be configured
for ((i = 0; i < MAX_INTERFACES; ++i)); do
   long_opts+=",eth$i:"
done

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      --eth*)
         interface=${1#--}
         hub_name=$2
         shift

         if [ -n "$hub_name" ]; then
            # Collision domain names are validated later in create_hub_list
            added_interfaces+=( "$interface=$hub_name" )
         else
            removed_interfaces+=( "$interface=" )
         fi
         ;;
      --help)
         usage 0
         ;;
      -n|--dry-run|--just-print|--recon)
         just_print=1
         ;;
      -u|--user)
         target_user=$2
         shift
         if [ "$target_user" = "-" ]; then
            unset target_user
         elif ! id -- "$target_user" > /dev/null 2>&1; then
            warn "$target_user: User does not exist"
            usage 1
         fi
         ;;
      -v|--verbose)
         verbose=1
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         warn "Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

# Parse virtual machine name
if [ $# -eq 0 ]; then
   warn "Missing machine name"
   usage 1
elif [ $# -gt 1 ]; then
   warn "Can only specify one machine"
   usage 1
fi

vhost=$1
validate_hostnames "$vhost"


if ! get_vhost_info_by_name "$target_user" "$vhost"; then
   warn "no virtual machine named '$vhost' exists${target_user:+" for user $target_user"}."
   exit 1
fi


# Generate hub_list and start hubs
create_hub_list "${added_interfaces[@]}"
run_hubs "$verbose" "$just_print" "${hub_list[@]}"


# Configure network interfaces
echo "============= Configuring virtual machine '$vhost' (PID $(get_vhost_pid_by_name "$target_user" "$vhost")) ============="
echo "   Virtual machine owner: $target_user"

invoke_mconsole "$verbose" "$just_print" "${vhost_info[mconsole]}" "${removed_interfaces[@]}" "${added_interfaces[@]}"
