#!/usr/bin/env bash

#     Copyright 2020-2021 Adam Bromiley, Joseph Bunce, Joshua Hawking - Warwick
#     Manufacturing Group, University of Warwick.
#     Copyright 2002-2009 Maurizio Patrignani, Maurizio Pizzonia, Fabio Ricci,
#     Massimo Rimondini - Computer Networks Research Group, Roma Tre
#     University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is the Netkit vclean script, which can be used to remove unused virtual
# hubs, hanging UML kernels and configured tunnels.


###############################################################################
# Write vclean's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]..."
}


###############################################################################
# Write vclean's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Perform a Netkit cleanup operation:
- Kill processes associated to unused (or all) virtual hubs
- Kill running virtual machines
- Wipe the mconsole, hub socket, and .netkit directories (besides netkit.conf)
- Remove host-side configurations set up for tap interfaces
By default, the script just removes unused virtual hubs.

      --clean-all     Equivalent to --user=-, --kill-machines,
                        --clean-directories, and --remove-tunnels. This option
                        affects all users.
      --clean-directories  Empty the following directories:
                              - MCONSOLE_DIR
                              - HUB_SOCKET_DIR
                              - \$HOME/.netkit (leaves netkit.conf)
                            This option affects all users.
  -f, --force         When used with --remove-hubs, kill all (not just unused)
                        virtual hubs and clean their files.
  -H, --remove-hubs   Just kill unused virtual hubs. This is the default,
                        unless another action has been explicitly requested.
  -K, --kill-machines  Kill all running virtual machines and virtual hubs. This
                        corresponds to crashing all running virtual machines
                        (even those that are frozen) and the virtual hubs they
                        are attached to.
  -T, --remove-tunnels  Remove tunnels and other configuration settings that
                         have been altered in order to set up "tap" interfaces.
                         If the user specified is not '-' (all), current
                         firewall rules enabling 'tap' interfaces (which are
                         global) are not affected. This operation requires
                         administrative privileges. The script will take care
                         of asking for the root password if required.
      --test          Do not actually stop virtual machines and hubs: just show
                        which processes would be killed. --remove-tunnels is
                        not affected by this option.
  -u, --user=USERNAME  Perform operations on processes and tunnels owned by
                        USERNAME. By using the special user name '-' all the
                        processes are affected, regardless of their user (this
                        requires administrative privileges). Action
                        --remove-tunnels is not affected by this option.

Miscellaneous:
$(help_option)
  -q, --quick         Quick mode - do not check if processes have actually
                        stopped.
  -v, --verbose       Show affected processes and files.
$(version_option)

END_OF_HELP

   exit "$status"
}


###############################################################################
# Kill all running VMs.
# Usage:
#   kill_all_vhosts VERBOSE TEST_MODE QUICK_MODE USER
# Globals:
#   None 
# Arguments:
#   $1 - set to 1 for verbose, empty string otherwise
#   $2 - set to 1 for test mode, empty string otherwise
#   $3 - set to 1 for quick mode, empty string otherwise
#   $4 - owner of the machines; pass an empty string for all users
# Returns:
#   None. Returns early on test mode (only outputs PIDs without killing them).
# Example:
#   None
###############################################################################
kill_all_vhosts() {
   local verbose=$1
   local test_mode=$2
   local quick_mode=$3
   local target_user=$4

   local pids

   mapfile -t pids < <(
      pgrep ${target_user:+"--euid=$target_user"} --full "^$VM_KERNEL"
   )

   [ -n "$verbose" ] || [ -n "$test_mode" ] && echo "PIDs: ${pids[*]}"

   # We are in test mode, just show which processes would be killed
   [ -n "$test_mode" ] && return

   echo -n "Killing... "

   if [ "${#pids[@]}" -eq 0 ]; then
      echo "done."
      return
   fi

   if [ -n "$quick_mode" ]; then
      # Just kill processes
      kill -KILL "${pids[@]}" 2> /dev/null
      kill -CONT "${pids[@]}" 2> /dev/null
      return
   fi

   # Signalling processes twice ensures they stop even if they need to be
   # killed in a certain order
   kill -TERM "${pids[@]}" 2> /dev/null
   kill -TERM "${pids[@]}" 2> /dev/null

   sleep 1
   mapfile -t pids < <(
      pgrep ${target_user:+"--euid=$target_user"} --full "^$VM_KERNEL"
   )

   if [ "${#pids[@]}" -gt 0 ]; then
      echo -n "killing harder... "

      kill -KILL "${pids[@]}" 2> /dev/null
      kill -CONT "${pids[@]}" 2> /dev/null

      sleep 1
      mapfile -t pids < <(
         pgrep ${target_user:+"--euid=$target_user"} --full "^$VM_KERNEL"
      )

      if [ "${#pids[@]}" -gt 0 ]; then
         echo "failed!"
         [ -n "$verbose" ] && echo "PIDs still active: ${pids[*]}"
         return
      fi
   fi

   echo "done."
   return
}


###############################################################################
# Kill unused hubs by process ID and remove their socket files.
# Usage:
#   kill_hubs FORCE TEST_MODE [PID]...
# Globals:
#   None
# Arguments:
#   $1 - set to 1 to kill and remove hubs even if being used, otherwise pass an
#        empty string.
#   $2 - set to 1 for test mode, empty string otherwise
#  ... - the process IDs of the virtual hubs to clean up.
# Returns:
#   None
# Example:
#   None
###############################################################################
kill_hubs() {
   local force=$1
   local test_mode=$2
   local hub_pids=( "${@:3}" )
   
   local hub_pid hub_file
   local uml_switch_cmd
   local found_unused_hub   

   for hub_pid in "${hub_pids[@]}"; do
      # Safely extract the socket filename from argv.
      # NOTE: we assume the final command line argument is the socket filename.
      mapfile -d "" -t uml_switch_cmd < "/proc/$hub_pid/cmdline"
      hub_file=${uml_switch_cmd[-1]}

      if [ -n "$force" ] || [ "$(lsof -a -U -p "$hub_pid" -Fn | grep --count "^n$hub_file")" -le 1 ]; then
         # Force mode or no more virtual machines are using the hub connected
         # to this socket
         found_unused_hub=1

         echo -n "$hub_file (PID $hub_pid)"

         if [ -z "$test_mode" ]; then
            echo -n ": Killing... "
            kill "$hub_pid"  2> /dev/null && rm --force "$hub_file"
            echo -n "done."
         fi

         echo ""
      fi
   done

   [ -z "$found_unused_hub" ] && echo "No unused virtual hubs have been found."
}


# shellcheck source=./script_utils
. -- "$NETKIT_HOME/bin/script_utils"

# Write to the vcommands log
log_write "$0 $*"


target_user=$USER_ID


# Get command line options
long_opts="clean-all,clean-directories,force,help,kill-machines,quick,\
remove-hubs,remove-tunnels,test,user:,verbose,version"
short_opts="fHKTu:qv"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      --clean-all)
         clean_all=1
         ;;
      --clean-directories)
         clean_dirs=1
         ;;
      -f|--force)
         force=1
         ;;
      -H|--remove-hubs)
         rm_hubs=1
         ;;
      --help)
         usage 0
         ;;
      -K|--kill-machines)
         kill_machines=1
         ;;
      -q|--quick)
         quick_mode=1
         ;;
      -T|--remove-tunnels)
         rm_tunnels=1
         ;;
      --test)
         test_mode=1
         ;;
      -u|--user)
         target_user=$2
         shift
         if [ "$target_user" = "-" ]; then
            unset target_user
         elif ! id -- "$target_user" > /dev/null 2>&1; then
            warn "$target_user: User does not exist"
            usage 1
         fi
         ;;
      -v|--verbose)
         verbose=1
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         warn "Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

# Check for further arguments
if [ $# -gt 0 ]; then
   warn "Too many arguments"
   usage 1
fi


# Actions --remove-hubs and --kill-machines are incompatible
if [ -n "$rm_hubs" ] && [ -n "$kill_machines" ]; then
   warn "Hub removal and machine kill cannot be performed simultaneously"
   exit 1
fi

# --force is only effective with --remove-hubs
[ -n "$force" ] && [ -z "$rm_hubs" ] &&
   warn "--force is redundant when not used with --remove-hubs"


if [ -n "$clean_all" ]; then
   clean_dirs=1
   kill_machines=1
   rm_tunnels=1
   unset target_user
fi

# Enable default action (remove unused virtual hubs) if none has been requested
[ -z "$kill_machines" ] && [ -z "$rm_tunnels" ] && rm_hubs=1


[ -z "$target_user" ] && user_str="any user" || user_str=$target_user


# Remove unused hubs (is default action)
if [ -n "$rm_hubs" ]; then
   # Just remove unused switches
   [ -n "$force" ] && hub_state="all" || hub_state="unused"
   echo "Killing $hub_state virtual hubs owned by $user_str:"

   # Get the process IDs of running UML virtual hubs
   mapfile -t hub_pids < <(
      pgrep ${target_user:+"--euid=$target_user"} --full "^$NETKIT_HOME/bin/uml_switch"
   )

   # Kill uml_switch processes and clean up unused hub files
   kill_hubs "$force" "$test_mode" "${hub_pids[@]}"
fi


# Kill running virtual machines and hubs
if [ -n "$kill_machines" ]; then
   # Kill all running virtual machine kernels and all virtual hubs
   echo "Killing virtual machines owned by $user_str:"
   kill_all_vhosts "$verbose" "$test_mode" "$quick_mode" "$target_user"

   echo "Killing virtual hubs owned by $user_str:"

   # Get the process IDs of running UML virtual hubs
   mapfile -t hub_pids < <(
      pgrep ${target_user:+"--euid=$target_user"} --full "^$NETKIT_HOME/bin/uml_switch"
   )

   # Force kill all uml_switch processes and clean up their hub files
   kill_hubs "1" "$test_mode" "${hub_pids[@]}"
fi


# Remove Netkit directories
if [ -n "$clean_dirs" ]; then
   echo "Removing Netkit directories"

   rm ${verbose:+"--verbose"} --force --recursive -- \
      "${HUB_SOCKET_DIR:?}/"* \
      "${MCONSOLE_DIR:?}/"*

   # Clear out .netkit/ but keep netkit.conf
   find "$HOME/.netkit/"* \
      ! -name "netkit.conf" \
      -exec rm ${verbose:+"--verbose"} --force --recursive {} +
fi


# Remove tunnel configurations (if asked to)
if [ -n "$rm_tunnels" ]; then
   # Remove any previously configured tunnel
   echo "================== Removing tap configurations =================="
   echo "This will affect tap configurations for $user_str."

   manage_tuntap_cmd=( "$NETKIT_HOME/bin/manage_tuntap" "stop" "$target_user" )

   [ -n "$verbose" ] && echo "Running ==> ${manage_tuntap_cmd[*]}"

   if ! "${manage_tuntap_cmd[@]}"; then
      echo 1>&2 "Error while removing tap configurations"
      exit 1
   fi
fi
