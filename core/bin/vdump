#!/usr/bin/env bash

#     Copyright 2020-2022 Adam Bromiley, Joshua Hawking - Warwick Manufacturing
#     Group, University of Warwick.
#     Copyright 2009 Julien Iguchi-Cartigny, XLIM Laboratory, France
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is the Netkit vdump script, which is used to start uml_dump.


###############################################################################
# Write vdump's usage line to standard output.
# Usage:
#   usage_line
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME DOMAIN"
}


###############################################################################
# Write vdump's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
  or:  $SCRIPTNAME OPTION
Dump packets from a Netkit DOMAIN (collision domain) to standard output.

$(help_option)
  -v, --verbose       show the commands being ran
$(version_option)

END_OF_HELP

   exit "$status"
}


# Ensure NETKIT_HOME is set
if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. -- "$NETKIT_HOME/bin/script_utils"
# shellcheck source=./vcommon
. -- "$NETKIT_HOME/bin/vcommon"

# Write to the vcommands log
log_write "$0 $*"


# Get command line options
long_opts="help,verbose,version"
short_opts="v"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      --help)
         usage 0
         ;;
      -v|--verbose)
         verbose=1
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         warn "Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

if [ $# -eq 0 ]; then
   warn "Missing collision domain name"
   usage 1
elif [ $# -gt 1 ]; then
   warn "Can only specify one collision domain"
   usage 1
fi

hub_name=$1


reg_socket=$(get_hub_socket "" "$hub_name")
tap_socket=$(get_hub_socket "1" "$hub_name")

if [ -e "$reg_socket" ]; then
   socket=$reg_socket
elif [ -e "$tap_socket" ]; then
   socket=$tap_socket
else
   warn "$hub_name: Cannot find hub socket for the collision domain"
   usage 1
fi

if [ ! -S "$socket" ]; then
   warn "$socket: File is not a socket"
   usage 1
fi


uml_dump_cmd=( "uml_dump" "$socket" )

[ -n "$verbose" ] && echo "Running ==> ${uml_dump_cmd[*]}"
"${uml_dump_cmd[@]}"
