#!/bin/false
# shellcheck shell=bash

#     Copyright 2020-2021 Adam Bromiley, Joseph Bunce, Joshua Hawking, Kunal
#     Shah - Warwick Manufacturing Group, University of Warwick.
#     Copyright 2002-2009 Stefano Pettini, Fabio Ricci, Massimo Rimondini
#     Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is a support script for the Netkit lcommands. It is not intended for
# standalone usage.


# Guard to prevent sourcing the script multiple times
[ -n "$LCOMMON_SRC" ] && return
LCOMMON_SRC=1


# shellcheck source=./script_utils
. -- "$NETKIT_HOME/bin/script_utils"


###############################################################################
# Print a string with bold formatting.
# Usage:
#   bold_print MESSAGE
# Globals:
#   r- color_bold
#   r- color_normal
# Arguments:
#   $1 - string to print
# Returns:
#   None
# Example:
#   None
###############################################################################
bold_print() {
   echo "$color_bold$1$color_normal"
}


###############################################################################
# Set lab_vhosts to a list of machines in the lab taken from the directory
# listing. If lab_vhosts is already set (such as by the user on the command
# line), machines not present in the lab are removed from the array.
# Usage:
#   get_lab_vhosts DIR
# Globals:
#   rw lab_vhosts
# Arguments:
#   $1 - lab directory
# Returns:
#   None
# Example:
#   None
###############################################################################
get_lab_vhosts() {
   local lab_dir=$1

   local vhost
   local lab_vhosts_ref cmdline_vhosts

   # Get lab.conf's LAB_MACHINES variable. This will override the directory
   # listing for the machine list. If machine names are specified on the
   # command line (existing lab_vhosts value), they will be checked against
   # this list as opposed to the directory listing. Hide error if lab.conf is
   # not present.
   # Note: LAB_MACHINES is a comma-separated (whitespace is not ignored) list.
   # This means if hostname_regex allows, machine names cannot have commas in
   # them.
   IFS="," read -ra lab_vhosts_ref <<< "$(
      get_lab_variable "LAB_MACHINES" "$lab_dir" 2> /dev/null
   )"

   if [ "${#lab_vhosts_ref[@]}" -eq 0 ]; then
      # Build list of virtual machines that are part of the lab from the
      # directory listing if LAB_MACHINES is not set.
      for dir in "$lab_dir/"*/; do
         # If there are no subdirectories, "$lab_dir/"*/ will expand to a path
         # to a directory named *; the for loop will still run over that one
         # string. shopt -s nullglob will avoid this issue but has global
         # implications. Avoid having to set nullglob by simply checking if the
         # directory exists.
         [ ! -d "$dir" ] && continue

         vhost=$(basename -- "$dir")

         # Avoid the shared and _test directories
         array_contains "$vhost" "${invalid_hostnames[@]}" && continue

         lab_vhosts_ref+=( "$vhost" )
      done
   fi
   
   # If the user has explicitly provided a machine list via the command line
   # (i.e. lab_vhosts already contains values when calling the function),
   # verify that the given machines are in the lab (either LAB_MACHINES or
   # directory listing).
   if [ "${#lab_vhosts[@]}" -gt 0 ]; then
      cmdline_vhosts=( "${lab_vhosts[@]}" )
      unset lab_vhosts

      for vhost in "${cmdline_vhosts[@]}"; do
         if array_contains "$vhost" "${lab_vhosts_ref[@]}"; then
            lab_vhosts+=( "$vhost" )
         else
            echo 1>&2 "Warning: '$vhost' is not part of the lab in '$lab_dir'"
         fi
      done
   else
      lab_vhosts=( "${lab_vhosts_ref[@]}" )
   fi

   validate_hostnames "${lab_vhosts[@]}"
}


###############################################################################
# From a lab info associative array (key is directory basename, value is the
# relevant attribute's value) construct a formatted list suitable for
# lab_welcome output (i.e. value1 (dir1, dir2, ...), value2 (dir3, dir4, ...),
# ...) and write to standard output.
# Usage:
#   generate_lab_info_str LAB_INFO
# Globals:
#   None
# Arguments:
#   $1 - lab information associative array name reference
# Returns:
#   None
# Example:
#   None
###############################################################################
generate_info_str() {
   local -n lab_info=$1

   local lab value
   local lab_info_str separator

   declare -A collated_lab_info_values

   # For each directory chosen, add its lab information value as a key to an
   # array with a value of directory listings. For example, for a lab_info
   # array of version numbers:
   #
   #     lab_info[lab3a]="1.0"
   #     lab_info[lab3b]="1.1"
   #     lab_info[lab3c]="1.0"
   #     lab_info[lab3d]="2.0"
   #
   # This would be transformed into collated_lab_info_values:
   #
   #     collated_lab_info_values[1.0]="lab3a, lab3c"
   #     collated_lab_info_values[1.1]="lab3b"
   #     collated_lab_info_values[2.0]="lab3d"
   for lab in "${!lab_info[@]}"; do
      value=${lab_info[$lab]:-"<unknown>"}

      # Append the lab name to its relevant value's list if the value has been
      # seen before (exists as a key in the array). If not, start the list.
      if array_contains "$value" "${!collated_lab_info_values[@]}"; then
         collated_lab_info_values[$value]="${collated_lab_info_values[$value]}, $lab"
      else
         collated_lab_info_values[$value]=$lab
      fi
   done

   # collated_lab_info_values is then flattened into a string to display in the
   # lab_welcome dialog.
   if [ ${#collated_lab_info_values[@]} -gt 1 ]; then
      for value in "${!collated_lab_info_values[@]}"; do
         lab_info_str+="$separator$value (${collated_lab_info_values[$value]})"

         # Comma-separate subsequent interfaces
         separator=", "
      done
   elif [ ${#collated_lab_info_values[@]} -eq 1 ]; then
      # If all labs share the same value, it is not necessary to display the
      # lab names.
      lab_info_str=${!collated_lab_info_values[*]}
   else
      # If no lab has the parameter defined.
      lab_info_str="<unknown>"
   fi

   printf "%s\n" "$lab_info_str"
}


###############################################################################
# Get the value of a parameter set in a lab's lab.conf file and write to
# standard output.
# Usage:
#   get_lab_variable VARIABLE DIR
# Globals:
#   None
# Arguments:
#   $1 - lab variable name
#   $2 - lab directory
# Returns:
#   None
# Example:
#   None
###############################################################################
get_lab_variable() {
   local variable=$1
   local lab_conf="$2/lab.conf"

   # Set lab variables from lab.conf. The sed expression prints only the first
   # matching line and deletes the variable name and equals sign.
   sed --quiet -- "0,/^$variable=/s///p" "$lab_conf"
}


###############################################################################
# Print out information about the labs in the given directories. Unset values
# will be outputted as "<unknown>".
# Usage:
#   lab_welcome [DIR]...
# Globals:
#   r- color_blue
#   r- color_bold
#   r- color_normal
#   r- SCRIPTNAME
# Arguments:
#  ... - list of lab directories
# Returns:
#   None
# Example:
#   None
###############################################################################
lab_welcome() {
   local lab_dirs=( "$@" )

   local indent lab_dirs_str
   local dir lab

   declare -A lab_versions lab_authors lab_emails lab_webs lab_descriptions

   for dir in "${lab_dirs[@]}"; do
         # Check that the lab directory exists
      if [ ! -d "$dir" ]; then
         echo 1>&2 "$SCRIPTNAME: $dir: No such directory"
         exit 1
      fi

      lab=$(basename -- "$dir")

      lab_dirs_str+=$indent$dir$'\n'
      indent="                    "

      # We use associative arrays for printing the values with their respective
      # directory basename. SC2034 (variable appears unused) must be ignored
      # because the arrays are only referenced by name.
      # shellcheck disable=SC2034
      lab_versions[$lab]=$(get_lab_variable "LAB_VERSION" "$dir")
      # shellcheck disable=SC2034
      lab_authors[$lab]=$(get_lab_variable "LAB_AUTHOR" "$dir")
      # shellcheck disable=SC2034
      lab_emails[$lab]=$(get_lab_variable "LAB_EMAIL" "$dir")
      # shellcheck disable=SC2034
      lab_webs[$lab]=$(get_lab_variable "LAB_WEB" "$dir")
      # shellcheck disable=SC2034
      lab_descriptions[$lab]=$(get_lab_variable "LAB_DESCRIPTION" "$dir")
   done

   lab_dirs_str=${lab_dirs_str%$'\n'}

   # Convert the multi-lab arrays to flat, comma-separated lists and print
   bold_print "Lab directory(ies): $color_blue$lab_dirs_str"
   bold_print "Version(s):         $color_blue$(generate_info_str lab_versions)"
   bold_print "Author(s):          $color_blue$(generate_info_str lab_authors)"
   bold_print "Email(s):           $color_blue$(generate_info_str lab_emails)"
   bold_print "URL(s):             $color_blue$(generate_info_str lab_webs)"
   bold_print "Description(s):"
   bold_print "$color_blue$(generate_info_str lab_descriptions)"
}


###############################################################################
# Remove temporary files from the lab directory and .netkit.
# Usage:
#   lab_clean VERBOSE DIR
# Globals:
#   r- MCONSOLE_DIR
#   rw lab_vhosts
# Arguments:
#   $1 - set to 1 for verbose mode, empty string for otherwise
#   $2 - lab directory
# Returns:
#   None
# Example:
#   None
###############################################################################
lab_clean() {
   local verbose=$1
   local lab_dir=$2

   local vhost

   get_lab_vhosts "$lab_dir"

   bold_print "Cleaning up lab inside '$lab_dir'..."

   for vhost in "${lab_vhosts[@]}"; do
      # Remove vhost's UML directory
      rm ${verbose:+"--verbose"} --force --recursive -- "${MCONSOLE_DIR:?}/$vhost"

      # Remove files from the lab directory
      rm ${verbose:+"--verbose"} --force -- "$lab_dir/$vhost."{"ready","disk","log","testdone"}
   done

   rm ${verbose:+"--verbose"} --force -- "$lab_dir/readyfor.test"
}


###############################################################################
# Crash virtual machines of a Netkit lab.
# Usage:
#   lab_crash VERBOSE QUICK_MODE DIR KEEP_FS JUST_KILL
# Globals:
#   rw lab_vhosts
# Arguments:
#   $1 - set to 1 for verbose, empty string for otherwise
#   $2 - set to 1 for quick mode on vcrash, empty string for otherwise
#   $3 - lab directory
#   $4 - set to 1 to keep the filesystem, empty string for otherwise
#   $5 - set to 1 to just kill machine process, empty string for otherwise
# Returns:
#   None
# Example:
#   None
###############################################################################
lab_crash() {
   local verbose=$1
   local quick_mode=$2
   local lab_dir=$3
   local keep_fs=$4
   local just_kill=$5

   local vcrash_args vhost

   get_lab_vhosts "$lab_dir"

   # shellcheck disable=2206
   vcrash_args+=(
      ${verbose:+"--verbose"}
      ${quick_mode:+"--quick"}
      ${keep_fs:-"--remove-fs"}
      ${just_kill:+"--just-kill"}
   )
   
   for vhost in "${lab_vhosts[@]}"; do
      bold_print "Crashing '$vhost'..."
      "$NETKIT_HOME/bin/vcrash" "${vcrash_args[@]}" -- "$vhost" &&
         rm ${verbose:+"--verbose"} --force -- "$lab_dir/$vhost.ready"
   done
   
   bold_print "Removing readyfor.test..."
   rm --force -- "$lab_dir/readyfor.test"
}


# shellcheck source=./script_utils
. -- "$NETKIT_HOME/bin/script_utils"


# ANSI color escape sequences
color_normal=$'\033[0m'
color_bold=$'\033[1m'
color_blue=$'\033[34m'
