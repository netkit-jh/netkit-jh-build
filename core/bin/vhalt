#!/usr/bin/env bash

#     Copyright 2002-2009 Maurizio Patrignani, Maurizio Pizzonia, Fabio Ricci,
#     Massimo Rimondini - Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is the Netkit vhalt script, which is used to gracefully shut down a
# virtual machine.


###############################################################################
# Write vhalt's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... MACHINE..."
}


###############################################################################
# Write vhalt's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Gracefully shutdown running MACHINE(s).

  -q, --quick         do not wait for virtual machines to shut down. Just issue
                        the halt command and exit
  -r, --remove-fs     delete virtual machine (COW) filesystem after halting
                        machine. Using this option has no effect on machines
                        started with the --no-cow option. Log files are not
                        removed
  -u, --user=USERNAME  halt virtual machine(s) owned by user USERNAME. By using
                        the special user name '-' any virtual machine can be
                        halted, regardless of its owner (administrative
                        privileges are required)

Miscellaneous:
$(help_option)
$(version_option)

END_OF_HELP

   exit "$status"
}


SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"

# Write to the vcommands log
log_write "$0 $*"


target_user=$USER_ID


# Get command line options
long_opts="help,quick,remove-fs,user:,version"
short_opts="qru:"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      --help)
         usage 0
         ;;
      -q|--quick)
         quick_mode=1
         ;;
      -r|--remove-fs)
         remove_fs=1
         ;;
      -u|--user)
         target_user=$2
         shift
         if [ "$target_user" = "-" ]; then
            unset target_user
         elif ! id "$target_user" > /dev/null 2>&1; then
            echo 1>&2 "$SCRIPTNAME: $target_user: User does not exist"
            usage 1
         fi
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

# Check whether virtual machine name is missing
if [ $# -eq 0 ]; then
   echo 1>&2 "$SCRIPTNAME: Missing machine name"
   usage 1
fi

# Non-option arguments are machine names
vhosts=( "$@" )
validate_hostnames "${vhosts[@]}"


# Virtual machine filesystem cannot be removed in quick mode because the
# machine may write files during shutdown.
if [ -n "$remove_fs" ] && [ -n "$quick_mode" ]; then
   echo 1>&2 "$SCRIPTNAME: Filesystem cannot be removed in quick mode"
   exit 1
fi


for vhost in "${vhosts[@]}"; do
   if ! get_vhost_info_by_name "$target_user" "$vhost"; then
      echo -n 1>&2 "$SCRIPTNAME: no virtual machine named '$vhost' exists"
      [ -n "$target_user" ] && echo " for user $target_user." || echo "."
      exit 1
   fi

   echo -e -n "Halting '$vhost' (PID ${vhost_info[pid]}) owned by $target_user\
 [                         ]\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"

   # Old method uses CTRL-ALT-DEL. This yields the error
   #   harddog_open - run_helper failed, errno = -2
   # and subsequently reboots (as opposed to powering off.)
   #"$NETKIT_HOME/bin/uml_mconsole" "${vhost_info[mconsole]}" cad > /dev/null

   # TODO: Try to use the old method - it uses /sbin/shutdown and is safer and
   # quicker. Alternatively, use vcommand with shutdown -h now.
   # New method uses the Magic SysRq key in the REISUO combination (R is not
   # included because there is no X server).
   # This method is not perfect; the timings required are rough estimates. The
   # system will return "OK" to uml_mconsole upon a valid command being sent,
   # NOT when the command has completed. e and i cannot be expected to finish
   # in the time given by the delay. s, u, and o are almost instant.

   # e: send a SIGTERM to all processes, except for init
   "$NETKIT_HOME/bin/uml_mconsole" "${vhost_info[mconsole]}" sysrq e > /dev/null 2>&1
   echo -n "."
   sleep 2

   # i: send a SIGKILL to all processes, except for init
   "$NETKIT_HOME/bin/uml_mconsole" "${vhost_info[mconsole]}" sysrq i > /dev/null 2>&1
   echo -n "."
   sleep 2

   # s: attempt to sync all mounted filesystems
   "$NETKIT_HOME/bin/uml_mconsole" "${vhost_info[mconsole]}" sysrq s > /dev/null 2>&1
   echo -n "."
   sleep 0.2

   # u: attempt to remount all mounted filesystems read-only
   "$NETKIT_HOME/bin/uml_mconsole" "${vhost_info[mconsole]}" sysrq u > /dev/null 2>&1
   echo -n "."
   sleep 0.2

   # o: shut the system off (if configured and supported)
   "$NETKIT_HOME/bin/uml_mconsole" "${vhost_info[mconsole]}" sysrq o > /dev/null 2>&1
   echo -n "."

   if [ -z "$quick_mode" ]; then
      for _ in {1..21}; do
         get_machine_state "$target_user" "$vhost" || break
         sleep 1
         echo -n "."
      done

      echo

      # If machine is still up
      if get_machine_state "$target_user" "$vhost"; then
         echo 1>&2 "$SCRIPTNAME: could not shut down '$vhost'."
      else
         # Remove filesystem (.disk file)
         [ -n "$remove_fs" ] && [ -n "${vhost_info[disk]}" ] && rm --verbose "${vhost_info[disk]}"
      fi
   fi
done
