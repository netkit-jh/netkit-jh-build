#!/usr/bin/env bash

#     Copyright 2002-2009 Stefano Pettini, Fabio Ricci, Massimo Rimondini
#     Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This script can be used to crash a Netkit lab. It also takes care of removing
# .disk files, so that the lab can be cleanly restarted.


###############################################################################
# Write lcrash's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... [MACHINE]..."
}


###############################################################################
# Write lcrash's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Crash the virtual machines of a Netkit lab.
Crashing corresponds to hardly unplugging their power cord, which is very fast
but at the same time may cause filesystem inconsistencies inside virtual
machines. Depending on the command line being used, it is possible to crash
only a subset of the virtual machines that make up the lab.

  -d DIRECTORY        crash the lab inside DIRECTORY. By default, the lab in
                        the current directory is crashed
  -F, --keep-fs       avoid deleting virtual machines filesystems. This is
                        useful when virtual machines are to be restarted while
                        preserving filesystem contents. By default, all the
                        filesystems are deleted after crashing the
                        corresponding virtual machine. Notice that, regardless
                        of this option, the model filesystem is never deleted
  -k, --kill          crash virtual machines by simply killing their processes.
                        The default setting is to first try crashing virtual
                        machines by sending them a special message via their
                        mconsole socket. If such an attempt fails, the command
                        reverts to killing processes. If the mconsole method
                        happens to fail too often, this option may result in a
                        speedup of the crash process. Otherwise, it is advised
                        to rely on the default setting, as using the mconsole
                        is generally faster
  -l, --list          show a list of running virtual machines after crashing
                        the lab.
  -q, --quick         disable checking whether virtual machines have actually
                        crashed. This results in a faster crash process, but
                        may cause some processes to hang. If this happens, try
                        crashing again without using this option or use vclean.

Miscellaneous:
$(help_option)
$(version_option)

If one or more MACHINEs are passed on the command line, then only those
machines will be crashed (and their filesystems deleted, if asked to). If any
of the MACHINE names are invalid (i.e., it does not correspond to a virtual
machine of the lab), it will simply be skipped.

END_OF_HELP

   exit "$status"
}


SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"
# shellcheck source=./lcommon
. "$NETKIT_HOME/bin/lcommon"

# Write to the vcommands log
log_write "$0 $*"


# Get command line options
long_opts="help,version,keep-fs,kill,list,quick"
short_opts="d:Fklq"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      -d)
         lab_directory=$(readlink --canonicalize-missing "$2")
         shift
         ;;
      --help)
         usage 0
         ;;
      -F|--keep-fs)
         keep_fs=1
         ;;
      -k|--kill)
         kill_mode=1
         ;;
      -l|--list)
         list_vhosts=1
         ;;
      -q|--quick)
         quick_mode=1
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

# Non-option arguments are machine names
lab_vhosts=( "$@" )
validate_hostnames "${lab_vhosts[@]}"


# If no lab directory has been given, assume current directory
lab_directory=${lab_directory:-$PWD}

# Check that the lab directory exists
if [ ! -d "$lab_directory" ]; then
   echo 1>&2 "$SCRIPTNAME: $lab_directory: No such directory"
   exit 1
fi


# Print lab information
bold_print "========================== Crashing lab ========================="
lab_welcome "$lab_directory"
bold_print "================================================================="

# Crash virtual machines
lab_crash "$quick_mode" "$lab_directory" "$keep_fs" "$kill_mode"
bold_print "Lab has been crashed."
bold_print "================================================================="

# Show a list of running virtual machines, if asked to
[ -n "$list_vhosts" ] && vlist
