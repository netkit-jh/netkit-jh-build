#!/usr/bin/env bash

#     Copyright 2020-2021 Adam Bromiley, Joshua Hawking - Warwick Manufacturing
#     Group, University of Warwick.
#     Copyright 2002-2009 Stefano Pettini, Fabio Ricci, Massimo Rimondini
#     Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This script can be used to gracefully halt a Netkit lab. If asked to, it
# also removes .disk files.


###############################################################################
# Write lhalt's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... [MACHINE]..."
}


###############################################################################
# Write lhalt's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Gracefully shut down the virtual machines of a Netkit lab.
Halting instead of crashing is much slower but preserves virtual machines
filesystem integrity. Optionally, this command also deletes virtual machines
filesystems. Depending on the command line being used, it is possible to halt
only a subset of the virtual machines that make up the lab.

  -d DIRECTORY        halt the lab inside DIRECTORY. By default, the lab in
                        the current directory is halted
  -l, --list          show a list of running virtual machines after halting the
                        lab
  -q, --quick         disable checking whether virtual machines have properly
                        shut down. This quickens the halt process, but no
                        warnings are raised if a virtual machine is unable to
                        shut down. It cannot be used together
                        with -r
  -r, --remove-fs     delete virtual machines filesystems after halting them.
                      This never impacts the model filesystem. This option
                      cannot be used together with -q

Miscellaneous:
$(help_option)
$(version_option)

If one or more MACHINEs are passed on the command line, then only those
machines will be halted (and their filesystems deleted, if asked to). If any
of the MACHINE names is invalid (i.e., it does not correspond to a virtual
machine of the lab), it will simply be skipped.

END_OF_HELP

   exit "$status"
}


SCRIPTNAME=$(basename -- "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"
# shellcheck source=./lcommon
. "$NETKIT_HOME/bin/lcommon"

# Write to the vcommands log
log_write "$0 $*"


# Get command line options
long_opts="help,version,remove-fs,quick,list"
short_opts="d:lqr"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      -d)
         lab_directory=$(readlink --canonicalize-missing "$2")
         shift
         ;;
      --help)
         usage 0
         ;;
      -r|--remove-fs)
         remove_filesystem=1
         ;;
      -l|--list)
         list_vhosts=1
         ;;
      -q|--quick)
         quick_mode=1
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done
   
# Non-option arguments are machine names
lab_vhosts=( "$@" )
validate_hostnames "${lab_vhosts[@]}"


# If no lab directory has been given, assume current directory
lab_directory=${lab_directory:-$PWD}

# Check that the lab directory exists
if [ ! -d "$lab_directory" ]; then
   echo 1>&2 "$SCRIPTNAME: $lab_directory: Directory does not exist"
   exit 1
fi

# Filesystem cannot be removed if we are working in quick mode
if [ -n "$remove_filesystem" ] && [ -z "$quick_mode" ]; then
   echo 1>&2 "$SCRIPTNAME: Filesystems cannot be removed (-r) when working in quick mode (-q)"
   exit 1
fi


# Print lab information
bold_print "======================== Halting lab ============================"
lab_welcome "$lab_directory"
bold_print "================================================================="

# Halt virtual machines
get_lab_vhosts "$lab_directory"

for vhost in "${lab_vhosts[@]}"; do
   bold_print "Halting '$vhost'... "
   vhalt ${quick_mode:+"--quick"} ${remove_filesystem:+"--remove-fs"} "$vhost" && rm --force "$lab_directory/$vhost.ready"
done

bold_print "Removing readyfor.test..."
rm --force "$lab_directory/readyfor.test"
bold_print "Lab has been halted."
bold_print "================================================================="

# Show a list of running virtual machines, if asked to
[ -n "$list_vhosts" ] && vlist
