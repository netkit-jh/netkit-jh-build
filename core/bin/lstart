#!/usr/bin/env bash

#     Copyright 2020-2022 Billy Bromell, Adam Bromiley, Joseph Bunce, Joshua
#     Hawking, Kunal Shah - Warwick Manufacturing Group, University of Warwick.
#     Copyright 2002-2009 Stefano Pettini, Fabio Ricci, Massimo Rimondini
#     Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This script can be used to start a Netkit lab or a subportion of it.


###############################################################################
# Write lstart/ltest's usage line to standard output.
# Usage:
#   usage_line
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... [MACHINE]..."
}


###############################################################################
# Write lstart/ltest's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
###############################################################################
usage() {
   local status=$1

   local action=${SCRIPTNAME:1}

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   usage_line

   echo "${action^} a Netkit lab."

   cat << END_OF_HELP
It is possible to start up the whole lab or just some of the virtual machines
that compose it.
  -d DIR              $action the lab located inside DIR. By default, the
                        process takes place in the current directory
  -F, --force-lab     by default, Netkit refuses to start a lab in a directory
                        that has neither a lab.conf nor a lab.dep file. Enable
                        this option if you really want to start a lab without
                        any of those two
END_OF_HELP

   if [ "$SCRIPTNAME" != "ltest" ]; then
      cat << END_OF_HELP
  -f, --fast          do not wait for a virtual machine to complete the boot
                        phase before starting the next one. This option has no
                        effect when parallel startup is being used, and is not
                        impacted by the use of the -p option
END_OF_HELP
   fi

   cat << END_OF_HELP
  --tmux-attached     run each VM in tmux and start a terminal attached to the
                        tmux session. This is the same as VM_CON0=tmux and
                        TMUX_OPEN_TERMS=yes in netkit.conf
  --tmux-detached     run each VM in a tmux session without opening terminals.
                        This is the same as VM_CON0=tmux and TMUX_OPEN_TERMS=no
                        in netkit.conf
  -l, --list          show a list of running virtual machines after starting up
                        the lab.
  -o, --pass=ARG      pass ARG unaltered to vstart. This will affect all the
                        (newly started) virtual machines of the lab.
  -p[VALUE]           enable parallel startup, even if a lab.dep file does not
                        exist inside the lab directory. If a VALUE is provided,
                        it determines the maximum number of virtual machines
                        that can be launched simultaneously. VALUE must be a
                        positive integer. A VALUE of 0 corresponds to setting
                        no limit. This option is incompatible with -s. Default
                        value is $MAX_SIMULTANEOUS_VMS.
                        Note that this is an optional argument; when
                        specifying VALUE it must be attached to the short
                        option (-pVALUE)
  -s, --sequential    disable parallel startup, even if a lab.dep file is found
                        to exist inside the lab directory. This option
                        conflicts with -p
  -w, --wait=SECONDS  wait the specified amount of time before launching the
                        next virtual machine. Of course, this is only useful
                        when using either parallel startup or the -f option
END_OF_HELP

   if [ "$SCRIPTNAME" = "ltest" ]; then
      cat << END_OF_HELP

ltest-specific options:
      --delay=NUMBER[SUFFIX]  wait the specified amount of time after the lab
                               starts before invoking test scripts. This can be
                               used to allow the lab to settle. By default,
                               ltest does not wait. NUMBER and, optionally,
                               SUFFIX must be valid to the GNU sleep command
END_OF_HELP
   fi

   cat << END_OF_HELP

Miscellaneous:
$(help_option)
  -v, --verbose       show details about virtual machines while starting them
$(version_option)

Notice: using parallel startup requires the 'make' utility to be properly
installed.

By default, all the virtual machines of the lab are started. If one or more
MACHINEs are passed on the command line, then only those machines will be
actually started. If any of the MACHINE names is invalid (i.e., it does not
correspond to a virtual machine of the lab), it will simply be skipped.

END_OF_HELP

   exit "$status"
}


###############################################################################
# Start virtual machines of a Netkit lab sequentially.
# Usage:
#   lab_start FAST_MODE TEST_DELAY VERBOSE MAKEFILE DIR [PASSTHROUGH]...
# Globals:
#   lab_vhosts
# Arguments:
#   $1 - set to 1 for fast mode, empty string otherwise
#   $2 - test delay as an argument to sleep, empty string otherwise
#   $3 - set to 1 for verbose mode, empty string otherwise
#   $4 - used internally when lstart is invoked with Make
#   $5 - lab directory
#  ... - array of options to pass through into vstart
###############################################################################
lab_start() {
   local fast_mode=$1
   local test_delay=$2
   local verbose=$3
   local makefile=$4
   local lab_dir=$5
   local passthrough_args=( "${@:6}" )

   local vhost

   get_lab_vhosts "$lab_dir"

   if [ "${#lab_vhosts[@]}" -eq 0 ]; then
      echo 1>&2 "Warning: there are no virtual machines to be started."
      return
   fi

   [ -n "$test_delay" ] && passthrough_args+=( "--test=$test_delay" )

   for vhost in "${lab_vhosts[@]}"; do
      single_lab_vhost_start "$fast_mode" "$verbose" "$lab_dir" "$vhost" "${passthrough_args[@]}"
   done

   # The readyfor.test file should not be created if lstart has been invoked
   # with the --makefile option (launch a single machine and exit).
   [ -n "$test_delay" ] && [ -z "$makefile" ] && : > "$lab_dir/readyfor.test"
}


###############################################################################
# Start a single virtual machine within a lab.
# Usage:
#   single_lab_vhost_start FAST_MODE VERBOSE DIR MACHINE [PASSTHROUGH]...
# Arguments:
#   $1 - set to 1 for fast mode, empty string otherwise
#   $2 - set to 1 for verbose mode, empty string otherwise
#   $3 - lab directory
#   $4 - machine to start up
#  ... - options to passthrough to vstart (appended on)
###############################################################################
single_lab_vhost_start() {
   local fast_mode=$1
   local verbose=$2
   local lab_dir=$3
   local vhost=$4
   local passthrough_args=( "${@:5}" )

   local configuration opt value

   # Specify host lab directory, and place filesystem inside it
   local vstart_args=(
      "--hostlab" "$lab_dir"
      "--filesystem" "$lab_dir/$vhost.disk"
      ${verbose:+"--verbose"}
   )

   # Generate vstart argument list
   if [ -e "$lab_dir/lab.conf" ]; then
      while IFS= read -r configuration; do
         # The [][] is ][ inside a bracket expression to match an opening or
         # closing square bracket.
         # NOTE: we assume hostname_regex does not allow square brackets, so
         # the option string is the first instance of them.
         opt=$(awk -F"[][]" '{ print $2 }' <<< "$configuration")

         # Everything after the first '='
         if str_contains "$configuration" "="; then
            value=${configuration#*=}
         else
            unset value
         fi

         # If option is all-digit, it must be a network interface specification
         [[ "$opt" =~ ^([0-9]|[1-9][0-9]+)$ ]] && opt="eth$opt"

         if [ "${#opt}" -eq 1 ]; then
            vstart_args+=( "-$opt" )
         else
            vstart_args+=( "--$opt" )
         fi

         # NOTE: if vstart is ever changed to have an option with an optional
         # argument (denoted with '::' in the option string), an exception when
         # appending the argument must be made (an '=' is required for long
         # options, no delimiter for short ones).
         [ -n "${value+x}" ] && vstart_args+=( "$value" )
      done < <(grep -- "^$vhost\[.*\]" "$lab_dir/lab.conf")
   fi

   # Remove .ready file, if existing
   rm --force -- "$lab_dir/$vhost.ready"

   if ! "$NETKIT_HOME/bin/vstart" "${vstart_args[@]}" "${passthrough_args[@]}" -- "$vhost"; then
      echo 2>&1 "Error while starting virtual machine '$vhost'"
      exit 1
   fi

   # Wait for virtual host startup script to create .ready file
   if [ -z "$fast_mode" ]; then
      while [ ! -e "$lab_dir/$vhost.ready" ]; do
         sleep 1
      done

      rm --force -- "$lab_dir/$vhost.ready"
   fi

   # Wait for a specified amount of time before returning
   [ "$GRACE_TIME" -gt 0 ] && sleep -- "$GRACE_TIME"
}


###############################################################################
# Start virtual machines of a Netkit lab simultaneously with GNU Make.
# Usage:
#   lab_start_parallel TEST_DELAY VERBOSE DIR [PASSTHROUGH]...
# Globals:
#   lab_vhosts
# Arguments:
#   $1 - set to non-zero length string for test mode, empty string otherwise
#   $2 - test delay as an argument to sleep, empty string otherwise
#   $3 - lab directory
#  ... - array of options to pass through into vstart
###############################################################################
lab_start_parallel() {
   local test_delay=$1
   local verbose=$2
   local lab_dir=$3
   local passthrough_args=( "${@:4}" )

   local lstart_args arg
   local lstart_cmd escaped_lstart_cmd
   local tab makefile_contents

   get_lab_vhosts "$lab_dir"

   if [ "${#lab_vhosts[@]}" -eq 0 ]; then
      echo 1>&2 "Warning: there are no virtual machines to be started."
      return
   fi

   # Pass "passthrough" options on to the second invocation of lstart/ltest
   [ -n "$verbose" ] && lstart_args+=( "--verbose" )

   for arg in "${passthrough_args[@]}"; do
      lstart_args+=( "--pass" "$arg" )
   done

   # Pass testmode along subsequent invocations of this script
   if [ -n "$test_delay" ]; then
      program_name="$NETKIT_HOME/bin/ltest"
      lstart_args+=( "--delay=$test_delay" )
   else
      program_name="$NETKIT_HOME/bin/lstart"
   fi

   # The make utility expects an empty argument to -j when infinitely many jobs
   # should be used.
   [ "$MAX_SIMULTANEOUS_VMS" -eq 0 ] && unset MAX_SIMULTANEOUS_VMS


   lstart_cmd=( "$program_name" "-d" "$lab_dir" "--makefile" "${lstart_args[@]}" )

   # We expand this array with the Q operator when writing to the Makefile.
   # This ensures escaping sufficient for reuse in a shell command.
   escaped_lstart_cmd=${lstart_cmd[*]@Q}

   # Make requires all dollar signs (whether quoted or not) to be escaped with
   # a second dollar sign.
   escaped_lstart_cmd=${escaped_lstart_cmd//$/\$$}

   # Labs are started in parallel with GNU Make, which automatically handles
   # lab.dep (which is formatted as Makefile targets).
   #
   # The script is invoked with each VM name as a target on the command line,
   # which directs Make to run:
   #   lstart [...] --makefile <machine>
   # for each machine. $* is a GNU Make automatic variable that expands to the
   # % (stem) in the target. In this usage it will expand to the machine name.
   #
   # The contents of lab.dep is copied in if it exists, which creates a target
   # for each machine with dependencies ("prerequisities" in Make).
   # NOTE: The dummy target is required, which has the unwanted side-effect
   # that machines cannot be named "dummy-prerequisite-to-force-remaking".
   #
   # The Makefile must use Bash as the shell for correct handling of ANSI-C
   # expansions present after the previous Q-operator array expansion.
   tab=$(printf '\t')
   IFS='' read -rd '' makefile_contents << EOF
SHELL := /bin/bash

%: dummy-prerequisite-to-force-remaking
${tab}[ '\$*' != "lab.dep" ] && $escaped_lstart_cmd '\$*'

dummy-prerequisite-to-force-remaking:
${tab}# Dummy line. Unuseful, yet necessary

$(cat "$lab_dir/lab.dep" 2> /dev/null)
EOF

   # Read the Makefile from stdin without implicit rules, and hide the output. It
   # it parallelised to the MAX_SIMULTANEOUS_VMS configuration option.
   make --ignore-errors --no-builtin-rules --silent \
      --directory "$lab_dir" \
      --file - \
      --jobs ${MAX_SIMULTANEOUS_VMS:+"$MAX_SIMULTANEOUS_VMS"} \
      -- \
      "${lab_vhosts[@]}" \
      <<< "$makefile_contents"


   # Signal that every machine is ready for testing once booted.
   [ -n "$test_delay" ] && : > "$lab_dir/readyfor.test"
}


###############################################################################
# Check if there is a new release or prerelease Netkit-JH version on the
# GitHub repository and provide a dialog and link if so.
# Usage:
#   new_version_check
###############################################################################
new_version_check() {
   local last_update_check next_update_check
   local current_date
   local latest_release_version latest_prerelease_version
   local latest_release_version_file latest_prerelease_version_file
   local current_version

   latest_release_version_file="$NETKIT_HOME/.latest-release-version"
   latest_prerelease_version_file="$NETKIT_HOME/.latest-prerelease-version"

   # Check whether we have polled in the last UPDATE_CHECK_PERIOD days
   if [ -f "$NETKIT_HOME/.last-update-check" ]; then
      last_update_check=$(cat -- "$NETKIT_HOME/.last-update-check")
   else
      last_update_check=0
   fi

   # Next check = date of the last one + UPDATE_CHECK_PERIOD (in seconds)
   next_update_check=$((last_update_check + UPDATE_CHECK_PERIOD * 86400))

   current_date=$(date +%s)

   if [ "$current_date" -gt "$next_update_check" ] ||
      [ ! -f "$latest_release_version_file" ] ||
      [ ! -f "$latest_prerelease_version_file" ]; then

      # We haven't checked in the past UPDATE_CHECK_PERIOD days or we have
      # never checked (no version files) - check now.
      echo "$current_date" > "$NETKIT_HOME/.last-update-check"

      latest_release_version=$(get_latest_release_version)
      latest_prerelease_version=$(get_latest_prerelease_version)

      echo "$latest_release_version" > "$latest_release_version_file"
      echo "$latest_prerelease_version" > "$latest_prerelease_version_file"
   else
      # We have checked in the past UPDATE_CHECK_PERIOD days and the version
      # files both exist - get the latest versions locally.
      latest_release_version=$(cat -- "$latest_release_version_file")
      latest_prerelease_version=$(cat -- "$latest_prerelease_version_file")
   fi

   current_version=$(sed -- "s/Netkit version //g" "$NETKIT_HOME/netkit-version")

   compare_versions "$current_version" "$latest_release_version"
   if [ "$?" -eq 2 ]; then
      # If the current version is older than the latest stable release
      bold_print "A new version ($latest_release_version) of Netkit-JH is available at:"
      bold_print "   https://github.com/netkit-jh/netkit-jh-build/releases/$latest_release_version"
   fi

   compare_versions "$current_version" "$latest_prerelease_version"
   if [ "$?" -eq 2 ]; then
      # If the current version is older than the latest pre-release version
      compare_versions "$latest_release_version" "$latest_prerelease_version"
      if [ "$?" -eq 2 ]; then
         # Latest pre-release version is newer than the latest stable release
         bold_print "A new pre-release ($latest_prerelease_version) of Netkit-JH is available at:"
         bold_print "   https://github.com/netkit-jh/netkit-jh-build/releases/$latest_prerelease_version"
         bold_print "Warning: pre-release versions may be unstable."
      fi
   fi
}


###############################################################################
# Get the latest Netkit-JH stable release version number from GitHub
# Usage:
#   get_latest_release_version
###############################################################################
get_latest_release_version() {
   curl --silent "https://api.github.com/repos/netkit-jh/netkit-jh-build/releases" |
      jq --raw-output ".[] | select(.prerelease==false) | .tag_name" |
      sed '/-/!{s/$/_/}' |
      sort --version-sort |
      sed 's/_$//' |
      tail --lines 1
}


###############################################################################
# Get the latest Netkit-JH prerelease version number from GitHub
# Usage:
#   get_latest_prerelease_version
###############################################################################
get_latest_prerelease_version() {
   curl --silent "https://api.github.com/repos/netkit-jh/netkit-jh-build/releases" |
      jq --raw-output ".[] | select(.prerelease==true) | .tag_name" |
      sed '/-/!{s/$/_/}' |
      sort --version-sort |
      sed 's/_$//' |
      tail --lines 1
}


###############################################################################
# Compare semantic version numbers
# Usage:
#   compare_versions VERSION1 VERSION2
# Arguments:
#   $1 - version number
#   $2 - version number
# Returns:
#   0 when the versions are equal
#   1 if VERSION1 > VERSION2
#   2 if VERSION1 < VERSION2
###############################################################################
compare_versions() {
   local version1=$1
   local version2=$2

   # Return 0 if equal
   [ "$version1" = "$version2" ] && return 0

   # Get the latest semantic version
   latest_version=$(
      printf "%s\n%s\n" "$version1" "$version2" |
      sed '/-/!{s/$/_/}' |
      sort --version-sort |
      sed 's/_$//' |
      tail --lines 1
   )

   [ "$version1" = "$latest_version" ] && return 1 || return 2
}


# Ensure NETKIT_HOME is set
if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. -- "$NETKIT_HOME/bin/script_utils"
# shellcheck source=./lcommon
. -- "$NETKIT_HOME/bin/lcommon"

# Write to the vcommands log
log_write "$0 $*"


# Get command line options
long_opts="force-lab,help,list,makefile,pass:,sequential,tmux-attached,\
tmux-detached,verbose,version,wait:"
short_opts="d:Flo:p::svw:"

if [ "$SCRIPTNAME" = "lstart" ]; then
   long_opts+=",fast"
   short_opts+="f"
elif [ "$SCRIPTNAME" = "ltest" ]; then
   long_opts+=",delay:"
fi

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      -d)
         lab_dir=$(readlink --canonicalize-missing -- "$2")
         shift
         ;;
      --delay)
         test_delay=$2
         shift
         ;;
      -F|--force-lab)
         force_lab=1
         ;;
      -f|--fast)
         fast_mode=1
         ;;
      --help)
         usage 0
         ;;
      -l|--list)
         list_vhosts=1
         ;;
      --makefile)
         # This is a hidden option which is used by lstart/ltest itself when
         # parallel startup is enabled.
         makefile=1
         ;;
      -o|--pass)
         passthrough_opts+=( "$2" )
         shift
         ;;
      -p)
         parallelisation=$2
         shift

         # Argument is optional - it will be an empty string if omitted.
         case $parallelisation in
            "")
               # No argument means MAX_SIMULTAENEOUS_VMS is used
               ;;
            *[!0-9]*)
               warn "Argument to option '-p' must be a positive integer or 0"
               usage 1
               ;;
            *)
               MAX_SIMULTANEOUS_VMS=$parallelisation
               ;;
         esac

         parallel_mode=1
         unset sequential_mode
         ;;
      -s|--sequential)
         sequential_mode=1
         unset parallel_mode
         ;;
      --tmux-attached)
         passthrough_opts+=( "$1" )
         ;;
      --tmux-detached)
         passthrough_opts+=( "$1" )
         ;;
      -v|--verbose)
         verbose=1
         ;;
      --version)
         show_version
         exit 0
         ;;
      -w|--wait)
         case $2 in
            ""|*[!0-9]*)
               warn "Argument to option '-w' must be a positive integer or 0"
               usage 1
               ;;
            *)
               GRACE_TIME=$2
               shift
               ;;
         esac
         ;;
      --)
         shift
         break
         ;;
      *)
         warn "Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

# Non-option arguments are machine names
lab_vhosts=( "$@" )
validate_hostnames "${lab_vhosts[@]}"


# If no lab directory has been given, assume current directory
: "${lab_dir:=$PWD}"

# Check that the lab directory exists
if [ ! -d "$lab_dir" ]; then
   warn "$lab_dir: No such directory"
   exit 1
fi


# Check whether parallel startup and -f are being used together
if [ -f "$lab_dir/lab.dep" ] && [ -n "$fast_mode" ] && [ -z "$sequential_mode" ]; then
   warn "Fast mode is ignored when using parallel startup"
fi


# Check if the script has been invoked for testing
if [ "$SCRIPTNAME" = "ltest" ]; then
   : "${test_delay:="0"}"

   # Default console is "none" for ltest. By prepending, we allow other
   # passthrough options to override this.
   passthrough_opts=( "--con0" "none" "--con1" "none" "${passthrough_opts[@]}" )

   # Hide .disk files when running tests
   passthrough_opts+=( "--hide-disk-file" )
fi


# Quickly start a virtual machine and exit, if asked to
if [ -n "$makefile" ]; then
   # Make sure to wait for .ready files to appear. Otherwise, no dependencies
   # would be satisfied!
   unset fast_mode
   lab_start "$fast_mode" "$test_delay" "$verbose" "$makefile" "$lab_dir" "${passthrough_opts[@]}"
   exit 0
fi


if [ ! -f "$lab_dir/lab.conf" ] && [ ! -f "$lab_dir/lab.dep" ] && [ -z "$force_lab" ]; then
   warn "This does not appear to be a lab directory. Use option '-F' to ignore this error"
   exit 1
fi


# Print lab information
if [ -n "$test_delay" ]; then
   print_divider "Testing lab"
else
   print_divider "Starting lab"
fi

lab_welcome "$lab_dir"
echo
bold_print "Having issues starting the lab? Run 'lclean' before running 'lstart'."

[ "$CHECK_FOR_UPDATES" = "yes" ] && new_version_check

print_divider


# Clean up the lab directory before starting
[ -n "$test_delay" ] && lab_clean "$verbose" "$lab_dir" > /dev/null


# Check whether a lab.dep file exists. If so, enable parallel startup of
# virtual machines.
if [ -z "$sequential_mode" ] && [ -f "$lab_dir/lab.dep" ] || [ -n "$parallel_mode" ]; then
   # Use parallel startup if not forced to be sequential and either lab.dep or
   # parallel mode is enabled.
   bold_print "You chose to use parallel startup."
   lab_start_parallel "$test_delay" "$verbose" "$lab_dir" "${passthrough_opts[@]}"
else
   # Use sequential startup

   # If lab_vhosts is not empty, then lab_start takes care of starting only the
   # machines listed in lab_vhosts; those appearing in lab_vhosts but that are
   # not part in the lab will simply be skipped.
   lab_start "$fast_mode" "$test_delay" "$verbose" "$makefile" "$lab_dir" "${passthrough_opts[@]}"
fi


echo
bold_print "The lab has been started."
print_divider


if [ -n "$test_delay" ]; then
   # Wait for the test to finish
   vhost_count=${#lab_vhosts[@]}

   tests_completed=0
   while [ "$tests_completed" -lt "$vhost_count" ]; do
      testdone_files=( "$lab_dir/"*.testdone )

      # Test avoids the need for shopt -s nullglob
      [ -f "${testdone_files[0]}" ] && tests_completed=${#testdone_files[@]}
      sleep 1
   done

   # Test finished, now crash the lab
   bold_print "Stopping lab..."
   lab_crash "$verbose" "" "$lab_dir" "" "" > /dev/null
   lab_clean "$verbose" "$lab_dir" > /dev/null
   bold_print "Test completed."
fi

# Show a list of running virtual machines, if asked to
[ -n "$list_vhosts" ] && "$NETKIT_HOME/bin/vlist"
