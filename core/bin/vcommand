#!/usr/bin/env bash

#     Copyright 2021 Billy Bromell, Adam Bromiley, Joshua Hawking - Warwick
#     Manufacturing Group, University of Warwick.
#     Copyright 2002-2009 Maurizio Patrignani, Maurizio Pizzonia, Fabio Ricci,
#     Massimo Rimondini - Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.


###############################################################################
# Write vcommand's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... MACHINE [COMMAND]"
}


###############################################################################
# Write vcommand's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Send a COMMAND to MACHINE through its tmux session. The COMMAND is sent as a
string literal to the tmux session with send-keys, making the user responsible
for relevant quoting and escaping.

  -n, --timeout=N     set how long to wait before grabbing the command output

Miscellaneous:
$(help_option)
  -v, --verbose       display debugging messages
$(version_option)

END_OF_HELP

   exit "$status"
}


###############################################################################
# Enter command to tmux session via send-keys and return the output to standard
# output.
# Usage:
#   tmux_command VERBOSE SESSION TIMEOUT [COMMAND]
# Globals:
#   None
# Arguments:
#   $1 - set to 1 for verbose mode, empty string otherwise
#   $2 - tmux session name (machine hostname)
#   $3 - seconds to wait after sending the command to tmux before reading the
#        output.
#   $4 - command string to send to the tmux session
# Returns:
#   None
# Example:
#   None
###############################################################################
tmux_command() {
   local verbose=$1
   local session=$2
   local timeout=$3
   local cmd=$4

   local cmd_uuid

   local target="$session:netkit-vhost.0"

   if ! tmux -L netkit has-session -t "$session" > /dev/null 2>&1; then
      echo 1>&2 "tmux session does not exist for this machine"
      exit 1
   fi

   # Generate UUID to work out where the command starts
   cmd_uuid=$(cat /proc/sys/kernel/random/uuid)

   if [ -n "$verbose" ]; then
      echo "Command UUID: $cmd_uuid"
      echo "Command: $cmd"
   fi

   # Run command prefixed with a NOP of the UUID for output harvesting
   tmux -L netkit send-keys -t "$target" ": $cmd_uuid; $cmd" Enter

   # Wait for output to be generated
   sleep "$timeout"

   # Get output buffer
   tmux_buffer=$(tmux -L netkit capture-pane -t "$target" -S - -p)

   [ -n "$verbose" ] && printf "Buffer after command:\n%s\n" "$tmux_buffer"

   # Print all lines after the final match of ": $cmd_uuid" and remove the last
   # line (which should the next shell prompt.)
   sed --quiet "/: $cmd_uuid/{n;h;b};H;\${x;p}" <<< "$tmux_buffer" | head --lines -1
}


SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"

# Write to the vcommands log
log_write "$0 $*"


command_timeout=1


# Get command line options
long_opts="command,help,timeout,verbose,version"
short_opts="c:n:v"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      --help)
         usage 0
         ;;
      -n|--timeout)
         command_timeout=$2
         shift
         ;;
      -v|--verbose)
         verbose=1
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

# Parse virtual machine name
if [ $# -eq 0 ]; then
   echo 1>&2 "$SCRIPTNAME: Missing machine name"
   usage 1
fi

vhost=$1
validate_hostnames "$vhost"

cmd=${*:2}


tmux_command "$verbose" "$vhost" "$command_timeout" "$cmd"
