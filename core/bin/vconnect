#!/usr/bin/env bash

SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"

# Allow nesting of tmux sessions
unset TMUX

###############################################################################
# Attach to a machine's tmux session in the current terminal.
# Usage:
#   tmux_connect MACHINE
# Globals:
#   None
# Arguments:
#   $1 - virtual machine name
# Returns:
#   None
# Example:
#   None
###############################################################################
tmux_connect() {
   tmux -L netkit attach -t="$1"
}

###############################################################################
# Open a new terminal window attached to a machine's tmux session.
# Usage:
#   open_terminal MACHINE
# Globals:
#   r- NETKIT_HOME
#   r- TERM_TYPE
# Arguments:
#   $1 - virtual machine name
# Returns:
#   None
# Example:
#   None
###############################################################################
open_terminal() {
   vm=$1

   case $TERM_TYPE in
      alacritty)     term_cmd=( "alacritty" "-e" );;
      kitty)         term_cmd=( "kitty" );;
      konsole)       term_cmd=( "konsole" "--nofork" "-e" );;
      konsole-tab)   term_cmd=( "$NETKIT_HOME/bin/konsole-tabs.sh" "-e" );;
      xterm)         term_cmd=( "xterm" "-e" );;
      wsl)           term_cmd=( "cmd.exe" "/c" "start" "wsl.exe" );;
      wt)            term_cmd=( "cmd.exe" "/c" "wt.exe" "-p" "netkit" "wsl.exe" );;
      *)
         echo "Terminal '$TERM_TYPE' not supported, defaulting to xterm."
         term_cmd=( "xterm" "-e" );;
   esac
   
   nohup "${term_cmd[@]}" tmux -L netkit attach -t "$vm" > /dev/null 2>&1 &
}


###############################################################################
# Write vconnect's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]..."
}


###############################################################################
# Write vconnect's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Connect to the tmux session of a Netkit virtual machine.

  -l, --list          list all running sessions on the tmux 'netkit' server
  -t, --terminal      connect to the tmux session from a new terminal. The
                        terminal opened is dependent on the TERM_TYPE set in
                        netkit.conf
  -m, --machine=MACHINE  name of the machine to connect to
  -r, --retry-count=N  number of times to attempt to connect to a tmux session
  -n, --interval=N    sleep duration between attempts to connect to a tmux
                        session

Miscellaneous:
$(help_option)
$(version_option)

END_OF_HELP

   exit "$status"
}


# Get command line options
LONG_OPTS="interval:,list,machine:,retry-count,terminal"
SHORT_OPTS="lm:n:r:t"

if ! GETOPT_OPTS=$(getopt --name "$SCRIPTNAME" --options "$SHORT_OPTS" --longoptions "$LONG_OPTS" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

RETRY_COUNT=1
RETRY_INTERVAL=5

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$GETOPT_OPTS"

while true; do
   case $1 in
      --help)
         usage 0
         ;;
      -l|--list)
         LIST_ONLY=1
         ;;
      -m|--machine)
         MACHINE_NAME=$2
         shift
         ;;
      -n|--interval)
         RETRY_INTERVAL=$2
         shift
         ;;
      -r|--retry-count)
         RETRY_COUNT=$2
         shift
         ;;
      -t|--terminal)
         OPEN_TERM=1
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done


# Do not connect to the tmux session, just list available ones.
if [ -n "$LIST_ONLY" ]; then
   tmux -L netkit list-sessions
   exit 0
fi


echo -n "Connecting to '$MACHINE_NAME'."

# Test that the tmux session exists RETRY_COUNT number of times.
ATTEMPTS=0
while ! tmux -L netkit has-session -t="$MACHINE_NAME" 2> /dev/null; do
   ATTEMPTS=$((ATTEMPTS + 1))

   if [ "$ATTEMPTS" -eq "$RETRY_COUNT" ]; then
      echo
      echo 1>&2 "Could not connect to '$MACHINE_NAME'."
      exit 1
   fi

   sleep "$RETRY_INTERVAL"
   echo -n "."
done

if [ -n "$OPEN_TERM" ]; then
   open_terminal "$MACHINE_NAME"
else
   tmux_connect "$MACHINE_NAME"
fi
