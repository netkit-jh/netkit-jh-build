#!/usr/bin/env bash

#     Copyright 2021 Billy Bromell, Adam Bromiley, Mohammed Habib, Joshua
#     Hawking - Warwick Manufacturing Group, University of Warwick.
#     Copyright 2002-2009 Maurizio Patrignani, Maurizio Pizzonia, Fabio Ricci,
#     Massimo Rimondini - Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.


###############################################################################
# Write vconnect's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... MACHINE"
}


###############################################################################
# Write vconnect's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Connect to the tmux session of a Netkit MACHINE.

  -l, --list          list all running sessions on the tmux 'netkit' server
  -t, --terminal      connect to the tmux session from a new terminal. The
                        terminal opened is dependent on the TERM_TYPE set in
                        netkit.conf
  -r, --retry-count=N  number of times to attempt to connect to a tmux session
  -n, --interval=N    sleep duration between attempts to connect to a tmux
                        session

Miscellaneous:
$(help_option)
$(version_option)

END_OF_HELP

   exit "$status"
}


###############################################################################
# Attach to a machine's tmux session in the current terminal.
# Usage:
#   tmux_connect MACHINE
# Globals:
#   None
# Arguments:
#   $1 - virtual machine name
# Returns:
#   None
# Example:
#   None
###############################################################################
tmux_connect() {
   tmux -L netkit attach -t="$1"
}

###############################################################################
# Open a new terminal window attached to a machine's tmux session.
# Usage:
#   open_terminal MACHINE
# Globals:
#   r- NETKIT_HOME
#   r- TERM_TYPE
# Arguments:
#   $1 - virtual machine name
# Returns:
#   None
# Example:
#   None
###############################################################################
open_terminal() {
   local vhost=$1

   local term_cmd

   case $TERM_TYPE in
      alacritty)     term_cmd=( "alacritty" "--command" );;
      kitty)         term_cmd=( "kitty" );;
      konsole)       term_cmd=( "konsole" "--nofork" "-e" );;
      konsole-tab)   term_cmd=( "$NETKIT_HOME/bin/konsole-tabs.sh" "-e" );;
      wsl)           term_cmd=( "cmd.exe" "/c" "start" "wsl.exe" );;
      wt)            term_cmd=( "cmd.exe" "/c" "wt.exe" "--profile" "netkit" "wsl.exe" );;
      xterm)         term_cmd=( "xterm" "-e" );;
      *)
         echo "Terminal '$TERM_TYPE' not supported, defaulting to xterm."
         term_cmd=( "xterm" "-e" );;
   esac
   
   nohup "${term_cmd[@]}" tmux -L netkit attach -t "$vhost" > /dev/null 2>&1 &
}


SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"


retry_count=1
retry_interval=5

# Allow nesting of tmux sessions
unset TMUX


# Get command line options
long_opts="help,interval:,list,retry-count:,terminal,version"
short_opts="lm:n:r:t"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      --help)
         usage 0
         ;;
      -l|--list)
         list_only=1
         ;;
      -n|--interval)
         retry_interval=$2
         shift
         ;;
      -r|--retry-count)
         retry_count=$2
         shift
         ;;
      -t|--terminal)
         open_term=1
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done


# Do not connect to the tmux session, just list available ones.
if [ -n "$list_only" ]; then
   tmux -L netkit list-sessions
   exit 0
fi


# Parse virtual machine name
if [ $# -eq 0 ]; then
   echo 1>&2 "$SCRIPTNAME: Missing machine name"
   usage 1
elif [ $# -gt 1 ]; then
   echo 1>&2 "$SCRIPTNAME: Can only specify one machine"
   usage 1
fi

vhost=$1
validate_hostnames "$vhost"


echo -n "Connecting to '$vhost'."

# Test that the tmux session exists retry_count number of times.
attempts=0
while ! tmux -L netkit has-session -t="$vhost" 2> /dev/null; do
   ((++attempts))

   if [ "$attempts" -eq "$retry_count" ]; then
      echo ""
      echo 1>&2 "Could not connect to '$vhost'."
      exit 1
   fi

   sleep "$retry_interval"
   echo -n "."
done

echo ""

if [ -n "$open_term" ]; then
   open_terminal "$vhost"
else
   tmux_connect "$vhost"
fi
