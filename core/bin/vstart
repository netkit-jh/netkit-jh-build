#!/usr/bin/env bash

#     Copyright 2020-2021 Billy Bromell, Adam Bromiley, Joseph Bunce, Mohammed
#     Habib, Joshua Hawking - Warwick Manufacturing Group, University of
#     Warwick.
#     Copyright 2002-2009 Maurizio Patrignani, Maurizio Pizzonia, Fabio Ricci,
#     Massimo Rimondini - Computer Networks Research Group, Roma Tre
#     University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is the Netkit vstart script, which is used to start virtual machines
# with given parameters.


###############################################################################
# Write vstart's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... MACHINE"
}


###############################################################################
# Write vstart's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Start MACHINE with a given configuration.

You can use the following options to adjust the virtual machine parameters:
      --ethN=[DOMAIN]  equip virtual machine with a network interface ethN,
                        where N is a number between 0 and $((MAX_INTERFACES - 1)). DOMAIN is the
                        name of the collision domain the interface should be
                        connected to. Using an empty DOMAIN name (e.g.,
                        'eth0=') results in detaching the interface from a
                        running virtual machine.
                        Including a comma in DOMAIN defines a 'tap' interface.
                        This is a special socket that allows an external
                        to be reached in the virtual machine. A 'tap' interface
                        must be declared with the following syntax:
                          --ethX=DOMAIN,TAP_ADDR,GUEST_ADDR
                        where DOMAIN is a valid collision domain name,
                        TAP_ADDR is the IP address of the 'host side' of the
                        interface and GUEST_ADDR is the IP address of the
                        interface inside the virtual machine. TAP_ADDR and
                        GUEST_ADDR must be on the same /8 network. Machines can
                        share a 'tap' interface if one uses the same DOMAIN and
                        TAP_ADDR for them. If an interface on the same DOMAIN
                        with a different TAP_ADDR already exists, an error will
                        be thrown. Another interface with a TAP_ADDR within the
                        /8 subnet of another cannot be created; likewise, like
                        a regular collision domain, two machines using the same
                        'tap' interface cannot share an IP address (there will
                        be no explicit error for either of these scenarios.)
                        Notices:
                        - Using 'tap' interfaces requires administrative
                          privileges. This script will take care of asking you
                          for the root password when needed.
                        - TAP_ADDR is mandatory, but is only taken into account
                          when a 'tap' interface with such a collision domain
                          is first used.
                        - Tunnel configurations are not automatically removed
                          when halting machines: you should use the vclean
                          script for this purpose.
  -k, --kernel=FILE   use FILE as the UML kernel for the virtual machine. The
                        default kernel is:
                          $VM_KERNEL
  -M, --mem=MEM       give the virtual machine MEM MB of RAM. Allowed values
                        span from $MIN_MEM MB to $MAX_MEM MB, defaulting to $VM_MEMORY MB

Filesystem settings can be tuned by using the following options:
  -H, --no-hosthome   do not mount host filesystem inside the machine
      --mount=SRC,DST  mount SRC directory from the host to DST directory in
                        the virtual machine
  -m, --model-fs=FILE  use the specified filesystem image as a model for the
                        virtual machine. FILE will not be altered in any way
                        unless the --no-cow option is used. The default model
                        filesystem is:
                          $VM_MODEL_FS
  -f, --filesystem=FILE  use FILE as a filesystem for the machine. By default,
                          MACHINE.disk is used. Do not use this in conjunction
                          with --no-cow
  -D, --hide-disk-file  hide the virtual machine filesystem (.disk file). The
                         virtual machine will continue to operate normally. Do
                         not use this in conjunction with --no-cow
  -W, --no-cow        avoid using copy-on-write (COW); every change to the
                        virtual machine filesystem is applied directly to the
                        model filesystem

Console settings can be altered by the following options:
      --con0=MODE
      --con1=MODE     attach the virtual machine primary (con0) and secondary
                        (con1) consoles to different devices or terminal
                        emulators.
                        Allowed values for MODE are:
                          xterm   attach to a terminal emulator application
                          this    attach to stdin/stdout, i.e., use current
                                   terminal; only one console at a time can be
                                   set to 'this'.
                          tmux    run in a tmux session (only valid with con0 -
                                  see documentation for more details)
                          pty     attach to a pseudo-terminal
                          port:N  attach to TCP port N
                          none    disable console
                        The default modes for con0 and con1, respectively, are
                        $VM_CON0 and $VM_CON1
      --xterm=TYPE    specify the terminal emulator application. The following
                        values are supported:
                          alacritty    use the lightweight Alacritty terminal
                          gnome        use the GNOME Terminal
                          kitty        use the lightweight Kitty terminal
                          konsole      use the KDE Konsole
                          wsl          use Windows Subsystem for Linux (WSL) in
                                        a conhost.exe window
                          wt           use Windows Subsystem for Linux (WSL) in
                                        a Windows Terminal window
                          xterm        use the standard xterm (default)

If wanting to set up a lab, the following options are relevant:
  -e, --exec=FILE     run a specified command or script inside the virtual
                        machine during the boot phase
  -l, --hostlab=DIR   tell the virtual machine that the base directory for a
                        Netkit-JH laboratory is DIR

Miscellaneous:
$(help_option)
      --append=PARAM  append additional kernel command line parameters when
                        running the virtual machine kernel; PARAM can also be
                        an OPTION=VALUE pair. This option can be used multiple
                        times. Parameters will be passed to the kernel in the
                        same order in which they are provided
      --debug         run the virtual machine under a GDB instance to report
                        more messages than with --show-boot-log, and for
                        further debugging. The process requires a SIGINT
                        delivery with kill -INT <pid> to start debugging (if
                        the session booted successfully)
  -F, --foreground    do not launch the virtual machine in background (the
                        latter being the default behavior). Note that virtual
                        hubs are always started in background, regardless of
                        this option. This is the default when using 'this' as
                        the console mode
  -n, --dry-run, --just-print, --recon  do not start anything, just show which
                                         commands would be executed
      --show-boot-log  do not hide the boot log with 'quiet' when the kernel
                        is booting. This option is useful for finding errors in
                        the boot sequence without having to use --debug
      --tmux-attached  run each VM in tmux and start a terminal attached to the
                        tmux session. This is equivalent to VM_CON0=tmux and
                        TMUX_OPEN_TERMS=yes in netkit.conf
      --tmux-detached  run each VM in a tmux session without opening terminals.
                        This is the same as VM_CON0=tmux and TMUX_OPEN_TERMS=no
                        in netkit.conf
  -v, --verbose       show machine details and commands ran
$(version_option)

Note: unless otherwise stated, whitespace is not permitted in any option
argument. It is also prohibited in filepaths, including the path to the current
directory at the time vstart is invoked.

END_OF_HELP

   exit "$status"
}


###############################################################################
# Check for invalid characters in filepaths for the ubd argument (set with the
# --filesystem and --model-fs options and also by default).
# Usage:
#   validate_ubd_argument [FILE]...
# Globals:
#   r- SCRIPTNAME
# Arguments:
#  ... - filepath(s) of COW or model filesystems
# Returns:
#   None. Exits the script with with usage 1 if invalid.
# Example:
#   None
###############################################################################
validate_ubd_argument() {
   local files=( "$@" )

   local file

   for file in "${files[@]}"; do
      if str_contains "$file" "," ":"; then
         warn "$file: Invalid character in filesystem path"
         usage 1
      fi
   done
}


###############################################################################
# Warn if file is located on a filesystem that does not support sparse files.
# Usage:
#   check_fs FILE
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - file on target filesystem
# Returns:
#   None
# Example:
#   None
###############################################################################
check_fs() {
   local file=$1

   local fs_type

   # Non-exhaustive list of filesystems that support sparse files
   local supportive_fs="ext2?|ext2/ext3|fuse(blk|ctl)|jfs|ntfs|reiserfs|xfs|zfs"

   # Get the host filesystem type
   fs_type=$(stat --file-system --format "%T" -- "$file")

   if [[ ! "$fs_type" =~ ^($supportive_fs)$ ]]; then
      warn "Filesystem '$fs_type' may not support sparse files, this could result in performance loss and disk space consumption"
   fi
}


###############################################################################
# Append network interface configurations to kernel_cmd and write details to 
# standard output.
# Usage:
#   process_interface_configs VERBOSE JUST_PRINT MCONSOLE [INTERFACE]...
# Globals:
#   -w kernel_cmd
#   r- NETKIT_HOME
# Arguments:
#  ... - array of interface specifications (ethN=DOMAIN)
# Returns:
#   None
# Example:
#   None
###############################################################################
process_interface_configs() {
   local interface_specifications=( "$@" )

   local interface_specification interface
   local hub_specification hub_name tap_addr guest_addr
   local socket

   local enabled_default_route=false
   local indent=""

   [ "${#interface_specifications[@]}" -eq 0 ] && return
   echo -n "   Interfaces: "

   for interface_specification in "${interface_specifications[@]}"; do
      interface=${interface_specification%%=*}
      hub_specification=${interface_specification#*=}

      # Check if tap interface (regular hubs cannot be named with commas)
      if [[ "$hub_specification" == *,* ]]; then
         # Format: tap,tap_addr,guest_addr
         IFS=, read -r hub_name tap_addr guest_addr <<< "$hub_specification"

         socket=$(get_hub_socket "1" "$hub_name")
         kernel_cmd+=( "autoconf_$interface=$guest_addr" )

         # Ensure the default route is specified only once
         if ! $enabled_default_route; then
            kernel_cmd+=( "def_route=$tap_addr" )
            enabled_default_route=true
         fi

         echo "$indent$interface @ $hub_name (tap; $socket)"
      else
         # This is a normal interface
         unset tap_addr guest_addr
         hub_name=$hub_specification

         socket=$(get_hub_socket "" "$hub_name")
         
         echo "$indent$interface @ $hub_name ($socket)"
      fi

      kernel_cmd+=( "$interface=daemon,,,$socket" )

      # Indent subsequent lines
      indent="               "
   done
}


###############################################################################
# Delete .disk file as soon as it is created by the UML instance.
# Usage:
#   remove_fs FILE
# Globals:
#   None
# Arguments:
#   $1 - filepath of filesystem (.disk file) to remove
# Returns:
#   None
# Example:
#   remove_fs "$file" &
###############################################################################
remove_fs() {
   local file=$1

   while [ ! -f "$file" ]; do
      sleep 1
   done

   rm --force -- "$file"
}


###############################################################################
# Run relevant kernel invocation setup functions and then invoke the UML kernel
# instance. Upon return, clean up redundant network hubs.
# Usage:
#   run_kernel FILE KERNEL_CMD...
# Globals:
#   r- hub_list
# Arguments:
#   $1 - filesystem (.disk) file to remove. Empty string to not remove it
#  ... - kernel invocation command line arguments
# Returns:
#   None
# Example:
#   None
###############################################################################
run_kernel() {
   local fs=$1

   # Remove .disk file, if requested
   [ -n "$fs" ] && remove_fs "$fs" &

   "${kernel_cmd[@]}"
   clean_hubs "${hub_list[@]}"
}


# shellcheck source=./script_utils
. -- "$NETKIT_HOME/bin/script_utils"
# shellcheck source=./vcommon
. -- "$NETKIT_HOME/bin/vcommon"

# Write to the vcommands log
log_write "$0 $*"


# Get command line options
long_opts="append:,con0:,con1:,debug,dry-run,exec:,filesystem:,foreground,\
help,hide-disk-file,hostlab:,just-print,kernel:,mem:,model-fs:,mount:,no-cow,\
no-hosthome,print,recon,show-boot-log,test:,tmux-attached,tmux-detached,\
verbose,version,xterm:"
short_opts="De:Ff:Hk:Ll:M:m:nvWw:"

for i in $(seq 0 $MAX_INTERFACES); do
   long_opts="$long_opts,eth$i:"
done

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      --append)
         kernel_cmd_append+=( "$2" )
         shift
         ;;
      --con0|--con1)
         opt=$1
         console=$2
         shift

         case $console in
            xterm|this|tmux|pty|port:*|none)
               [ "$opt" = "--con0" ] && VM_CON0=$console || VM_CON1=$console
               ;;
            *)
               warn "$console: Unrecognized console"
               usage 1
               ;;
         esac
         ;;
      -D|--hide-disk-file)
         rm_fs=1
         ;;
      --debug)
         debug=1
         ;;
      -e|--exec)
         exec_cmd=$2
         shift
         ;;
      --eth*)
         interface=${1#--}
         hub_name=$2
         shift

         # Collision domain names are validated later in create_hub_list
         interface_specifications+=( "$interface=$hub_name" )
         ;;
      -F|--foreground)
         foreground=1
         ;;
      -f|--filesystem)
         # Filepath is validated with validate_ubd_argument later
         fs=$(readlink --canonicalize-missing -- "$2")
         shift
         ;;
      -H|--no-hosthome)
         no_hosthome=1
         ;;
      --help)
         usage 0
         ;;
      -k|--kernel)
         VM_KERNEL=$(readlink --canonicalize-missing -- "$2")
         shift
         ;;
      -l|--hostlab)
         hostlab_dir=$2
         shift
         ;;
      -M|--mem)
         VM_MEMORY=$2

         if [ "$VM_MEMORY" -lt "$MIN_MEM" ] || [ "$VM_MEMORY" -gt "$MAX_MEM" ]; then
            warn "Memory out of permitted range (min: $MIN_MEM MB; max: $MAX_MEM MB)"
            usage 1
         fi

         shift
         ;;
      -m|--model-fs)
         # Filepath is validated with validate_ubd_argument later
         VM_MODEL_FS=$(readlink --canonicalize-missing -- "$2")
         shift
         ;;
      --mount)
         mnt_specifications+=( "$2" )
         shift
         ;;
      -n|--dry-run|--just-print|--recon)
         just_print=1
         ;;
      --show-boot-log)
         show_boot_log=1
         ;;
      --test)
         # This is a hidden option which is passed through by ltest to specify
         # that the machine should run lab test scripts (option argument is
         # time delay between lab startup and test invocation).
         kernel_cmd_append+=( "\"test=$2\"" )
         shift
         ;;
      --tmux-attached)
         VM_CON0="tmux"
         TMUX_OPEN_TERMS=yes
         ;;
      --tmux-detached)
         VM_CON0="tmux"
         TMUX_OPEN_TERMS=no
         ;;
      -v|--verbose)
         verbose=1
         ;;
      --version)
         show_version
         exit 0
         ;;
      -W|--no-cow)
         no_cow=1
         ;;
      --xterm)
         TERM_TYPE=$2
         shift

         if [[ ! "$TERM_TYPE" =~ ^(konsole|gnome|xterm|alacritty|kitty|wsl|wt)$ ]]; then
            warn "$TERM_TYPE: Unsupported terminal emulator"
            usage 1
         fi
         ;;
      --)
         shift
         break
         ;;
      *)
         warn "Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

# Parse virtual machine name
if [ $# -eq 0 ]; then
   warn "Missing machine name"
   usage 1
elif [ $# -gt 1 ]; then
   warn "Can only specify one machine"
   usage 1
fi

vhost=$1
validate_hostnames "$vhost"


# Check whether user is trying to attach more than one console to stdin/stdout
if [ "$VM_CON0" = "this" ] && [ "$VM_CON1" = "this" ]; then
   warn "Only one console can be attached to the current terminal"
   usage 1
fi

if [ -n "$no_cow" ]; then
   # Check whether a COW filesystem has been explictly provided when using the
   # '-W|--no-cow' option.
   if [ -n "$fs" ]; then
      warn "Cannot provide a filesystem name with --no-cow"
      usage 1
   fi

   # Check whether the user asked to hide the virtual machine filesystem while
   # using the '-W|--no-cow' option
   if [ -n "$rm_fs" ]; then
      warn "Cannot hide the filesystem when using --no-cow"
      usage 1
   fi
fi


# Check whether the requested terminal emulator application exists
if [ "$VM_CON0" = "tmux" ] && [ "$TMUX_OPEN_TERMS" = "yes" ] || [ "$VM_CON0" = "xterm" ] || [ "$VM_CON1" = "xterm" ]; then
   # Some xterm option arguments are not their relevant executable's name. We
   # hence map these edge cases here.
   case $TERM_TYPE in
      gnome)         term_executable="gnome-terminal";;
      wsl)           term_executable="wsl.exe";;
      wt)            term_executable="wt.exe";;
      *)             term_executable=$TERM_TYPE;;
   esac

   if ! command -v -- "$term_executable" > /dev/null 2>&1; then
      warn "$term_executable: Terminal emulator not found"
      exit 1
   fi
fi


###############################################################################
# The following code constructs the command to invoke the UML kernel instance
###############################################################################


### BLOCKING SCRIPT ###########################################################
# The blocking script is a wrapper that forces gnome and tmux to block when
# invoked.
if [ "$VM_CON0" = "xterm" ]; then
   kernel_cmd=( "$NETKIT_HOME/bin/block-wrapper" "$TERM_TYPE" "$vhost" )
elif [ "$VM_CON0" = "tmux" ]; then
   kernel_cmd=( "$NETKIT_HOME/bin/block-wrapper" "tmux" "$vhost" )
fi


# Create file for machine details
out_file=$(mktemp)
# shellcheck disable=2064
trap "rm --force -- '$out_file'" EXIT

# Scoping the following block allows machine details to be outputted
# sequentially, even when parallel startup is enabled.
{
   echo "============= Starting virtual machine '$vhost' ============="

   ### KERNEL BINARY ##########################################################
   echo "   Kernel:     $VM_KERNEL"
   kernel_cmd+=( "$VM_KERNEL" )


   ### UML ID #################################################################
   # This is used to assign a unique ID to the instance and to name the PID
   # file and mconsole socket.
   kernel_cmd+=( "umid=$vhost" )


   ### MEMORY #################################################################
   echo "   Memory:     $VM_MEMORY MB"
   ((VM_MEMORY += VM_MEMORY_SKEW))
   kernel_cmd+=( "mem=${VM_MEMORY}M" )


   ### FILESYSTEM(S) ##########################################################
   # NOTE: for some reason escaping quotes around the ubd0 argument allows for
   # filepaths with whitespace in(?)
   echo "   Model fs:   $VM_MODEL_FS"

   if [ -n "$no_cow" ]; then
      echo "   Filesystem: using model fs (no COW)"
      validate_ubd_argument "$VM_MODEL_FS"
      check_fs "$VM_MODEL_FS"

      # Use model fs as virtual machine filesystem (do not use COW)
      kernel_cmd+=( "\"ubd0=$VM_MODEL_FS\"" )

      fs=$VM_MODEL_FS
   else
      : "${fs:="$PWD/$vhost.disk"}"

      echo -n "   Filesystem: $fs"
      validate_ubd_argument "$VM_MODEL_FS" "$fs"

      # We check the directory because the .disk (if new) will not already be
      # there
      check_fs "$(dirname -- "$fs")"

      # Explicitly declaring the model fs name is redundant after the COW file
      # has been created. Nevertheless, this is needed in order to later get
      # information about the virtual machine (i.e., by using vlist).
      kernel_cmd+=( "\"ubd0=$fs,$VM_MODEL_FS\"" )

      [ ! -f "$fs" ] && echo " (new)" || echo
   fi


   ### ROOT FILESYSTEM ########################################################
   # NOTE: The following root= options should also be valid: /dev/ubda1 and
   # /dev/ubd/disc0/part1.
   kernel_cmd+=( "root=98:0" )


   ### MCONSOLE DIRECTORY #####################################################
   kernel_cmd+=( "uml_dir=$MCONSOLE_DIR" )


   ### NETWORK INTERFACES #####################################################
   create_hub_list "${interface_specifications[@]}"
   process_interface_configs "${interface_specifications[@]}"


   ### BOOT SEQUENCE VERBOSITY ################################################
   if [ -n "$debug" ]; then
      kernel_cmd=( "gdb --args" "${kernel_cmd[@]}" )
   elif [ -z "$show_boot_log" ]; then
      kernel_cmd+=( "quiet" )
   fi


   ### CONSOLES ###############################################################
   # NOTE: "xterm" maps to "this" for con0 because of the previously used
   # port-helper option.
   case $VM_CON0 in
      none)       kernel_cmd+=( "con0=null" );;
      this|xterm) kernel_cmd+=( "con0=fd:0,fd:1" );;
      pty)        kernel_cmd+=( "con0=pty" );;
      port:*)     kernel_cmd+=( "con0=$VM_CON0" );;
      # Dummy option used by vinfo to identify machines with a tmux session
      tmux)       kernel_cmd_append+=( "tmux" );;
   esac

   case $VM_CON1 in
      none)    kernel_cmd+=( "con1=null" );;
      xterm)   kernel_cmd+=( "con1=xterm" );;
      this)    kernel_cmd+=( "con1=fd:0,fd:1" );;
      pty)     kernel_cmd+=( "con1=pty" );;
      port:*)  kernel_cmd+=( "con1=$VM_CON1" );;
   esac


   ### CREATE "PROPER" TERMINAL EMULATOR ######################################
   # Argument format is <terminal emulator>,<title switch>,<exec switch>
   case $TERM_TYPE in
      gnome)         kernel_cmd+=( "xterm=gnome-terminal,-t,-x" );;
      konsole)       kernel_cmd+=( "xterm=konsole,-T,-e" );;
   esac


   # The following options are ignored by the UML kernel (they are not valid
   # command-line options), but used by the Netkit start-up scripts when
   # reading /proc/cmdline.
   # NOTE: some parameters are enclosed in escaped double quotes:
   #       "\"param=$value\""
   #       This preserves the quotes for when they are parsed in
   #       /etc/netkit/netkit-phase1, allowing 'value' to have whitespace
   #       inside. The parsing means double quotes cannot be present anywhere
   #       in the value.

   ### HOSTNAME ########################################## (non-UML option) ###
   # This specifies the hostname, set in /etc/netkit/enetkit-phase1. The value
   # of the umid parameter is used, but cannot be read because it is not
   # present in /proc/cmdline of the UML instance.
   kernel_cmd+=( "hostname=$vhost" )


   ### KERNEL MODULES #################################### (non-UML option) ###
   kernel_modules_dir="$(dirname -- "$VM_KERNEL")/modules"

   if [ -d "$kernel_modules_dir" ]; then
      echo "   Modules:    $kernel_modules_dir"
      kernel_cmd+=( "\"modules=$kernel_modules_dir\"" )
   fi


   ### HOSTHOME DIRECTORY ################################ (non-UML option) ###
   if [ -z "$no_hosthome" ]; then
      echo "   Hosthome:   $HOME"
      kernel_cmd+=( "\"hosthome=$HOME\"" )
   fi


   ### DIRECTORY MOUNTS ################################## (non-UML option) ###
   if [ "${#mnt_specifications[@]}" -gt 0 ]; then
      for mnt_specification in "${mnt_specifications[@]}"; do
         src_mnt=${mnt_specification%%,*}
         dst_mnt=${mnt_specification#*,}

         if str_contains "$src_mnt$dst_mnt" ","; then
            warn "$mnt_specification: Invalid character in mount specification"
            usage 1
         fi

         echo "   Mount:      $src_mnt @ $dst_mnt"
         kernel_cmd+=( "\"mount=$VM_MOUNT\"" )
      done
   fi


   ### HOSTLAB DIRECTORY ################################# (non-UML option) ###
   if [ -n "$hostlab_dir" ]; then
      echo "   Hostlab:    $hostlab_dir"
      kernel_cmd+=( "\"hostlab=$hostlab_dir\"" )
   fi


   ### BOOT COMMAND ###################################### (non-UML option) ###
   if [ -n "$exec_cmd" ]; then
      echo "   Boot cmd:   '$exec_cmd'"
      kernel_cmd+=( "\"exec=$exec_cmd\"" )
   fi


   ### DISABLE SELINUX ################################### (non-UML option) ###
   kernel_cmd+=( "SELINUX_INIT=0" )


   ### OTHER ARGUMENTS ########################################################
   if [ ${#kernel_cmd_append[@]} -gt 0 ]; then
      echo "   Other args: ${kernel_cmd_append[*]}"
      kernel_cmd+=( "${kernel_cmd_append[@]}" )
   fi


   echo
} > "$out_file"

[ -n "$verbose" ] && cat -- "$out_file"
rm --force -- "$out_file"


###############################################################################
# The following code invokes the UML kernel and any virtual network hubs
###############################################################################


if [ -z "$just_print" ]; then
   # Check whether the virtual machine already exists
   if get_machine_state "$USER_ID" "$vhost"; then
      warn "Virtual machine '$vhost' is already running; halt it or use a different hostname"
      exit 1
   fi

   # Check whether filesystem is already in use
   if file_in_use "$fs"; then
      warn "Filesystem '$fs' is already in use; specify a different filesystem"
      exit 1
   fi
fi


# Start network hubs
run_hubs "$verbose" "$just_print" "${hub_list[@]}"


# Completely hide primary console, if requested to
if [ -n "$just_print" ]; then
   echo "Not running ==> ${kernel_cmd[*]}"
   exit 0
fi


# Background invocation commands if not running directly in the parent terminal
[ -z "$foreground" ] && [ "$VM_CON0" != "this" ] && [ "$VM_CON1" != "this" ] &&
   backgrounded=1

if [ -n "$verbose" ]; then
   echo "Running ==> ${kernel_cmd[*]}"
else
   echo "Starting '$vhost'..."
fi

if [ "$VM_CON0" = "none" ]; then
   if [ -n "$backgrounded" ]; then
      run_kernel "${rm_fs:+$fs}" "${kernel_cmd[@]}" > /dev/null 2>&1 &
   else
      run_kernel "${rm_fs:+$fs}" "${kernel_cmd[@]}" > /dev/null 2>&1
   fi
else
   if [ -n "$backgrounded" ]; then
      run_kernel "${rm_fs:+$fs}" "${kernel_cmd[@]}" &
   else
      run_kernel "${rm_fs:+$fs}" "${kernel_cmd[@]}"
   fi
fi


# Connect to the tmux session if TMUX_OPEN_TERMS is set
if [ "$TMUX_OPEN_TERMS" = "yes" ] && [ "$VM_CON0" = "tmux" ]; then
    vconnect --terminal --interval 5 --retry-count 20 -- "$vhost" &> /dev/null &
fi
