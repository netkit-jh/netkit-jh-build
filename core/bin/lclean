#!/usr/bin/env bash

#     Copyright 2002-2009 Stefano Pettini, Fabio Ricci, Massimo Rimondini
#     Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This script can be used to clean up a directory that contains a Netkit lab.
# All temporary files are removed, including .disk files.


###############################################################################
# Write lclean's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... [MACHINE]..."
}


###############################################################################
# Write lclean's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Clean a Netkit lab directory of temporary files and machine file systems.

This command can be used to clean up a directory containing a Netkit lab. It
takes care of removing any temporary files, that is, '.ready' files, '.log'
files, the 'readyfor.test' file as well as virtual machines (COW) filesystems
('.disk' files). Therefore, any change to the virtual machines filesystems is
lost. Of course, any persistent part of the lab is preserved, including those
files that are automatically copied inside virtual machines during the boot
phase.

  -d DIRECTORY        clean up the lab inside DIRECTORY. By default, the
                        cleaning process takes place in the current directory

Miscellaneous:
$(help_option)
  -v, --verbose       show which files are being deleted
$(version_option)

The cleaning process involves temporary files generated for any of the virtual
machines of the lab. If one or more MACHINEs are passed on the command line,
then only those files generated for the matching virtual machines are deleted,
as well as the 'readyfor.test' file. If any of the VM names are invalid (i.e.,
it does not correspond to a virtual machine of the lab), it will simply be
skipped.

END_OF_HELP

   exit "$status"
}


SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"
# shellcheck source=./lcommon
. "$NETKIT_HOME/bin/lcommon"

# Write to the vcommands log
log_write "$0 $*"


# Get command line options
long_opts="help,version,verbose"
short_opts="d:v"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      -d)
         LAB_DIRECTORY=$(readlink --canonicalize-missing "$2")
         shift
         ;;
      --help)
         usage 0
         ;;
      -v|--verbose)
         VERBOSE=1
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

# Non-option arguments are machine names
VHOSTLIST=( "$@" )

for host in "${VHOSTLIST[@]}"; do
   # TODO: change to validate against hostname regex
   if string_contains " " "$host"; then
      echo 1>&2 "$SCRIPTNAME: Hostname cannot contain whitespace"
      exit 1
   fi
done


# If no lab directory has been given, assume current directory
LAB_DIRECTORY=${LAB_DIRECTORY:-$PWD}

# Check that the lab directory exists
if [ ! -d "$LAB_DIRECTORY" ]; then
   echo 1>&2 "$SCRIPTNAME: $LAB_DIRECTORY: Directory does not exist"
   exit 1
fi


# Print lab information
bold_print "====================== Cleaning up lab =========================="
lab_welcome
bold_print "================================================================="

# Clean up the lab directory
lab_clean
bold_print "Cleaning completed."
bold_print "================================================================="
