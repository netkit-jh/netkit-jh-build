#!/usr/bin/env bash

#     Copyright 2004-2009 Massimo Rimondini - Computer Networks Research Group,
#     Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is a support script that configures a TUN/TAP interface for connecting
# a virtual machine to the Internet.
# It is not intended for standalone usage.

# Script arguments follow (arguments from 3 to 6 are only required when action
# is "start").
NETKIT_HOME=$1    # NETKIT_HOME environment variable. Environment was reset after sudo so we pass it in command line.
ACTION=$2         # either "start" or "stop"
USER_NAME=$3      # name of the user the tunnel is being configured for
TAP_ADDRESS=$4    # address of the (host side) tap interface


TAP_DEVICE="nk_tap_$USER_NAME"


case $ACTION in
   start)
      if [ ! -c /dev/net/tun ]; then
         printf "Creating /dev/net/tun device...\t\t"
         if ! sudo mknod -m 666 /dev/net/tun c 10 200; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      printf "Bringing down %s (if any)...\t" "$TAP_DEVICE"
      sudo ifconfig "$TAP_DEVICE" down > /dev/null
      echo "done."

      printf "Bringing down tunnel (if any)...\t"
      sudo "$NETKIT_HOME/bin/tunctl" -d "$TAP_DEVICE" > /dev/null
      echo "done."

      printf "Setting up tunnel...\t\t\t"
      if ! sudo "$NETKIT_HOME/bin/tunctl" -u "$USER_NAME" -t "$TAP_DEVICE" > /dev/null; then
         echo "failed."
         exit 1
      fi
      echo "done."
      
      printf "Bringing up %s...\t\t" "$TAP_DEVICE"
      if ! sudo ifconfig "$TAP_DEVICE" "$TAP_ADDRESS" up; then
         echo "failed."
         exit 1
      fi
      echo "done."
      
      printf "Setting permissions for /dev/net/tun...\t"
      if ! sudo chmod 666 /dev/net/tun; then
         echo "failed."
         exit 1
      fi
      echo "done."
      
      printf "Enabling IP forwarding...\t\t"
      if ! echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward; then
         echo "failed."
         exit 1
      fi
      echo "done."

      # Create a new masquerade rule if it doesn't already exist.
      if ! sudo iptables -n -t nat -L POSTROUTING | grep -q "MASQUERADE.*Netkit-JH"; then
         printf "Enabling masquerading...\t\t"
         if ! sudo iptables -t nat -A POSTROUTING ! -o lo -m comment --comment "Netkit-JH" -j MASQUERADE; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      # Create a new forwarding rule if it doesn't already exist.
      if ! sudo iptables -n -vL FORWARD | grep -q "ACCEPT.*nk_tap_+.*Netkit-JH"; then
         printf "Opening firewall for tunnel...\t\t"
         if ! sudo iptables -I FORWARD -i nk_tap_+ -m comment --comment "Netkit-JH" -j ACCEPT; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi
      ;;
   stop)
      if sudo iptables -n -vL FORWARD | grep -q "ACCEPT.*nk_tap_+.*Netkit-JH"; then
         printf "Closing firewall...\t\t\t\t"
         if ! sudo iptables -D FORWARD -i nk_tap_+ -m comment --comment "Netkit-JH" -j ACCEPT; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      if sudo iptables -n -t nat -L POSTROUTING | grep -q "MASQUERADE.*Netkit-JH"; then
         printf "Disabling masquerading...\t\t\t"
         if ! sudo iptables -t nat -D POSTROUTING ! -o lo -m comment --comment "Netkit-JH" -j MASQUERADE; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      printf "Disabling IP forwarding...\t\t\t"
      if ! echo 0 | sudo tee /proc/sys/net/ipv4/ip_forward; then
         echo "failed."
         exit 1
      fi
      echo "done."

      echo "Bringing down tap devices and tunnels:"

      for sys_class_net_entry in /sys/class/net/nk_tap_*; do
         uid=$(cat "$sys_class_net_entry/user/owner")

         # Ignore tuntap devices not owned by the user (if specified)
         if [ -n "$USER_NAME" ] && [ "$(id -u "$USER_NAME")" != "$uid" ]; then
            continue
         fi

         interface=$(basename "$sys_class_net_entry")

         printf "\t%s...\t\t\t" "$interface"
         if ! sudo ifconfig "$interface" down > /dev/null; then
            echo "failed."
            exit 1
         fi
         echo "done."

         printf "\t%s tunnel...\t\t" "$interface"
         if ! sudo "$NETKIT_HOME/bin/tunctl" -d "$interface" > /dev/null; then
            echo "failed."
            exit 1
         fi
         echo "done."
      done

      echo "Done."
      
      printf "Resetting permissions for /dev/net/tun...\t"
      if ! sudo chmod 660 /dev/net/tun; then
         echo "failed."
         exit 1
      fi
      echo "done."
      ;;
esac
