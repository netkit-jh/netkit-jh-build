#!/usr/bin/env bash

#     Copyright 2020-2022 Adam Bromiley, Joseph Bunce, Joshua Hawking - Warwick
#     Manufacturing Group, University of Warwick.
#     Copyright 2004-2009 Massimo Rimondini - Computer Networks Research Group,
#     Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is a support script that configures a TUN/TAP interface for connecting
# a virtual machine to the Internet. It is not intended for standalone usage.


# Ensure NETKIT_HOME is set
if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. -- "$NETKIT_HOME/bin/script_utils"
# shellcheck source=./vcommon
. -- "$NETKIT_HOME/bin/vcommon"


# Either "start" or "stop"
action=$1

# Name of the user the tunnel is being configured for
target_user=$2

# Collision domain name (for naming the interface)
domain=$3

# Address of the (host side) tap interface
tap_addr=$4


# Custom sudo prompt to replace default (allows for prefixed newline)
sudo_cmd=(
   "sudo"
   "--prompt"
   $'\n[sudo] password for %p: '
   "--"
)

postrouting_rule=(
   "POSTROUTING"
   "!" "--out-interface" "lo"
   "--match" "comment" "--comment" "Netkit-JH"
   "--jump" "MASQUERADE"
)
forward_rule=(
   "FORWARD"
   "--in-interface" "nk_+"
   "--match" "comment" "--comment" "Netkit-JH"
   "--jump" "ACCEPT"
)


case $action in
   start)
      print_divider "Creating 'tap' interface ($tap_addr; $target_user)" "*" 61
      print_divider "      (raised privileges necessary)      " "*" 61

      if [ ! -c /dev/net/tun ]; then
         printf "Creating /dev/net/tun device...\t\t\t\t"
         if ! "${sudo_cmd[@]}" mknod --mode 666 /dev/net/tun c 10 200; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      # Get name for the user's tap interface
      tap_name=$(get_tap_interface "$target_user" "$domain")

      printf "Bringing down %s (if any)...\t\t" "$tap_name"
      "${sudo_cmd[@]}" ip link set dev "$tap_name" down > /dev/null 2>&1
      echo "done."

      printf "Bringing down tunnel (if any)...\t\t\t"
      "${sudo_cmd[@]}" "$NETKIT_HOME/bin/tunctl" -d "$tap_name" > /dev/null 2>&1
      echo "done."

      if ip addr show | grep --quiet "inet $tap_addr"; then
         echo 1>&2 "$tap_addr: Tap address already allocated to another interface. Remove the interface or change the IP address"
         exit 1
      fi

      printf "Setting up tunnel...\t\t\t\t\t"
      if ! "${sudo_cmd[@]}" "$NETKIT_HOME/bin/tunctl" -u "$target_user" -t "$tap_name" > /dev/null; then
         echo "failed."
         exit 1
      fi
      echo "done."

      printf "Assigning address %s/24 to %s...\t" "$tap_addr" "$tap_name"
      if ! "${sudo_cmd[@]}" ip address add "$tap_addr/24" dev "$tap_name"; then
         echo "failed."
         exit 1
      fi
      echo "done."

      printf "Bringing up %s...\t\t\t\t" "$tap_name"
      if ! "${sudo_cmd[@]}" ip link set dev "$tap_name" up; then
         echo "failed."
         exit 1
      fi
      echo "done."

      printf "Setting permissions for /dev/net/tun...\t\t\t"
      if ! "${sudo_cmd[@]}" chmod 666 /dev/net/tun; then
         echo "failed."
         exit 1
      fi
      echo "done."

      printf "Enabling IP forwarding...\t\t\t\t"
      if ! echo 1 | "${sudo_cmd[@]}" tee /proc/sys/net/ipv4/ip_forward > /dev/null; then
         echo "failed."
         exit 1
      fi
      echo "done."

      # Create a new masquerade rule if it doesn't already exist.
      if ! "${sudo_cmd[@]}" iptables --table nat --check "${postrouting_rule[@]}" 2> /dev/null; then
         printf "Enabling masquerading...\t\t\t\t"
         if ! "${sudo_cmd[@]}" iptables --table nat --append "${postrouting_rule[@]}"; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      # Create a new forwarding rule if it doesn't already exist.
      if ! "${sudo_cmd[@]}" iptables --check "${forward_rule[@]}" 2> /dev/null; then
         printf "Opening firewall for tunnel...\t\t\t\t"
         if ! "${sudo_cmd[@]}" iptables --insert "${forward_rule[@]}"; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      print_divider "" "*" 61
      ;;
   stop)
      print_divider "Removing 'tap' configurations${target_user:+" for $target_user"}" "*" 61
      print_divider "      (raised privileges necessary)      " "*" 61

      if [ -z "$target_user" ]; then
         printf "Checking firewall...\t\t\t\t\t"
         if "${sudo_cmd[@]}" iptables --check "${forward_rule[@]}" 2> /dev/null; then
            echo "done."
            printf "Closing firewall...\t\t\t\t\t"
            if ! "${sudo_cmd[@]}" iptables --delete "${forward_rule[@]}"; then
               echo "failed."
               exit 1
            fi
            echo "done."
         else
            echo "done."
         fi

         if "${sudo_cmd[@]}" iptables --table nat --check "${postrouting_rule[@]}" 2> /dev/null; then
            printf "Disabling masquerading...\t\t\t\t"
            if ! "${sudo_cmd[@]}" iptables --table nat --delete "${postrouting_rule[@]}"; then
               echo "failed."
               exit 1
            fi
            echo "done."
         fi

         printf "Disabling IP forwarding...\t\t\t\t"
         if ! echo 0 | "${sudo_cmd[@]}" tee /proc/sys/net/ipv4/ip_forward > /dev/null; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      sys_class_net_entries=( /sys/class/net/nk_* )
      if [ -e "${sys_class_net_entries[0]}" ]; then
         echo "Bringing down 'tap' devices and tunnels:"

         for sys_class_net_entry in "${sys_class_net_entries[@]}"; do
            if [ -n "$target_user" ]; then
               # Ignore tuntap devices not owned by the user (if specified)
               uid=$(cat -- "$sys_class_net_entry/owner")
               [ "$(id --user "$target_user")" != "$uid" ] && continue
            fi

            tap_name=$(basename -- "$sys_class_net_entry")

            printf "\t%s...\t\t\t\t" "$tap_name"
            if ! "${sudo_cmd[@]}" ip link set dev "$tap_name" down > /dev/null 2>&1; then
               echo "failed."
               continue
            fi
            echo "done."

            printf "\t%s tunnel...\t\t\t" "$tap_name"
            if ! "${sudo_cmd[@]}" "$NETKIT_HOME/bin/tunctl" -d "$tap_name" > /dev/null 2>&1; then
               echo "failed."
               continue
            fi
            echo "done."
         done
      fi

      if [ -z "$target_user" ]; then
         printf "Resetting permissions for /dev/net/tun...\t\t"
         if ! "${sudo_cmd[@]}" chmod 660 /dev/net/tun; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      print_divider "" "*" 61
      ;;
esac
