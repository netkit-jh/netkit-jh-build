#!/usr/bin/env bash

#     Copyright 2004-2009 Massimo Rimondini - Computer Networks Research Group,
#     Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is a support script that configures a TUN/TAP interface for connecting
# a virtual machine to the Internet. It is not intended for standalone usage.


# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"


# Either "start" or "stop"
action=$1

# Name of the user the tunnel is being configured for
target_user=$2

# Address of the (host side) tap interface
tap_address=$3

# Get name for the user's tap interface
tap_device_name=$(get_tap_interface "$target_user")


postrouting_rule=( "POSTROUTING" "!" "--out-interface" "lo" "--match" "comment" "--comment" "Netkit-JH" "--jump" "MASQUERADE" )
forward_rule=( "FORWARD" "--in-interface" "netkit_+" "--match" "comment" "--comment" "Netkit-JH" "--jump" "ACCEPT" )


case $action in
   start)
      if [ ! -c /dev/net/tun ]; then
         printf "Creating /dev/net/tun device...\t\t"
         if ! sudo mknod --mode 666 /dev/net/tun c 10 200; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      printf "Bringing down %s (if any)...\t" "$tap_device_name"
      sudo ifconfig "$tap_device_name" down > /dev/null 2>&1
      echo "done."

      printf "Bringing down tunnel (if any)...\t"
      sudo "$NETKIT_HOME/bin/tunctl" -d "$tap_device_name" > /dev/null
      echo "done."

      printf "Setting up tunnel...\t\t\t"
      if ! sudo "$NETKIT_HOME/bin/tunctl" -u "$target_user" -t "$tap_device_name" > /dev/null; then
         echo "failed."
         exit 1
      fi
      echo "done."
      
      printf "Bringing up %s...\t\t" "$tap_device_name"
      if ! sudo ifconfig "$tap_device_name" "$tap_address" up; then
         echo "failed."
         exit 1
      fi
      echo "done."
      
      printf "Setting permissions for /dev/net/tun...\t"
      if ! sudo chmod 666 /dev/net/tun; then
         echo "failed."
         exit 1
      fi
      echo "done."
      
      printf "Enabling IP forwarding...\t\t"
      if ! echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward; then
         echo "failed."
         exit 1
      fi
      echo "done."

      # Create a new masquerade rule if it doesn't already exist.
      if ! sudo iptables --table nat --check "${postrouting_rule[@]}" 2> /dev/null; then
         printf "Enabling masquerading...\t\t"
         if ! sudo iptables --table nat --append "${postrouting_rule[@]}"; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      # Create a new forwarding rule if it doesn't already exist.
      if ! sudo iptables --check "${forward_rule[@]}" 2> /dev/null; then
         printf "Opening firewall for tunnel...\t\t"
         if ! sudo iptables --insert "${forward_rule[@]}"; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi
      ;;
   stop)
      if sudo iptables --check "${forward_rule[@]}" 2> /dev/null; then
         printf "Closing firewall...\t\t\t\t"
         if ! sudo iptables --delete "${forward_rule[@]}"; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      if sudo iptables --table nat --check "${postrouting_rule[@]}" 2> /dev/null; then
         printf "Disabling masquerading...\t\t\t"
         if ! sudo iptables --table nat --delete "${postrouting_rule[@]}"; then
            echo "failed."
            exit 1
         fi
         echo "done."
      fi

      printf "Disabling IP forwarding...\t\t\t"
      if ! echo 0 | sudo tee /proc/sys/net/ipv4/ip_forward; then
         echo "failed."
         exit 1
      fi
      echo "done."

      echo "Bringing down tap devices and tunnels:"

      for sys_class_net_entry in /sys/class/net/netkit_*; do
         # Avoids need for shopt -s nullglob
         [ ! -e "$sys_class_net_entry" ] && continue

         # Ignore tuntap devices not owned by the user (if specified)
         uid=$(cat "$sys_class_net_entry/owner")
         [ -n "$target_user" ] && [ "$(id --user "$target_user")" != "$uid" ] && continue

         device=$(basename "$sys_class_net_entry")

         printf "\t%s...\t\t\t" "$device"
         if ! sudo ifconfig "$device" down > /dev/null; then
            echo "failed."
            exit 1
         fi
         echo "done."

         printf "\t%s tunnel...\t\t" "$device"
         if ! sudo "$NETKIT_HOME/bin/tunctl" -d "$device" > /dev/null; then
            echo "failed."
            exit 1
         fi
         echo "done."
      done

      echo "Done."
      
      printf "Resetting permissions for /dev/net/tun...\t"
      if ! sudo chmod 660 /dev/net/tun; then
         echo "failed."
         exit 1
      fi
      echo "done."
      ;;
esac
