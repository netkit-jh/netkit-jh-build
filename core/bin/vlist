#!/usr/bin/env bash

#     Copyright 2002-2009 Maurizio Patrignani, Maurizio Pizzonia, Fabio Ricci,
#     Massimo Rimondini - Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is the Netkit vlist script, which is used to list running virtual machines
# and/or ask for details about a given machine.


###############################################################################
# Write vlist's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... [MACHINE]..."
}


###############################################################################
# Write vlist's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
List running Netkit virtual machines and get detailed information about
MACHINE(s).

  -n, --no-header     suppress header line and summary information in the
                        output
  -u, --user=USERNAME  show virtual machines owned by USERNAME. Using the
                        special user name '-' results in considering all users.
                        By default, only virtual machines for the current user
                        are shown

Miscellaneous:
$(help_option)
$(version_option)

By specifying one or more MACHINEs it is possible to get detailed information.
If --user=- is also being used, information about the first MACHINE with a
matching name in the output of 'vlist --user=-' is reported.

END_OF_HELP

   exit "$status"
}


###############################################################################
# Summarise all running machines for a specific user.
# Usage:
#   print_vm_summary NO_HEADER USER
# Globals:
#   r- HUB_SOCKET_PREFIX
#   r- HUB_SOCKET_EXTENSION
#   r- NETKIT_HOME
#   rw vm_info
#   rw vm_uml_sockets
# Arguments:
#   $1 - do not display column headers; pass an empty string to show them
#   $2 - user; pass an empty string for all users
# Returns:
#   None
# Example:
#   None
###############################################################################
print_vm_summary() {
   no_header=$1
   user=$2

   [ -n "$user" ] && pgrep_euid="--euid"

   # Column spacing:
   #   USER    20
   #   VHOST   20
   #   PID      5
   #   SIZE     9
   # A single space is added between each column, too (3 between SIZE and
   # INTERFACES).
   [ -z "$no_header" ] && echo "USER                 VHOST                  PID      SIZE   INTERFACES"

   # Iterate over the PIDs of running Netkit instances.
   # The process hierarchy (relevance of the PGID) is documented in
   # scripts_utils.
   machine_count=0
   for pid in $(pgrep ${pgrep_euid:+"$pgrep_euid"} ${user:+"$user"} --full "^$NETKIT_HOME/kernel/netkit-kernel"); do
      # Get the process group ID (PGID)
      pgid=$(ps --no-headers --format pgid --pid "$pid")

      # Ignore if not a process leader
      [ "$pgid" -ne "$pid" ] && continue
   
      machine_count=$((machine_count + 1))

      get_vm_info_by_pid "$pid"

      # Total virtual memory usage of the process.
      # Logically this should be the sum of every process in the group (PGID),
      # however in practice just taking the value of the parent process is
      # enough. The value should equate to roughly the size of the machine's
      # memory.
      total_memory_usage=$((total_memory_usage + vm_info[memory_usage]))

      # No column will be truncated on a value that is too long
      printf "%-20s %-20s %5d %9d   " "${vm_info[owner]}" "${vm_info[umid]}" "${vm_info[pid]}" "${vm_info[memory_usage]}"

      first_iteration=true
      for i in "${!vm_uml_sockets[@]}"; do
         filepath=${vm_uml_sockets[$i]}
         filename=$(basename "$filepath")

         collision_domain_and_ext=${filename#"$HUB_SOCKET_PREFIX"_*_}
         collision_domain=${collision_domain_and_ext%"$HUB_SOCKET_EXTENSION"}

         # Comma-separate subsequent interfaces
         if $first_iteration; then
            first_iteration=false
         else
            echo -n ", "
         fi

         echo -n "eth$i @ $collision_domain"
      done

      echo
   done

   echo
   printf "Total virtual machines: %9d\n" "$machine_count"
   printf "Total consumed memory:  %9d KB\n" "$total_memory_usage"
}


###############################################################################
# Print complete information about a machine.
# Usage:
#   print_vm_info_by_name USER VM
# Globals:
#   r- NETKIT_HOME
#   rw vm_info
#   rw vm_uml_sockets
#   r- VM_MEMORY_SKEW
# Arguments:
#   $1 - owner of the machine; pass an empty string for all users
#   $2 - machine name
# Returns:
#   Prints machine details to stdout. Returns 0 on success, non-zero on
#   failure.
# Example:
#   None
###############################################################################
print_vm_info_by_name() {
   user=$1
   vm=$2

   get_vm_info_by_name "$user" "$vm"

   # Output the machine details in a structured format
   echo "============= Information for virtual machine '$vm' ============="
   echo " --- Accounting information ---"
   echo "   PID:               ${vm_info[pid]}"
   echo "   Owner:             ${vm_info[owner]}"
   echo "   Used mem:          ${vm_info[memory_usage]} KB"
   echo " --- Emulation parameters ---"
   echo "   Kernel:            ${vm_info[kernel]}"
   echo "   Modules:           ${vm_info[modules]:-"-"}"
   echo "   Memory:            $((vm_info[mem] - VM_MEMORY_SKEW)) MB (+$VM_MEMORY_SKEW MB skew)"
   echo "   Model fs:          ${vm_info[fs]}"
   echo "   Filesystem:        ${vm_info[disk]:-"-"}"

   echo -n "   Interfaces:        "

   first_iteration=true
   for i in "${!vm_uml_sockets[@]}"; do
      filepath=${vm_uml_sockets[$i]}
      filename=$(basename "$filepath")

      collision_domain_and_ext=${filename#"$HUB_SOCKET_PREFIX"_*_}
      collision_domain=${collision_domain_and_ext%"$HUB_SOCKET_EXTENSION"}

      # Indent subsequent lines
      if $first_iteration; then
         first_iteration=false
      else
         echo -n "                      "
      fi

      echo "eth$i @ $collision_domain ($filepath)"
   done

   echo "   Hostlab:           ${vm_info[hostlab]:-"-"}"
   echo "   Hosthome:          ${vm_info[hosthome]:-"-"}"
   echo "   Working directory: ${vm_info[hostwd]:-"-"}"
   echo "   Boot command:      ${vm_info[boot_cmd]:-"-"}"

   echo -n "   Console 1:         "
   case ${vm_info[con0]} in
      none)    echo "disabled";;
      xterm)   echo "terminal emulator";;
      this)    echo "stdin/stdout";;
      pty)     echo "pty";;
      port:*)  echo "port ${con0#"port:"}"
   esac

   echo -n "   Console 2:         "
   case ${vm_info[con1]} in
      none)    echo "disabled";;
      xterm)   echo "terminal emulator";;
      this)    echo "stdin/stdout";;
      pty)     echo "pty";;
      port:*)  echo "port ${con1#"port:"}"
   esac

   echo "   Other arguments:   ${vm_info[other]:-"-"}"
   echo "   Console socket:    ${vm_info[mconsole]}"
}


SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./lcommon
. "$NETKIT_HOME/bin/lcommon"
# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"

# Write to the vcommands log
log_write "$0 $*"


target_user=$USER_ID


# Get command line options
LONG_OPTS="help,no-header,user:,version"
SHORT_OPTS="nu:"

if ! GETOPT_OPTS=$(getopt --name "$SCRIPTNAME" --options "$SHORT_OPTS" --longoptions "$LONG_OPTS" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$GETOPT_OPTS"

while true; do
   case $1 in
      --help)
         usage 0
         ;;
      -n|--no-header)
         no_header=true
         ;;
      -u|--user)
         target_user=$2
         [ "$target_user" = "-" ] && unset target_user
         shift
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

# Non-option arguments are machine names
vm_ids=( "$@" )

for host in "${vm_ids[@]}"; do
   if string_contains " " "$host"; then
      echo 1>&2 "$SCRIPTNAME: Hostname cannot contain whitespace"
      exit 1
   fi
done


# Check whether -u - is being used together with a virtual machine ID
if [ -z "$target_user" ] && [ "${#vm_ids[@]}" -ne 0 ]; then
   echo 1>&2 "$SCRIPTNAME: When giving VM names, a specific user ID must be provided"
   usage 1
fi


# Display summary of virtual machines
if [ "${#vm_ids[@]}" -eq 0 ]; then
   print_vm_summary "$no_header" "$target_user"
fi


# Get verbose information for specific virtual machines
for vm in "${vm_ids[@]}"; do
   if get_machine_state "$target_user" "$vm"; then
      print_vm_info_by_name "$target_user" "$vm"
   else
      echo 1>&2 "$SCRIPTNAME: no virtual machine named '$vm' exists for $target_user"
   fi
done
