#!/usr/bin/env bash

#     Copyright 2002-2009 Maurizio Patrignani, Maurizio Pizzonia, Fabio Ricci,
#     Massimo Rimondini - Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This is the Netkit vcrash script. This script can be used to kill running virtual
# machines without shutting them down. This roughly corresponds to unplugging
# their power cord. This script is also useful if you want to kill a hanging
# virtual machine.


###############################################################################
# Write vcrash's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]... MACHINE..."
}


###############################################################################
# Write vcrash's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Kill running virtual machines without halting them. This roughly corresponds to
disconnecting their power plug. MACHINE is either the name or the PID of a
virtual machine.

  -k, --just-kill     by default, virtual machines are crashed by using their
                        mconsole socket. This method is generally faster, but
                        in some situations it may not work properly (for
                        example, if a virtual machine is somewhy frozen). If
                        crashing a machine via its mconsole fails, vcrash
                        automatically tries hard to kill the virtual machine
                        processes. By using this option, the attempt via the
                        mconsole socket is simply skipped, and virtual machine
                        processes are just killed
  -q, --quick         disable checking if machines have actually been crashed,
                        and causes vcrash to exit (almost) immediately. The
                        'almost' is due to the fact that vcrash will still wait
                        for the crash directive to reach the virtual machine
                        when mconsole is being used (default behaviour unless
                        -k is used). Of course, a check inside vcrash prevents
                        from waiting endlessly
  -r, --remove-fs     delete virtual machine (COW) filesystem after crashing
                        machine. Using this option has no effect on machines
                        started with the --no-cow option. Log files are not
                        removed
      --test          do not actually crash virtual machines. Just show which
                        processes would be killed or which mconsole socket
                        would be used to send the crash directive
  -u, --user=USERNAME  crash virtual machine(s) owned by user USERNAME. By
                        using the special user name '-' any virtual machine can
                        be crashed, regardless of its owner (this requires
                        administrative privileges). If MACHINE is a virtual
                        machine name, and the option --user=- is being used,
                        then only the virtual machine reported by
                        'vlist --user=- MACHINE' is crashed

Miscellaneous:
$(help_option)
$(version_option)

END_OF_HELP

   exit "$status"
}


###############################################################################
# Kill a virtual machine by signaling the corresponding processes.
# Usage:
#   kill_by_signaling TEST_MODE QUICK_MODE USER MACHINE
# Globals:
#   None
# Arguments:
#   $1 - set to 1 for test mode, empty string otherwise
#   $2 - set to 1 for quick mode, empty string otherwise
#   $3 - owner of machine
#   $4 - machine to kill
# Returns:
#   Returns zero on success, non-zero if there was an issue with killing the
#   machine.
# Example:
#   None
###############################################################################
kill_by_signaling() {
   local test_mode=$1
   local quick_mode=$2
   local target_user=$3
   local vhost=$4

   local pids

   # Signalling processes twice ensures they stop even if they need to be
   # killed in a certain order
   IFS=" " read -ra pids <<< "$(get_vhost_all_pids_by_name "$target_user" "$vhost")"

   echo "Virtual machine PIDs: ${pids[*]}"

   # We are in test mode, just show which processes would be killed
   [ -n "$test_mode" ] && return 1

   echo -n "Killing... "

   if [ "${#pids[@]}" -eq 0 ]; then
      echo "done."
      return 0
   fi

   if [ -n "$quick_mode" ]; then
      # Just kill processes
      kill -KILL "${pids[@]}"
      kill -CONT "${pids[@]}"
      return 0
   fi

   # Signalling processes twice ensures they stop even if they need to be
   # killed in a certain order
   kill -TERM "${pids[@]}"
   kill -TERM "${pids[@]}"

   sleep 1
   IFS=" " read -ra pids <<< "$(get_vhost_all_pids_by_name "$target_user" "$vhost")"

   if [ "${#pids[@]}" -gt 0 ]; then
      echo -n "killing harder... "

      kill -KILL "${pids[@]}"
      kill -CONT "${pids[@]}"

      sleep 1

      if get_machine_state "$target_user" "$vhost"; then
         echo "failed!"
         echo 1>&2 "Failed to crash virtual machine '$vhost'"
         return 1
      fi
   fi

   echo "done."

   return 0
}


###############################################################################
# Use uml_mconsole to crash a machine.
# Usage:
#   mconsole_halt MCONSOLE
# Globals:
#   r- NETKIT_HOME
# Arguments:
#   None
# Returns:
#   Returns zero on success, non-zero if there was an issue with killing the
#   machine.
# Example:
#   None
###############################################################################
mconsole_halt() {
   local mconsole=$1

   local uml_mconsole_pid

   "$NETKIT_HOME/bin/uml_mconsole" "$mconsole" halt > /dev/null &
   uml_mconsole_pid=$!

   # Check whether the mconsole process is hanging forever
   for _ in {0..5}; do
      [ ! -e "/proc/$uml_mconsole_pid" ] && return 0
      sleep 1
   done

   echo "hangup detected... "
   kill "$uml_mconsole_pid"

   return 1
}


###############################################################################
# Use mconsole_halt to crash a machine.
# Usage:
#   kill_by_mconsole QUICK_MODE MCONSOLE USER MACHINE
# Globals:
#   None
# Arguments:
#   $1 - set to 1 for quick mode, empty string otherwise
#   $2 - mconsole socket
#   $3 - owner of machine
#   $4 - machine to kill
# Returns:
#   Returns zero on success, non-zero if there was an issue with killing the
#   machine.
# Example:
#   None
###############################################################################
kill_by_mconsole() {
   local quick_mode=$1
   local mconsole=$2
   local target_user=$3
   local vhost=$4

   echo -n "Crashing... "

   mconsole_halt "$mconsole"

   # When the above command exits, an attempt via the mconsole has been
   # performed. Regardless of whether the virtual machine has actually halted,
   # the above command ensures that the uml_mconsole process has ended.
   if [ -z "$quick_mode" ] && get_machine_state "$target_user" "$vhost"; then
      # Make a second attempt if machine is still running
      echo -n "retrying... "
      sleep 1
      mconsole_halt "$mconsole" || return 1
   fi

   echo "done."

   return 0
}


SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"

# Write to the vcommands log
log_write "$0 $*"


target_user=$USER_ID


# Get command line options
long_opts="help,just-kill,quick,remove-fs,root,test,user:,version"
short_opts="kqru:"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      --help)
         usage 0
         ;;
      -k|--just-kill)
         force=1
         ;;
      -q|--quick)
         quick_mode=1
         ;;
      -r|--remove-fs)
         remove_fs=1
         ;;
      --test)
         test_mode=1
         ;;
      -u|--user)
         target_user=$2
         shift
         if [ "$target_user" = "-" ]; then
            unset target_user
         elif ! id "$target_user" > /dev/null 2>&1; then
            echo 1>&2 "$SCRIPTNAME: $target_user: User does not exist"
            usage 1
         fi
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

# Check whether virtual machine name is missing
if [ $# -eq 0 ]; then
   echo 1>&2 "$SCRIPTNAME: Missing machine name"
   usage 1
fi

# Non-option arguments are machine names
vhosts=( "$@" )
validate_hostnames "${vhosts[@]}"


for vhost in "${vhosts[@]}"; do
   # Check whether the current machine exists
   if get_machine_state "$target_user" "$vhost"; then
      get_vhost_info_by_name "$target_user" "$vhost"

      echo "============= Crashing virtual machine '$vhost' (PID ${vhost_info[pid]}) ========="
      echo "Virtual machine owner: $target_user"
      echo "Virtual machine mconsole socket: ${vhost_info[mconsole]}"

      if [ -n "$force" ] || [ -n "$test_mode" ]; then
         # Crash virtual machines by simply killing their processes
         kill_by_signaling "$test_mode" "$quick_mode" "$target_user" "$vhost" || continue
      else
         # Crash virtual machines via uml_mconsole
         if ! kill_by_mconsole "${vhost_info[mconsole]}" "$target_user" "$vhost"; then
            kill_by_signaling "" "$quick_mode" "$target_user" "$vhost" || continue
         fi
      fi

      # Filesystem and tmux session removal only occurs if the machine
      # successfully shut down (if the previous commands returned 0).

      # Kill tmux Sessions
      echo "Checking for '$vhost' tmux session"

      if tmux -L netkit has-session -t="$vhost" 2>/dev/null; then
         echo "Killing tmux session '$vhost'"
         tmux -L netkit kill-session -t="$vhost"
      fi

      echo "Checking for '$vhost-dead' tmux session"

      if tmux -L netkit has-session -t="$vhost-dead" 2>/dev/null; then
         echo "Killing tmux session '$vhost-dead'"
         tmux -L netkit kill-session -t="$vhost-dead"
      fi

      # Remove filesystem (.disk file)
      [ -n "$remove_fs" ] && [ -n "${vhost_info[disk]}" ] && rm --verbose "${vhost_info[disk]}"
   fi

done
