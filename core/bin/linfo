#!/usr/bin/env bash

#     Copyright 2002-2009 Stefano Pettini, Fabio Ricci, Massimo Rimondini
#     Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This script displays information about a lab without running it. Optionally,
# it can create a PNG file containing the level 2 topology of the lab.


###############################################################################
# Write linfo's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]..."
}


###############################################################################
# Write linfo's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Display information about a Netkit lab without running it.
Displayed information includes the number of virtual machines that make up the
lab. If asked to, the command can create a PNG file containing a graphical map
of the link-level topology of the lab.
Multiple lab directories can be specified by using the -d option. A -d is
needed per directory. The -a option will auto-detect other labs within the
parent directory.

  -d DIRECTORY        assume the lab is located inside DIRECTORY. By default,
                        the lab is assumed to be located in the current
                        directory
  -m, --map=FILE      Create a graphical link-level topology map of the lab and
                        save it into FILE in PNG format. This requires the
                        Graphviz library to be installed
  -a, --auto          Finds sibling folders which all share the same prefix as
                        the current directory bar the final character. E.g.,
                        running in lab3a will find all directories starting
                        with lab3* (lab3a, lab3b, lab3c, etc) can be paired
                        with multiple -d to specify additional folders

Miscellaneous:
$(help_option)
$(version_option)

END_OF_HELP

   exit "$status"
}


SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"
# shellcheck source=./lcommon
. "$NETKIT_HOME/bin/lcommon"

# Write to the vcommands log
log_write "$0 $*"


# Get command line options
long_opts="auto,help,version,map:"
short_opts="ad:m:"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      -a|--auto)
         # TODO: remove or make better.
         # TODO: use shopt -s nullglob (and for other glob examples) 
         lab_directories+=( "${PWD%?}"*/ )
         ;;
      -d)
         lab_directories+=( "$(readlink --canonicalize-missing "$2")" )
         shift
         ;;
      --help)
         usage 0
         ;;
      -m|--map)
         map_file=$2
         shift
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

if [ $# -gt 0 ]; then
   echo 1>&2 "$SCRIPTNAME: Too many arguments"
   exit 1
fi


# If no lab directory has been given, assume current directory
[ "${#lab_directories[@]}" -eq 0 ] && lab_directories=( "$PWD" )


for lab_directory in "${lab_directories[@]}"; do
   # Check that the lab directory exists
   if [ ! -d "$dir" ]; then
      echo 1>&2 "$SCRIPTNAME: $dir: No such directory"
      exit 1
   fi

   build_vhostlist "$lab_directory"
   cum_vhostlist+=( "${VHOSTLIST[@]}" )
done


# TODO: maybe just stick in lab_welcome
printf -v cum_vhostlist_str '%s, ' "${cum_vhostlist[@]}"
cum_vhostlist_str=${cum_vhostlist_str%", "}


# Print lab information
bold_print "======================== Lab information ========================"
lab_welcome "${lab_directories[@]}"
bold_print "The lab is made up of ${#cum_vhostlist_str[@]} virtual machines ($cum_vhostlist_str)."

for dir in "${lab_directories[@]}"; do
   [ -f "$dir/lab.dep" ] && bold_print "The lab part $dir supports parallel startup."
done

if [ -n "$map_file" ]; then
   for dir in "${lab_directories[@]}"; do
      lab_conf="${dir%/}/lab.conf"
      
      if [ ! -f "$lab_conf" ]; then
         echo 1>&2 "$SCRIPTNAME: Unable to find file $lab_conf: Skipping."
         continue
      fi

      lab_confs+=( "$lab_conf" )
   done

   if [ "${#lab_confs[@]}" -eq 0 ]; then
      echo 1>&2 "$SCRIPTNAME: No valid lab.confs found - cannot create topology map."
      exit 1
   fi

   if lab_map "$map_file" "${lab_confs[@]}"; then
      bold_print "Link-level topology map saved into $map_file."
   fi
fi

bold_print "================================================================="
