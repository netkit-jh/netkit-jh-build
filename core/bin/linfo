#!/usr/bin/env bash

#     Copyright 2020-2022 Adam Bromiley, Joshua Hawking, Kunal Shah - Warwick
#     Manufacturing Group, University of Warwick.
#     Copyright 2002-2009 Stefano Pettini, Fabio Ricci, Massimo Rimondini
#     Computer Networks Research Group, Roma Tre University.
#
#     This file is part of Netkit.
# 
#     Netkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Netkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Netkit.  If not, see <http://www.gnu.org/licenses/>.

# This script displays information about a lab without running it. Optionally,
# it can create a PNG file containing the level 2 topology of the lab.


###############################################################################
# Write linfo's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME [OPTION]..."
}


###############################################################################
# Write linfo's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Display information about a Netkit lab without running it.
Displayed information includes the number of virtual machines that make up the
lab. If asked to, the command can create a PNG file containing a graphical map
of the link-level topology of the lab.
Multiple lab directories can be specified by using the -d option. A -d is
needed per directory. The -a option will auto-detect other labs within the
parent directory.

  -d DIR              assume the lab is located inside DIR. By default, the lab
                        is assumed to be located in the current directory
  -m, --map=FILE      create a graphical link-level topology map of the lab and
                        save it into FILE in PNG format. This requires the
                        Graphviz library to be installed
  -a, --auto[=GLOB]   finds sibling folders which all share the same prefix as
                        the current directory bar the final character. E.g.,
                        running in lab3a will find all directories starting
                        with lab3* (lab3a, lab3b, lab3c, etc). Alternatively, a
                        GLOB can be specifed which will be used to pattern
                        match directories. Ensure this is not expanded on the
                        command line with suitable escaping of special
                        characters. The option can be paired with the -d option
                        to specify additional folders.

Miscellaneous:
$(help_option)
$(version_option)

END_OF_HELP

   exit "$status"
}


###############################################################################
# Generate a DOT language graph from a list of lab.conf files and virtual
# machine names and write to standard output.
# Usage:
#   generate_dot_graph [LAB_CONF]...
# Globals:
#   r- lab_vhosts
# Arguments:
#  ... - list of lab.conf files to analyse
# Returns:
#   None
# Example:
#   generate_dot_graph lab.conf | dot
###############################################################################
generate_dot_graph() {
   local lab_confs=( "$@" )

   local configuration vhost opt value
   local hub_name hub_names

   declare -A interface_ids opts

   # Global map parameters
   cat << EOF
graph netkit_jh_graph {
   overlap="scalexy"
   resolution=400.0
   splines="line"
EOF

   while IFS= read -r configuration; do
      # The [][] is ][ inside a bracket expression to match an opening or
      # closing square bracket.
      # NOTE: we assume hostname_regex does not allow square brackets,
      # so the option string is the first instance of them.
      vhost=$(awk -F"[][]" '{ print $1 }' <<< "$configuration")
      opt=$(awk -F"[][]" '{ print $2 }' <<< "$configuration")

      # Everything after the first '='
      value=${configuration#*=}

      # Ignore if VM is not part of the lab
      array_contains "$vhost" "${lab_vhosts[@]}" || continue

      # If option is all-digit, it must be a network interface specification
      if [[ "$opt" =~ ^([0-9]|[1-9][0-9]+)$ ]]; then
         # Ignore if it has already been seen
         [[ "${interface_ids[$vhost]}" =~ \ $opt\  ]] && continue

         # Add an edge between the machine and its collision domain
         cat << EOF
   "$vhost" -- "$value" [
      taillabel=<<TABLE BGCOLOR="white" BORDER="0" CELLPADDING="1" CELLSPACING="0"><TR><TD>eth$opt</TD></TR></TABLE>>,
      labeldistance=1.5,
      labelfontsize=8.0
   ]
EOF
         array_contains "$value" "${hub_names[@]}" || hub_names+=( "$value" )

         # Interface IDs cannot have whitespace, so a space-separated list is
         # safe.
         interface_ids[$vhost]+=" $opt "
      else
         opts[$vhost]+="$opt = $value<BR/>"
      fi
   done < <(grep --extended-regexp --no-filename -- "^$hostname_regex\[.*\]=" "${lab_confs[@]}")

   # Label each machine with its hostname and vstart options
   for vhost in "${lab_vhosts[@]}"; do
      cat << EOF
   "$vhost" [
      shape="box",
      label=<$vhost<FONT POINT-SIZE="10"><BR/>${opts[$vhost]}</FONT>>,
      height=0.5,
      width=0.5
   ]
EOF
   done

   # Remove bounding box from collision domain labels (just text)
   for hub_name in "${hub_names[@]}"; do
      cat << EOF
   "$hub_name" [
      shape="plaintext",
      width=0,
      height=0,
      margin=0
   ]
EOF
   done

   echo "}"
}


# This function creates a link-level topology map of the lab. Its argument is
# the name of the PNG file to save the map in.
lab_map() {
   local map_file=$1
   local lab_confs=( "${@:2}" )

   local graph_generator="neato"

   if ! command -v -- "$graph_generator" > /dev/null 2>&1; then
      warn "$graph_generator: Graphviz graph generator not found"
      exit 1
   fi

   generate_dot_graph "${lab_confs[@]}" |
      "$graph_generator" -Tpng -o"$map_file"
}


# shellcheck source=./script_utils
. -- "$NETKIT_HOME/bin/script_utils"
# shellcheck source=./lcommon
. -- "$NETKIT_HOME/bin/lcommon"

# Write to the vcommands log
log_write "$0 $*"


# Get command line options
long_opts="auto,help,version,map:"
short_opts="ad:m:"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      -a|--auto)
         glob=$2
         shift

         if [ -n "$glob" ]; then
            # shellcheck disable=SC2206
            dirs=( $glob )
         else
            # Remove final character from PWD and expand to a list of
            # directories with that prefix. E.g. running in /path/to/lab3a/
            # will find all directories in /path/to/ starting with lab3*, such
            # as /path/to/lab3b/.
            dirs=( "${PWD%?}"*/ )
         fi

         # The if-statement removes the need for nullglob to be set
         if [ -d "${dirs[0]}" ]; then
            lab_dirs+=( "${dirs[@]}" )
         else
            warn "List of lab directories could not be generated"
         fi
         ;;
      -d)
         lab_dirs+=( "$(readlink --canonicalize-missing -- "$2")" )
         shift
         ;;
      --help)
         usage 0
         ;;
      -m|--map)
         map_file=$2
         shift
         ;;
      --version)
         show_version
         exit 0
         ;;
      --)
         shift
         break
         ;;
      *)
         warn "Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done

if [ $# -gt 0 ]; then
   warn "Too many arguments"
   exit 1
fi


# If no lab directory has been given, assume current directory
[ "${#lab_dirs[@]}" -eq 0 ] && lab_dirs=( "$PWD" )


for lab_dir in "${lab_dirs[@]}"; do
   # Check that the lab directory exists
   if [ ! -d "$lab_dir" ]; then
      warn "$lab_dir: No such directory"
      exit 1
   fi

   # We must unset lab_vhosts when calling get_lab_vhosts in a loop because it
   # operates differently if already set.
   unset lab_vhosts
   get_lab_vhosts "$lab_dir"
   cum_lab_vhosts+=( "${lab_vhosts[@]}" )
done


# Ideally this would be in lab_welcome however it requires resetting of the
# lab_vhosts global array.
printf -v cum_lab_vhosts_str '%s, ' "${cum_lab_vhosts[@]}"
cum_lab_vhosts_str=${cum_lab_vhosts_str%", "}


# Print lab information
bold_print "======================== Lab information ========================"
lab_welcome "${lab_dirs[@]}"
bold_print "The lab is made up of ${#cum_lab_vhosts[@]} virtual machines ($cum_lab_vhosts_str)."

for dir in "${lab_dirs[@]}"; do
   [ -f "$dir/lab.dep" ] && bold_print "The lab part $dir supports parallel startup."
done

if [ -n "$map_file" ]; then
   for dir in "${lab_dirs[@]}"; do
      lab_conf="$dir/lab.conf"

      if [ ! -f "$lab_conf" ]; then
         warn "Unable to find file $lab_conf: Skipping."
         continue
      fi

      lab_confs+=( "$lab_conf" )
   done

   if [ "${#lab_confs[@]}" -eq 0 ]; then
      warn "No valid lab.confs found - cannot create topology map."
      exit 1
   fi

   if lab_map "$map_file" "${lab_confs[@]}"; then
      bold_print "Link-level topology map saved into $map_file."
   fi
fi

bold_print "================================================================="
