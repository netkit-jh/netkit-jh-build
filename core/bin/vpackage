#!/usr/bin/env bash

# This script can be used to install new packages to the Netkit model
# filesystem.


###############################################################################
# Write vpackage's usage line to standard output.
# Usage:
#   usage_line
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
# Example:
#   None
###############################################################################
usage_line() {
   echo "Usage: $SCRIPTNAME COMMAND [OPTION]... [PACKAGE]..."
}


###############################################################################
# Write vpackage's usage as a full dialog or a "try --help".
# Usage:
#   usage STATUS
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - status code to exit with. When zero, usage will write to standard
#        output and describe all options (for --help). Else, it will write to
#        standard error and be a brief usage and try-help message.
# Returns:
#   None - exits with a status code of STATUS
# Example:
#   None
###############################################################################
usage() {
   local status=$1

   if [ "$status" -ne 0 ]; then
      usage_line 1>&2
      try_help
      exit "$status"
   fi

   cat << END_OF_HELP
$(usage_line)
Manage PACKAGEs on the model Netkit filesystem with apt-get or dpkg.

The following COMMANDs operate exactly as apt-get would:
  update              synchronise package index files with their respective
                        sources
  upgrade             install latest package versions
  dist-upgrade        upgrade and potentially remove unnecessary packages
  install PACKAGE...  install or upgrade packages and their dependencies
  remove PACKAGE...   remove packages, leaving their configuration files
  purge PACKAGE...    remove packages and their configuration files
  clean               clear out the apt cache
  autoremove          (alias auto-remove) remove dependencies that are no
                        longer needed

The following COMMANDs use other underlying package management programs:
  list                run dpkg --list to show all installed packages on the
                        filesystem

You can use the following options to configure vpackage or the underlying
package management command:
  -d DIRECTORY        mount the filesystem at the directory DIRECTORY. If the
                        mount point does not exist, Netkit will try to create
                        it. The default is $VPACKAGE_MOUNT_POINT
  -f, --filesystem=FILENAME  use FILENAME as the filesystem to be mounted. By
                              default, this is $VM_MODEL_FS
  -o, --pass=OPTION   pass OPTION unaltered to the underlying package
                        management command
      --only-upgrade  only install upgrades for the selected packages. This
                        uses the --only-upgrade option to apt-get and must be
                        used with the install subcommand
  -y, --assume-yes, --yes  automatic yes to prompts to run all commands
                            non-interactively. This uses the --assume-yes
                            underlying option and therefore will only work with
                            apt-get (dpkg has no such option).

Miscellaneous:
$(help_option)
  -p, --print         use the --simulate option on the underlying package
                        management command to show which commands would be
                        executed
$(version_option)
END_OF_HELP

   exit "$status"
}


###############################################################################
# Exit with usage 1 if string is not a valid vpackage subcommand.
# Usage:
#   validate_vpackage_subcommand COMMAND
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - subcommand name to validate
# Returns:
#   None. Exits with a non-zero usage on an invalid subcommand.
# Example:
#   None
###############################################################################
validate_vpackage_subcommand() {
   local subcommand=$1

   if [[ ! "$subcommand" =~ ^(list|update|upgrade|dist-upgrade|clean|autoremove|auto-remove|install|remove|purge)$ ]]; then
      echo 1>&2 "$SCRIPTNAME: Invalid subcommand '$subcommand'"
      usage 1
   fi
}


###############################################################################
# For use with an exit trap, unmount the filesystem.
# Usage:
#   cleanup MOUNT_POINT
# Globals:
#   None
# Arguments:
#   $1 - directory used as the mount mount_point
# Returns:
#   None
# Example:
#   trap "cleanup /mnt/fs" EXIT; ... ; exit
###############################################################################
cleanup() {
   local mount_point=$1

   local mount_point_resolvconf="$mount_point/etc/resolv.conf"

   sudo umount "$mount_point_resolvconf"
   sudo umount "$mount_point"
}


###############################################################################
# Mount a filesystem to a mount point and enable an exit trap for cleanup
# Usage:
#   mount_fs FILESYSTEM MOUNT_POINT
# Globals:
#   r- SCRIPTNAME
# Arguments:
#   $1 - filesystem image to mount
#   $2 - directory to be used as the mount point (will be created if does not
#        exist)
# Returns:
#   None
# Example:
#   None
###############################################################################
mount_fs() {
   local filesystem=$1
   local mount_point=$2

   local host_resolvconf="/etc/resolv.conf"
   local mount_point_resolvconf="$mount_point/etc/resolv.conf"

   sudo mkdir -p "$mount_point"
   
   if ! sudo mount --options loop --source "$filesystem" --target "$mount_point"; then
      echo 1>&2 "$SCRIPTNAME: Could not mount filesystem"
      exit 1
   fi

   if ! sudo mount --bind "$host_resolvconf" "$mount_point_resolvconf"; then
      echo 1>&2 "$SCRIPTNAME: Could not bind mount name resolution file"
      sudo umount "$mount_point"
      exit 1
   fi

   # Enable a trap to unmount the filesystem on exit
   # shellcheck disable=2064
   trap "cleanup \"$mount_point\"" EXIT
}


SCRIPTNAME=$(basename "$0")

if [ -z "$NETKIT_HOME" ]; then
   echo 1>&2 "$SCRIPTNAME: The NETKIT_HOME environment variable is not set"
   exit 1
fi

# shellcheck source=./script_utils
. "$NETKIT_HOME/bin/script_utils"

# Write to the vcommands log
log_write "$0 $*"


filesystem=$VM_MODEL_FS
mount_point=$VPACKAGE_MOUNT_POINT


# Get command line options
long_opts="assume-yes,filesystem:,help,only-upgrade,pass:,print,version,yes"
short_opts="d:o:py"

if ! getopt_opts=$(getopt --name "$SCRIPTNAME" --options "$short_opts" --longoptions "$long_opts" -- "$@"); then
   # getopt will output the errorneous command-line argument
   usage 1
fi

# (Safely) set positional parameters to those reordered by getopt
eval set -- "$getopt_opts"

while true; do
   case $1 in
      -d)
         mount_point=$(readlink --canonicalize-missing "$2")
         shift
         ;;
      -f|--filesystem)
         filesystem=$(readlink --canonicalize-missing "$2")
         shift
         ;;
      --help)
         usage 0
         ;;
      -o|--pass)
         passthrough_opts+=( "$2" )
         shift
         ;;
      --only-upgrade)
         passthrough_opts=( "--only-upgrade" "${passthrough_opts[@]}" )
         ;;
      -p|--print)
         passthrough_opts=( "--simulate" "${passthrough_opts[@]}" )
         ;;
      --version)
         showVersion
         exit 0
         ;;
      -y|--assume-yes|--yes)
         passthrough_opts=( "--assume-yes" "${passthrough_opts[@]}" )
         ;;
      --)
         shift
         break
         ;;
      *)
         echo 1>&2 "$SCRIPTNAME: Unknown error parsing command line arguments"
         usage 1
         ;;
   esac

   shift
done
   
# The first non-option argument is the subcommand, the rest are package names
if [ "$#" -lt 1 ]; then
   echo 1>&2 "$SCRIPTNAME: Missing subcommand"
   usage 1
fi

subcommand=$1
validate_vpackage_subcommand "$subcommand"

packages=( "${@:2}" )


# Warn for dangerous options
if [ "$subcommand" = "dist-upgrade" ]; then
   while true; do
      read -rp "Warning: dist-upgrade has the potential to delete packages that may be critical to the operation of Netkit. Continue [y/N]? " response
      case $response in
         [Yy]|[Yy][Ee][Ss])
            break
            ;;
         [Nn]|[Nn][Oo])
            exit 0
            ;;
         *)
            ;;
      esac
   done
fi


# Mount the Netkit filesystem. An EXIT trap will be set so we do not need to
# manually unmount the filesystem at each script exit point.
mount_fs "$filesystem" "$mount_point"


chroot_cmd=( "sudo" "chroot" "$mount_point" )

# vpackage subcommands that use apt-get can simply be passed through as a valid
# apt-get subcommand. This is not the case with dpkg.
# NOTE: for an unknown reason, apt-get --option RootDir does not work for
# installing packages, rather the packages get installed to the host system.
# chroot is not required for dpkg commands.
apt_get_cmd=( "${chroot_cmd[@]}" "apt-get" "${passthrough_opts[@]}" "$subcommand" )

# The following apt-get commands are not supported for reasons relating to
# complexity or lack of necessity for most users: dselect-upgrade, source,
# build-dep, check, autoclean|auto-clean, changelog, and indextargets.
case $subcommand in
   list)
      # We don't use --admindir in the event that the host system does not have
      # the dpkg. Instead, the dpkg binary on the Netkit filesystem will be
      # used.
      "${chroot_cmd[@]}" dpkg --list "${passthrough_opts[@]}" "${packages[@]}"
      ;;
   update|upgrade|dist-upgrade|clean|autoremove|auto-remove)
      "${apt_get_cmd[@]}"
      ;;
   install|remove|purge)
      "${apt_get_cmd[@]}" "${packages[@]}"
      ;;
esac
